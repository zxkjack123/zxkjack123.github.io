<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Volunteering as Chinese tutor</title>
    <url>/2018/05/18/English/Volunteering-as-Chinese-tutor/</url>
    <content><![CDATA[<p>There is a student organized group providing a Greater University Tutoring Service (GUTS) at University of Wisconsin. GUTS is a service for students who are learning languages other than English. Students learning foreign languages can apply to be a tutor to teach others his or her native language, or apply to be a tutee to learn a new language form a tutor. </p>
<p>For example, I am a native Chinese speaker, and I am now learning both English and Japanese. I applied to be a tutor to teach another student Chinese. And I also applied to learn Japanese from others. However, I can’t apply for learning English in this program. </p>
<p>This is a student community similar to Lang-8 in that language learners benefit each other. But the GUTS focus more on oral communications, i.e. listening and speaking, while Lang-8 focus more on written communication. </p>
<p>Now, they’ve matched me a tutee named Molly who is learning Chinese, but we haven’t met yet. I hope we enjoy the teaching and learning experience this semester. </p>
<p>However, there are only about 15 Japanese students on campus, and only a few people do volunteer work at GUTS. Unfortunately, I won’t get a tutor because they all already have tutees. </p>
<p>However, I was told that there is a Japanese student association and they will be having a spring kickoff event this Saturday and that students from other countries are also welcome to attend. I am planning to attend and meet some Japanese friends. It would be great if I had more chances to use Japanese to express myself, but I don’t know whether they have free time to tutor me. </p>
<p>Even worse, I don’t know whether or not they are willing to make a Chinese friend like me. Nevertheless, but I think I should at least try. So, I need to practice greeting phrases several times before the spring kickoff.</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>volunteering</tag>
        <tag>tutor</tag>
        <tag>Chinese</tag>
        <tag>Japanese</tag>
      </tags>
  </entry>
  <entry>
    <title>Expressing Myself</title>
    <url>/2019/05/16/English/expressing-myself/</url>
    <content><![CDATA[<p>I have been learning English in China since 2005. However, I still don’t have confidence in my English.</p>
<p>I’m now studying at the University of Wisconsin Madison. I am immersed in an English environment now. It is at this place that I have chances to speak directly to native English speakers. I need to use English to listen to others, to talk with others, to read articles and to write messages. </p>
<p>As for the listening and reading, I can generally understand others, except some jokes based on local things.</p>
<p>However, it’s a little hard for me to deliver my message to others. Some sentences confuse my friends. Sometimes it is a grammar problem, I made lots of mistakes on tenses and single/plural. Sometimes it is a vocabulary problem, I misspelled the important words. Well, these are still not the most serious difficulty. It is the phrase, especially the prepositional phrase that causes most misunderstanding. </p>
<p>Most Chinese have the same difficulties as me. I know the reason behind this phenomenon. The education and test method drive students to focus on reading and listening, to receive messages and to understand others. However, they have limited chance to practice expressing themselves. </p>
<p>I have to practice expressing myself more and more. I am also writing blog posts about my daily life and work. I think I can post the content on <a href="http://lang-8.com/551925/journals/166174560066022122116559685041472801357">lang-8</a> first, and then post it to my blog after reviewing.</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Tricks to shave words off of your writing</title>
    <url>/2019/05/16/English/shave_words_off_writing/</url>
    <content><![CDATA[<p>Writing in English is always harder than reading or listening for me. Sometimes, I need to use a very long complex stenense to express the meaning. Once I have wrote it, then I strugged to shave words off.</p>
<p>Fortunatelly, I read a <a href="https://twitter.com/ilana_horn/status/1071776519834492928">twitter</a> sharing tricks about it. So, I just copy it down here.</p>
<ol>
<li>Make things plural to omit articles. They can add up.<ul>
<li>Ex: “The teacher needs to know …” –&gt; “Teachers need to know …”</li>
</ul>
</li>
<li>Turn some prepositional phrases into adjectives. <ul>
<li>Ex: “Schools in urban communities” –&gt; “Urban schools”</li>
</ul>
</li>
<li>Some multi-word pharses can easily be truned into one word.<ul>
<li>Ex: “Due to the fact that” –&gt; “because”</li>
<li>Ex: “In order to” –&gt; “to”</li>
</ul>
</li>
<li>If you are describing something with two adjectives, pick one, maybe a new one.<ul>
<li>Ex: “Classrooms are blooming and buzzing” –&gt; “Classroom are hectic”</li>
</ul>
</li>
<li>Get rid of passive voice.<ul>
<li>Ex: “This study is focused on…” –&gt;  “This study focuses on”</li>
</ul>
</li>
<li>Plain(er) language is your friend.<ul>
<li>Ex: “Consistent with the theoretical perspective that learning is fundamentally situative…” –&gt; “Aligned with your view on the situative learning”</li>
</ul>
</li>
<li>If a multi-word term is going to be repeated a lot, use an acronym. (And this is from somebody woho <em>laothes</em> acronyms! But they help with word count.) </li>
<li>A common writing quirk: Writing a thick, dense sentence followed by “In other words,” with a lucid explanation. Get rid of the frist sentence and shtart with the second.</li>
<li>Omit unnecessary intensifiers like “very” or “extremely”.</li>
</ol>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>academic</tag>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>助词で用法整理</title>
    <url>/2019/05/16/Japanese/de/</url>
    <content><![CDATA[<p>按照在新标日中的出现顺序，助词<strong>で</strong>的用法有：</p>
<ul>
<li>名[交通工具]<strong>で</strong>动： 交通手段用助词<strong>で</strong>表示。不使用交通工具而步行时使用<strong>歩いて</strong>。首次出现于<a href="https://zxkjack123.github.io/Japanese/text-book-standard-6th/">第6课</a>。<ul>
<li>「例1」:　わたしはバス<strong>で</strong>家へ帰ります。 </li>
<li>「例2」:　李さんは<strong>歩いて</strong>アパートへ帰りました。</li>
</ul>
</li>
<li>名[場所]<strong>で</strong>动： 动作的场所用助词<strong>で</strong>。首次出现于<a href="https://zxkjack123.github.io/Japanese/text-book-standard-7th/">第7课</a>。<ul>
<li>「例1」：李さんは図書館<strong>で</strong>勉強します。</li>
</ul>
</li>
<li>名[工具]<strong>で</strong>动：表示手段以及原材料。首次出现于<a href="https://zxkjack123.github.io/Japanese/text-book-standard-8th/">第8课</a>。<ul>
<li>「例1」：李さんは日本語<strong>で</strong>手紙を書きます。</li>
</ul>
</li>
</ul>
<p>つづく</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-list/">笔记列表</a></li>
</ul>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>で</tag>
        <tag>助词</tag>
      </tags>
  </entry>
  <entry>
    <title>日语句子成分的名词化</title>
    <url>/2019/05/16/Japanese/nonize/</url>
    <content><![CDATA[<p>日语句子中，名词是很重要的一个成分。日语中存在很多将原本不是名词的成分转化成为可以当作名词使用的表达方式。</p>
<p>如果把句子成分的两个属性：词性和意义分开来看，句子成分的化形式就是将这个成分的词性变成名词的过程。这个过程有时侯还会为这个句子成分增加一层额外的意义。比如将动词或者小句转化为名词词性的<strong>の</strong>和将一类形转化为名词的<strong>さ</strong>，他们都没有给词汇本身增加额外的含义。而其他的很多词，比如<strong>ほう</strong>，<strong>ため</strong>等等，则给原来的句子或核心词汇增加了额外的含义。我感觉这额外增加的含义，就是<strong>ほう</strong>，<strong>ため</strong>他们本身作为名词的含义。也就是说，<strong>ほう</strong>，<strong>ため</strong>这些词并不是单纯的将动词或小句转化为名词的句子，反而更像是其前面的动词或者小句是<strong>ほう</strong>，<strong>ため</strong>的定语，用来修饰<strong>ほう</strong>，<strong>ため</strong>这些名词的定语。</p>
<p>特别是当我们把这些假名对应的汉字标注出来的时候，能够更加直观的理解到这其中增加的含义。</p>
<p>下面是在《标准日本语》（初级）课本中包含的一些将句子成分名词化的例子。</p>
<ul>
<li><strong>こと</strong> <a href="http://jisho.org/search/%E3%81%93%E3%81%A8">日本語：事, こと</a><ul>
<li>第20課：<strong>动(基本形)</strong>+<strong>ことができます</strong>，表示能力。「例」:私の趣味は切手を<strong>集めること</strong>です。</li>
<li>第21課：<strong>动(た形)</strong>+<strong>ことがあります</strong>，表示过去经历。「例」：私はすき焼きを<strong>食べたことがあります</strong>。</li>
<li>第31課：<strong>动(基本形/ない形)</strong>+<strong>ことがあります</strong>，表示有时会发生某种事态，<em>与21课的句型是完全不同的句型</em>。「例」：たまに朝ご飯を食<strong>べないことがあります</strong>。</li>
<li>第32課：<strong>动(基本形/ない形)</strong>+<strong>ことにします/ことにしました</strong>，表示说话人自己决定实施某种行为时使用。「例」：明日から毎日<strong>運動することにします</strong>。</li>
<li>第32課：<strong>动(基本形/ない形)</strong>+<strong>ことになりました</strong>，表示由于某种外在的原因导致形成了某种决定。「例」：来月から給料が<strong>上がることになりました</strong>。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>の</strong><ul>
<li>第26课：<strong>小句(动词简体形)</strong>+<strong>の</strong>，使小句名词化，表示<strong>做某动作</strong>的意思。「例」：<strong>自転車に二人で乗るの</strong>は危ないです。</li>
<li>第36課：<strong>动(基本形)</strong>+<strong>の</strong>+<strong>に</strong>,表示用途和基准。「例」：この写真はパスポートを<strong>申請するのに</strong>使います。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>ほう</strong>　<a href="http://jisho.org/search/%E3%81%BB%E3%81%86">日本語：方、ほう</a><ul>
<li>第21課：<strong>动(た形)</strong>+<strong>ほう</strong>，用于在两种事物中进行选择。「例」：もっと野菜を<strong>食べたほう</strong>がいいですよ。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>そう</strong>    （很奇怪，没找到对应汉字，而<a href="http://jisho.org/search/%E3%81%9D%E3%81%86">そう</a>怎么查了是个动词？)<ul>
<li>第33課： <strong>动/形</strong>+<strong>そう</strong>，事物样态或者推测。动词使用ます连用形加そう，一类形去い加そう，二类形直接加そう。「例」：<strong>おいしそう</strong>なケーキですね。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>ため</strong> <a href="http://jisho.org/search/%E3%81%9F%E3%82%81">日本語：為、ため</a><ul>
<li><strong>小句1(基本形)+ために, 小句2</strong>，小句1是小句2的<strong>目的</strong>。「例」：<strong>日本に留学するために</strong>、お金をためています。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>よう</strong>　<a href="http://jisho.org/search/%E3%82%88%E3%81%86">日本語：様、よう</a><ul>
<li>第38課：<strong>小句(基本形/ない形)</strong>+<strong>よう</strong>，表示状态。「例」：<strong>よく見えるように</strong>、大きく書きました。  </li>
<li>第44課：<strong>小句(简体形)</strong>+<strong>ようです</strong>，表示根据说话人感知的某种情况进行推测。「例」：玄関のところにだれか<strong>いるようです</strong>。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>まま</strong> <a href="http://jisho.org/search/%E3%81%BE%E3%81%BE">日本語：儘、侭、まま</a><ul>
<li>第42課：<strong>小句1(动词た形/ない形)</strong>+<strong>まま</strong>,<strong>小句2</strong>，表示将理应改变的状态保持着去进行另外的动作。「例」：テレビをつけたまま、出かけてしまいました。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>はず</strong> <a href="http://jisho.org/search/%E3%81%AF%E3%81%9A">日本語：筈、はず</a> <ul>
<li>第42課：<strong>小句(简体形)</strong>+<strong>はずです</strong>，表示根据某种理由做出某种推断。「例」：会議は五時までですから、もうすぐ<strong>終わるはずです</strong>。 </li>
</ul>
</li>
</ul>
<ul>
<li><strong>さ</strong><ul>
<li>第44課：<strong>一类形</strong>+<strong>さ</strong>，构成一种表示某种状态的名词。构成方式是一类形词尾的<strong>い</strong>换成<strong>さ</strong>。「例」：この<strong>暑さ</strong>はいつまで続くんでしょう。</li>
</ul>
</li>
</ul>
<ul>
<li>动词ます形去ます<ul>
<li>第43課：部分动词的ます形去ます之后，形成名词。「例」：休み、申し出</li>
</ul>
</li>
</ul>
<p>つづく…</p>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>名词化</tag>
      </tags>
  </entry>
  <entry>
    <title>こそあど系列词汇用法整理</title>
    <url>/2019/05/16/Japanese/ko-so-a-do/</url>
    <content><![CDATA[<p><strong>こそあど</strong>是日语中非常常见的指代用词汇，它们可以和很多其他词汇组合起来构成各种指代。这里对课文正出现的<strong>こそあど</strong>用法进行整理汇总。</p>
<p><strong>こそあ</strong>是确定的情况下使用，根据距离的不同而不同。距离近的用<strong>こ</strong>，稍微有一点距离的用<strong>そ</strong>，距离远的用<strong>あ</strong>。<strong>ど</strong>是不确定（疑问）的情况下使用的。</p>
<p>当说话人与听话人位于同一位置时：<br><img src="ko-so-a-do/ko-so-a-do-same-position.jpeg" alt="说话人与听话人位于同一位置"></p>
<p>当说话人与听话人相隔一段距离时：<br><img src="ko-so-a-do/ko-so-a-do-different-position.png" alt="说话人与听话人相隔一段距离"></p>
<h3 id="用法汇总"><a href="#用法汇总" class="headerlink" title="用法汇总"></a>用法汇总</h3><ul>
<li><strong>こそあど</strong>+<strong>れ</strong>：指代事物，不能用于修饰名词。首次出现于新标日<a href="https://zxkjack123.github.io/Japanese/text-book-standard-2nd/">第1课</a>。</li>
<li><strong>こそあど</strong>+<strong>の</strong>：Pre-noun adjectival.用于修饰名词。首次出现与新标日<a href="https://zxkjack123.github.io/Japanese/text-book-standard-2nd/">第2课</a>。</li>
<li><strong>こそあど</strong>+<strong>こ</strong>：指示场所的代词。首次出现于<a href="https://zxkjack123.github.io/Japanese/text-book-standard-3rd/">第3课</a><ul>
<li><strong>あそこ</strong>,与<strong>あ</strong>相连时是<strong>あそこ</strong>而不是<strong>あこ</strong></li>
</ul>
</li>
<li><strong>こそあど</strong>+<strong>ちら</strong>：指示方向的代词，同时也是<strong>こそあど</strong>+<strong>こ</strong>的礼貌说法。首次出现于<a href="https://zxkjack123.github.io/Japanese/text-book-standard-3rd/">第3课</a></li>
</ul>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-list/">笔记列表</a></li>
</ul>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>こそあど</tag>
      </tags>
  </entry>
  <entry>
    <title>动词て形用法整理</title>
    <url>/2019/05/16/Japanese/te/</url>
    <content><![CDATA[<p>新标日<a href="https://zxkjack123.github.io/Japanese/text-book-standard-14th/">第14课</a>首次出现了动词的て形。动词て形可以用于各种各样的表达方式。下面对て形的用法进行汇总：</p>
<ul>
<li>动<strong>て</strong> 动：[相继发生1]。 表述两个以上的动作依照时间顺序相继发生时，可以使用「动词<strong>て</strong>形+动词」的形式来表示。语法解释见新标日第14课。<ul>
<li>〔例」：昨日デパートへ<strong>行って</strong>、買い物しました。</li>
</ul>
</li>
<li>动<strong>てから</strong> 动: [相继发生2]。表述两个以上的动作依照时间顺序相继发生时，也可以使用「动词<strong>て</strong>形+<strong>から</strong>+动词」的表达方式。其语义和「动词<strong>て</strong>形+动词」基本相同，但<strong>てから</strong>不能在一个句子中反复使用两次以上。另外更加强调时间顺序不可调换。<ul>
<li>「例」：李さんは毎晩ラジオを<strong>聞いてから</strong>寝ます。</li>
</ul>
</li>
<li>动<strong>て</strong> <strong>ください</strong>: 请求某人做某事时使用「动词<strong>て</strong>形+<strong>ください</strong>」。<ul>
<li>「例」： ここに住所と名前を<strong>書いて</strong>ください。</li>
</ul>
</li>
<li>动<strong>て　います</strong>：<ul>
<li>[正在进行]: 表示动作或变化正在进行时，使用「动词<strong>て</strong>形+<strong>います</strong>」。首次出现于第14课。<ul>
<li>〔例」：小野さんは今新聞を<strong>読んでいます</strong>。</li>
</ul>
</li>
<li>[结果状态]: 表示动作结束后的结果状态。首次出现于第15课。<ul>
<li>〔例」：森さんは車を持っています。 </li>
</ul>
</li>
</ul>
</li>
<li>动<strong>ても　いいです</strong>：表示许可时，使用「动词<strong>て</strong>形+<strong>も</strong>+<strong>いいです</strong>。 <ul>
<li>〔例」：家で仕事を<strong>してもいいです</strong>。</li>
</ul>
</li>
<li>动<strong>ては いけません</strong>：表示禁止时，使用「动词<strong>て</strong>形+<strong>は</strong>+<strong>いけません</strong>」。<ul>
<li>〔例」：飛行機の中でタバコを<strong>吸ってはいけません</strong>。 </li>
</ul>
</li>
</ul>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-list/">笔记列表</a></li>
</ul>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>て形</tag>
      </tags>
  </entry>
  <entry>
    <title>日语时间表达整理</title>
    <url>/2019/05/16/Japanese/time/</url>
    <content><![CDATA[<p>描述事物时，时间，地点，人物，事件是非常基本的要素。时间也表达是日常生活中重要的一部分。因此掌握时间的表达对语言的掌握是非常重要且必要的。日常生活涉及到时间的表达主要有：</p>
<ul>
<li>时间单位</li>
<li>时刻：几点几分</li>
<li>时间起止：开始时间，结束时间，持续时间</li>
<li>星期</li>
<li>日期</li>
<li>一天内的早，中，晚</li>
<li>相邻时间表达(上<del>，下</del>，前<del>，明</del>等）</li>
<li>频率，每~</li>
</ul>
<h3 id="时间单位"><a href="#时间单位" class="headerlink" title="时间单位"></a>时间单位</h3><p>我目前学到的时间单位有:<strong>分</strong>、<strong>時</strong>、<strong>日</strong>、<strong>週</strong>、<strong>月</strong>、<strong>年</strong>。这些时间单位根据场景的不同，既可以用来表示时间点，也可以用来表示相应的一段时间。</p>
<h3 id="时刻"><a href="#时刻" class="headerlink" title="时刻"></a>时刻</h3><p>时刻，也就是常说的几点几分这类表达。</p>
<ul>
<li>询问时刻：今<strong>何時</strong>ですか。</li>
<li>回答时刻：今<del><strong>時</strong></del><strong>分</strong>です。</li>
</ul>
<h3 id="时间起止"><a href="#时间起止" class="headerlink" title="时间起止"></a>时间起止</h3><p>时间起止即什么时候开始，什么时候结束，从什么时候到什么时候这些问题。</p>
<ul>
<li>开始时间：~<strong>から</strong></li>
<li>结束时间：~<strong>まで</strong></li>
<li>起止时间：<del><strong>から</strong></del><strong>まで</strong></li>
</ul>
<h3 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h3><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-list/">笔记列表</a></li>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-standard-5th/"><strong>时刻</strong>的表达首次出现的第5课</a></li>
<li><a href="https://zxkjack123.github.io/Japanese/text-book-standard-5th/"><strong>时间起止</strong>的表达首次出现的第5课</a></li>
</ul>
<p>つづく</p>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>时间</tag>
        <tag>時間</tag>
      </tags>
  </entry>
  <entry>
    <title>日语动词变形学习</title>
    <url>/2019/05/16/Japanese/verb-conjugation/</url>
    <content><![CDATA[<p>因为很喜欢日语动漫，所以我现在在学习日语。网上找了一些日语入门的攻略，觉得这篇[大神的日语学习方法，10天入门，2个月达到N3水平，7个月突破N1，颠覆了我学习语言的思维](你有什么相见恨晚的日语学习方法？ - Hayami的回答 - 知乎<br><a href="https://www.zhihu.com/question/26939890/answer/36393970)%E5%86%99%E7%9A%84%E5%BE%88%E5%A5%BD%EF%BC%8C%E6%88%91%E9%9D%9E%E5%B8%B8%E8%AE%A4%E5%90%8C%E9%87%8C%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82%E5%9B%A0%E6%AD%A4%E6%88%91%E4%B9%9F%E6%AD%A3%E5%9C%A8%E6%8C%89%E7%85%A7%E8%BF%99%E4%B8%AA%E6%94%BB%E7%95%A5%E8%BF%9B%E8%A1%8C%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%AD%A3%E5%AD%A6%E4%B9%A0%E5%88%B0%E6%96%B0%E7%BC%96%E6%97%A5%E8%AF%AD%E5%88%9D%E7%BA%A7%E4%B8%8B%E5%86%8C%E3%80%82%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%87%8D%E7%82%B9%E6%98%AF%E6%8E%8C%E6%8F%A1%E6%97%A5%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E5%8F%98%E5%BD%A2%E3%80%82">https://www.zhihu.com/question/26939890/answer/36393970)写的很好，我非常认同里面的内容。因此我也正在按照这个攻略进行入门阶段的学习，现在正学习到新编日语初级下册。学习的重点是掌握日语动词的变形。</a></p>
<p>这两天刚刚学习到动词的使役被动态，算是基本接触到了日语动词所有的变形了。在巩固学习日语动词变形的过程中，又发现了一些其他的很好的资源。</p>
<ol>
<li><p>日语老师宵寒在其知乎日语学习专栏中发表的文章<a href="https://zhuanlan.zhihu.com/p/23853643">巴拉拉变身！！！史上最全日语动词变形大汇总</a>中总结了日语的各种变形的规律。<br><img src="verb-conjugation/verb-conjugation-all.jpg" alt="日语变形树形图"></p>
</li>
<li><p>李特务在知乎的[回答](你有什么相见恨晚的日语学习方法？ - 李特务的回答 - 知乎<br><a href="https://www.zhihu.com/question/26939890/answer/34763273)%E4%B8%AD%E7%BB%99%E5%87%BA%E7%9A%84%E4%B8%80%E5%BC%A0%E5%8A%A8%E8%AF%8D%E6%88%96%E7%94%A8%E7%BB%83%E4%B9%A0%E8%A1%A8%E6%A0%BC%EF%BC%9A![%E5%8A%A8%E8%AF%8D%E6%B4%BB%E7%94%A8%E7%BB%83%E4%B9%A0%E8%A1%A8%E6%A0%BC](verb-conjugation/verb-conjugation-table.jpg)">https://www.zhihu.com/question/26939890/answer/34763273)中给出的一张动词或用练习表格：![动词活用练习表格](verb-conjugation/verb-conjugation-table.jpg)</a></p>
</li>
</ol>
<p>我之前也想按照表格的形式来练习日语动词变形，但是发现这样有一些缺点：</p>
<ol>
<li>表格的连续性导致，在一列中不需要怎么动脑，按五十音图朝下读就出来了，动词变形效果不佳</li>
<li>检查答案不方便，自己错了都不容易发现</li>
<li>练习到的动词有限。对表上的这些动词的确是非常熟悉了，但是碰到不在表格内的动词就比较慌。最不好的是，碰到表格外的动词，变形前居然会先联想到对应的表格内的动词，用表格内动词的变形规律，再去对应到表格外动词的变形。这无疑大大降低了变形的速度</li>
<li>动词的联系频率不变。对自己常出错的单词和变形形式应该通过增加联系次数来巩固，而对于已经掌握的动词变形形式，就应该降低练习次数。使用表格练习法，显然无法做到动态的调整动词变形练习次数。</li>
</ol>
<p>因此，我自己写了一个练习动词变形的<a href="https://github.com/zxkjack123/JapaneseVerbPractice">小软件</a>。<br>这个小软件实现的功能是：随机生成一些动词练习的题目，由练习者输入答案，并反馈和记录练习结果。<br>小软件具备以下特性：</p>
<ol>
<li>可以自己定义想练习的动词。比如只练习新标日初级上的动词</li>
<li>可以自己定义想联系的变形形式。比如只练习ます形，て形和た形。（在Japanese_verb_form.jvp中指定即可)</li>
<li>错误的及时反馈。你输错答案的话，它立马告诉你你错了，并会告诉你正确答案。</li>
<li>动态调整动词变形练习频率。对于你犯错的动词变形，它在以后出现的概率会大大增加。对于你出错的动词变形，它在以后出现的频率会降低。</li>
</ol>
<p>在练习动词变形的时候，我经常把可能态和假定形搞混，被动和使役搞混。因此我觉得有必要再找找方法让这些变形规律更好记忆一些。先总结一个动词变形涉及到的表格(て形和た形规律不同）：</p>
<table>
<thead>
<tr>
<th align="center">あ</th>
<th align="center">い</th>
<th align="center">う</th>
<th align="center">え</th>
<th align="center">お</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ない形</td>
<td align="center">ます形</td>
<td align="center">字典形</td>
<td align="center">命令形</td>
<td align="center">意志形</td>
</tr>
<tr>
<td align="center">被动态</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">假定形</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">使役态</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">可能态</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">使役被动态</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>verb</tag>
        <tag>动词</tag>
        <tag>動詞</tag>
        <tag>conjugation</tag>
        <tag>变形</tag>
        <tag>活用</tag>
      </tags>
  </entry>
  <entry>
    <title>日语词汇的修饰方法</title>
    <url>/2019/05/16/Japanese/words_modifier/</url>
    <content><![CDATA[<p>最近开始学习《标准日本语》初级下册。在学习第25课《これは明日会議で使う資料です》的时候，语法解释部分总结了动词，动词小句后接名词的用法关系。我发现动词小句修饰名词时，结尾的动词形式和普通动词修饰名词一样。同样，一类形容词结尾的小句其形容词形式跟普通一类形容词修饰名词一样；二类形容词及名词同理。就是说，小句的句法使用形式和小句的结尾词的形式一样即可。</p>
<p>那么，掌握最小单位的修饰形式就可以了。具体形式包括：</p>
<ol>
<li>动词修饰名词：<strong>动(简体形)</strong>+<strong>名</strong></li>
<li>一类形修饰名词：<strong>一类形</strong>+<strong>名</strong></li>
<li>二类形修饰名词：<strong>二类形</strong>+<strong>な</strong>+<strong>名</strong></li>
<li>名词修饰名词：<strong>名</strong>+<strong>の</strong>+<strong>名</strong></li>
</ol>
<p>同理，不同类型的词汇后面连接动词时，也有相应的比较固定的形式。我现在的学习程度还太浅，不知道这种形式能否算作<strong>修饰</strong>动词，为了避免错误，这里只称之为<strong>后接</strong>动词。形容词和名词后不能直接接动词，需要转化为副词来后接动词。具体形式包括：</p>
<ol>
<li>动词转化为副词后接动词：不知道有没有这个，为了形式对称，先占个位置</li>
<li>一类形转化为副词后接动词：<strong>一类形词尾い变く</strong>+<strong>动</strong></li>
<li>二类形转化为副词后接名词：<strong>二类形</strong>+<strong>に</strong>+<strong>动</strong></li>
<li>名词转化为副词后接名词：<strong>名</strong>+<strong>に</strong>+<strong>动</strong></li>
</ol>
<p>第18课的课文提供了非常好的例子：</p>
<ol>
<li>携帯電話は　とても　<strong>小さく</strong>　なりました。　(一类形变副词后接动词）</li>
<li>テレビの　音を　<strong>大きく</strong>　します。 (一类形变副词后接动词)</li>
<li>息子は　<strong>医者に</strong>　なりました。 (名词变副词后接动词)</li>
<li>部屋を　<strong>きれいに</strong>　して　ください。　(二类形容词变副词后接动词)</li>
</ol>
<p>暂时没有发现名词用来修饰形容词的案例，也没有发现动词修饰形容词，名词或动词的案例。不清楚是否是因为我学到的内容还太少，暂时不做总结，待以后完善。</p>
]]></content>
      <categories>
        <category>Japanese</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
        <tag>日语</tag>
        <tag>日本語</tag>
        <tag>modifier</tag>
        <tag>修饰语</tag>
      </tags>
  </entry>
  <entry>
    <title>Cython调用C++函数例子</title>
    <url>/2019/05/16/cython/cython-hello-world/</url>
    <content><![CDATA[<p>最近的的科研工作涉及到Cython的应用。以前没有接触过Cython,对这个基本不了解。如果不涉及到代码接口的改变，那么我可以学习前辈们的代码，照葫芦画瓢来改代码。可是那样的代码不够简介美观，Pull Request的Reviewer指出代码接口需要调整简化。</p>
<p>没办法，只能硬着头皮改。然而前辈们的代码中没有找到合适的参照，自己假象着改几下结果错误越來越多。不能像无头苍蝇一样改了，必须得学会Cython的基础使用方法。</p>
<p>我需要实现的功能是：有一个C++的程序，写一个Cython的接口，在python中调用C++中的函数。参考相关的<a href="http://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#create-cython-wrapper-class">官方文档</a>，这是一个简单的几何方面的库。按照官方文档走，结果还是走了不少弯路，有写东西官方文档上也没有写的很详细。</p>
<p>下面就将我学习这个例子的过程及需要注意的细节总结一下。</p>
<h2 id="C-代码部分"><a href="#C-代码部分" class="headerlink" title="C++代码部分"></a>C++代码部分</h2><h3 id="h文件"><a href="#h文件" class="headerlink" title="h文件"></a>h文件</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> shapes &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> x0, y0, x1, y1;</span><br><span class="line">        Rectangle();</span><br><span class="line">        Rectangle(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1);</span><br><span class="line">        ~Rectangle();</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">width</span>, <span class="keyword">int</span>* <span class="built_in">height</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cpp文件"><a href="#cpp文件" class="headerlink" title="cpp文件"></a>cpp文件</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Rectangle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> shapes &#123;</span><br><span class="line"></span><br><span class="line">  Rectangle::Rectangle() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Rectangle::Rectangle(<span class="keyword">int</span> X0, <span class="keyword">int</span> Y0, <span class="keyword">int</span> X1, <span class="keyword">int</span> Y1) &#123;</span><br><span class="line">        x0 = X0;</span><br><span class="line">        y0 = Y0;</span><br><span class="line">        x1 = X1;</span><br><span class="line">        y1 = Y1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Rectangle::~Rectangle() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Rectangle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x1 - x0) * (y1 - y0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rectangle::getSize</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">width</span>, <span class="keyword">int</span> *<span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">        (*<span class="built_in">width</span>) = x1 - x0;</span><br><span class="line">        (*<span class="built_in">height</span>) = y1 - y0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rectangle::move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        x0 += dx;</span><br><span class="line">        y0 += dy;</span><br><span class="line">        x1 += dx;</span><br><span class="line">        y1 += dy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pyx文件"><a href="#pyx文件" class="headerlink" title="pyx文件"></a>pyx文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;Rectangle.h&quot;</span> namespace <span class="string">&quot;shapes&quot;</span>:</span><br><span class="line">    cdef cppclass Rectangle:</span><br><span class="line">        Rectangle() <span class="keyword">except</span> +</span><br><span class="line">        Rectangle(int, int, int, int) <span class="keyword">except</span> +</span><br><span class="line">        int x0, y0, x1, y1</span><br><span class="line">        int getArea()</span><br><span class="line">        void getSize(int* width, int* height)</span><br><span class="line">        void move(int, int)</span><br><span class="line"></span><br><span class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">PyRectangle</span>:</span></span><br><span class="line">    cdef Rectangle c_rect      <span class="comment"># hold a C++ instance which we&#x27;re wrapping</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span>(<span class="params">self, int x0, int y0, int x1, int y1</span>):</span></span><br><span class="line">        self.c_rect = Rectangle(x0, y0, x1, y1)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.c_rect.getArea()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        cdef int width, height</span><br><span class="line">        self.c_rect.getSize(&amp;width, &amp;height)</span><br><span class="line">        <span class="keyword">return</span> width, height</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, dx, dy</span>):</span></span><br><span class="line">        self.c_rect.move(dx, dy)</span><br></pre></td></tr></table></figure>

<h2 id="setup-py文件"><a href="#setup-py文件" class="headerlink" title="setup.py文件"></a>setup.py文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(ext_modules = cythonize(</span><br><span class="line">           <span class="string">&quot;rect.pyx&quot;</span>,                 <span class="comment"># our Cython source</span></span><br><span class="line">           sources=[<span class="string">&quot;Rectangle.cpp&quot;</span>],  <span class="comment"># additional source file(s)</span></span><br><span class="line">           language=<span class="string">&quot;c++&quot;</span>,             <span class="comment"># generate C++ code</span></span><br><span class="line">      ))</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>前面的文件内容在官方文档上写的还算清楚，但编译和使用部分，官方文档写的就很不清楚了。尤其是官方文档这里没有介绍编译cpp文件，只说不链接这个东西会出现undefine symbol的错误。这部分内容参考了<a href="https://stackoverflow.com/questions/28366147/how-can-i-manually-compile-cython-code-that-uses-c">这里</a>。</p>
<h3 id="编译C-文件"><a href="#编译C-文件" class="headerlink" title="编译C++文件"></a>编译C++文件</h3><p>编译C++文件生成.o文件，C++ Objects在这个文件里面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -c Rectangle.cpp</span><br></pre></td></tr></table></figure>

<h3 id="运行setup"><a href="#运行setup" class="headerlink" title="运行setup"></a>运行setup</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure>
<p>这一步会生成<strong>rect.so</strong>，但是这个文件暂时还不能使用，在python中import rect的话会出现<strong>ImportError: ./rect.so: undefined symbol</strong>错误。</p>
<h3 id="链接rect-so与Rectangle-o"><a href="#链接rect-so与Rectangle-o" class="headerlink" title="链接rect.so与Rectangle.o"></a>链接rect.so与Rectangle.o</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -shared -fPIC -I/usr/include/python2.7 rect.cpp Rectangle.o -lstdc++ -o rect.so</span><br></pre></td></tr></table></figure>

<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>下一个脚本<strong>run.py</strong>，放入如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rect</span><br><span class="line">print(rect.PyRectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>).get_area())</span><br></pre></td></tr></table></figure>
<p>运行该脚本，如果流程正确，应该会得到输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="总结反思"><a href="#总结反思" class="headerlink" title="总结反思"></a>总结反思</h2><p>通过这个例子，不难看出：</p>
<ol>
<li>Cython连接C++的函数是是通过Python类的函数-&gt;cppclass-&gt;C++函数实现的。</li>
<li>Python类的函数名称不一定要和C++函数名称一直，只要接口定义好到底调用哪个函数就行。</li>
<li>Python类的函数数目也不一定要和C++函数一致，只需要保证Python想调用的C++函数已经定义且能够找到就行。</li>
</ol>
]]></content>
      <categories>
        <category>Cython</category>
      </categories>
      <tags>
        <tag>Cython</tag>
        <tag>Hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>Cython返回Python类对象</title>
    <url>/2019/05/16/cython/cython-return-object/</url>
    <content><![CDATA[<p>在之前的一篇博客<a href="https://zxkjack123.github.io/cython/cython-hello-world/">Cython调用C++函数例子</a>中，我参照Cython文档练习了用Python通过Cython调用C++库中的函数的例子。不过这个例子中，只有一个C++类，而且所有返回对象都是系统预定义的<strong>int</strong>,<strong>void</strong>之类的。</p>
<p>然而我的目标是<strong>返回一个可以调用C++类函数的Python类对象。而且是在类A中生成一个类B的对象返回。</strong></p>
<p>摸索一番后，我终于学会了实现这个功能的方法。<br>下面是把<a href="http://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#create-cython-wrapper-class">官方文档</a>的例子简单扩展一下用来联系的例题。</p>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><h3 id="h文件"><a href="#h文件" class="headerlink" title="h文件"></a>h文件</h3><p>在官方文档的基础上，添加了一个Triangle类。另外把所有的int类型变量换成了double类型。<br>Rectangle.h:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> shapes &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">double</span> x0, y0, x1, y1, x2, y2;</span><br><span class="line">        Triangle();</span><br><span class="line">        Triangle(<span class="keyword">double</span> x0, <span class="keyword">double</span> y0, <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2);</span><br><span class="line">        ~Triangle();</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">double</span> x0, y0, x1, y1;</span><br><span class="line">        Rectangle();</span><br><span class="line">        Rectangle(<span class="keyword">double</span> x0, <span class="keyword">double</span> y0, <span class="keyword">double</span> x1, <span class="keyword">double</span> y1);</span><br><span class="line">        ~Rectangle();</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(<span class="keyword">double</span>* <span class="built_in">width</span>, <span class="keyword">double</span>* <span class="built_in">height</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> dx, <span class="keyword">double</span> dy)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cpp文件"><a href="#cpp文件" class="headerlink" title="cpp文件"></a>cpp文件</h3><p>Rectangle.cpp:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Rectangle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> shapes &#123;</span><br><span class="line"></span><br><span class="line">  Rectangle::Rectangle() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Rectangle::Rectangle(<span class="keyword">double</span> X0, <span class="keyword">double</span> Y0, <span class="keyword">double</span> X1, <span class="keyword">double</span> Y1) &#123;</span><br><span class="line">        x0 = X0;</span><br><span class="line">        y0 = Y0;</span><br><span class="line">        x1 = X1;</span><br><span class="line">        y1 = Y1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Rectangle::~Rectangle() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Rectangle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x1 - x0) * (y1 - y0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rectangle::getSize</span><span class="params">(<span class="keyword">double</span> *<span class="built_in">width</span>, <span class="keyword">double</span> *<span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">        (*<span class="built_in">width</span>) = x1 - x0;</span><br><span class="line">        (*<span class="built_in">height</span>) = y1 - y0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rectangle::move</span><span class="params">(<span class="keyword">double</span> dx, <span class="keyword">double</span> dy)</span> </span>&#123;</span><br><span class="line">        x0 += dx;</span><br><span class="line">        y0 += dy;</span><br><span class="line">        x1 += dx;</span><br><span class="line">        y1 += dy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Triangle::Triangle()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Triangle::Triangle(<span class="keyword">double</span> x0, <span class="keyword">double</span> y0, <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x0 = x0;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y0 = y0;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x1 = x1;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y1 = y1;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x2 = x2;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y2 = y2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Triangle::~Triangle() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Triangle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="number">0.5</span>*((x1-x0)*(y2-y0) - (x2-x0)*(y1-y0)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pyx文件"><a href="#pyx文件" class="headerlink" title="pyx文件"></a>pyx文件</h2><p>rect.pyx:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;Rectangle.h&quot;</span> namespace <span class="string">&quot;shapes&quot;</span>:</span><br><span class="line">    cdef cppclass Triangle:</span><br><span class="line">        Triangle() <span class="keyword">except</span> +</span><br><span class="line">        Triangle(double, double, double, double, double, double) <span class="keyword">except</span> +</span><br><span class="line">        double x0, y0, x1, y1, x2, y2</span><br><span class="line">        double getArea()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cdef cppclass Rectangle:</span><br><span class="line">        Rectangle() <span class="keyword">except</span> +</span><br><span class="line">        Rectangle(double, double, double, double) <span class="keyword">except</span> +</span><br><span class="line">        double x0, y0, x1, y1</span><br><span class="line">        double getArea()</span><br><span class="line">        void getSize(double* width, double* height)</span><br><span class="line">        void move(double, double)</span><br><span class="line">        Triangle get_lower_triangle()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">PyTriangle</span>:</span></span><br><span class="line">    cdef Triangle c_tri</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span>(<span class="params">self, double x0, double y0, double x1, double y1, double x2, double y2</span>):</span></span><br><span class="line">        self.c_tri = Triangle(x0, y0, x1, y1, x2, y2)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.c_tri.getArea()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">PyRectangle</span>:</span></span><br><span class="line">    cdef Rectangle c_rect      <span class="comment"># hold a C++ instance which we&#x27;re wrapping</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span>(<span class="params">self, double x0, double y0, double x1, double y1</span>):</span></span><br><span class="line">        self.c_rect = Rectangle(x0, y0, x1, y1)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.c_rect.getArea()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        cdef double width, height</span><br><span class="line">        self.c_rect.getSize(&amp;width, &amp;height)</span><br><span class="line">        <span class="keyword">return</span> width, height</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, dx, dy</span>):</span></span><br><span class="line">        self.c_rect.move(dx, dy)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_lower_triangle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> PyTriangle(self.c_rect.x0, self.c_rect.y0,</span><br><span class="line">                          self.c_rect.x1, self.c_rect.y0,</span><br><span class="line">                          self.c_rect.x1, self.c_rect.y1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rect.pyx文件改动比较大。除了增加了PyTriangle类之外，还在PyRectangle类中中加了一个函数**get_lower_triangle(self)**，这个函数是原本C++类中没有的。从这一点可以更直观的理解我通过前一个例子体会到的三点收获：</p>
<ol>
<li>Cython连接C++的函数是是通过Python类的函数-&gt;cppclass-&gt;C++函数实现的。</li>
<li>Python类的函数名称不一定要和C++函数名称一直，只要接口定义好到底调用哪个函数就行。</li>
<li>Python类的函数数目也不一定要和C++函数一致，只需要保证Python想调用的C++函数已经定义且能够找到就行。</li>
</ol>
<h2 id="setup-py文件"><a href="#setup-py文件" class="headerlink" title="setup.py文件"></a>setup.py文件</h2><p>setup.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(ext_modules = cythonize(</span><br><span class="line">           <span class="string">&quot;rect.pyx&quot;</span>,                 <span class="comment"># our Cython source</span></span><br><span class="line">           sources=[<span class="string">&quot;Rectangle.cpp&quot;</span>],  <span class="comment"># additional source file(s)</span></span><br><span class="line">           language=<span class="string">&quot;c++&quot;</span>,             <span class="comment"># generate C++ code</span></span><br><span class="line">      ))</span><br></pre></td></tr></table></figure>
<p>这个文件的内容没有发生变化。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译方法和<a href="https://zxkjack123.github.io/cython/cython-hello-world/">Cython调用C++函数例子</a>中一样。</p>
<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>修改<strong>run.py</strong>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rect</span><br><span class="line"><span class="comment">#print(rect.PyRectangle(0, 0, 1, 2).get_area())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(rect.PyTriangle(0, 0, 0, 1, 1, 0).get_area())</span></span><br><span class="line"></span><br><span class="line">rect1 = rect.PyRectangle(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line">tri1 = rect1.get_lower_triangle()</span><br><span class="line">print(type(tri1))</span><br><span class="line">print(tri1.get_area())</span><br></pre></td></tr></table></figure>
<p>运行后输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type &#39;rect.PyTriangle&#39;&gt;</span><br><span class="line">1.0</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我想返回的是Python中用的类的对象，不需要在C++类中也写一个一样的函数然后再转换。</p>
]]></content>
      <categories>
        <category>Cython</category>
      </categories>
      <tags>
        <tag>Cython</tag>
        <tag>Object</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>跳槽是最好的涨薪方式？</title>
    <url>/2019/05/16/career/get-higher-salary/</url>
    <content><![CDATA[<p>最近几年经常听说在一个企业干了几年的老员工工资还不如新入职的员工。Sean Ye在他的知乎专栏<a href="https://zhuanlan.zhihu.com/p/32894248">年终涨薪的水，到底有多深</a>中将了这种现象形成的原因，也将到了对于那些认为自己应该获得更高工资的人的一个策略：跳槽。去外部寻求更好的机会，让自己获得市场价的工资。</p>
<p>我个人非常认同Sean Ye的观点。我本身就比较喜欢每隔一段时间换一个地方，而这也正好能够满足涨薪的需求。</p>
<p>但同时也还有一个担忧：跳槽对于涨薪的确是良方，但对于升职和长久的职业发展是否有利？这个还需要我进行多方面的思考。</p>
<p>感谢<a href="https://www.zhihu.com/people/sean-yenan/activities">Sean Ye</a>的专栏。下面是Sean Ye的专栏和公众号信息：<br><img src="https://pic2.zhimg.com/80/v2-6638ae55d17d9680b3a6cba9e6dbebd5_hd.jpg" alt="Sean Ye"></p>
]]></content>
      <categories>
        <category>career</category>
      </categories>
      <tags>
        <tag>salary increase</tag>
        <tag>涨薪</tag>
        <tag>change jobs</tag>
        <tag>跳槽</tag>
      </tags>
  </entry>
  <entry>
    <title>密尔沃基一日游</title>
    <url>/2018/03/12/life/Milwaukee-tour-20180311/</url>
    <content><![CDATA[<p>2018年3月11日，我和几个朋友(鲁勇师兄夫妇和韦林)一起去了密尔沃基玩耍。我们首先去了哈雷戴维森摩托博物馆，然后去参加了一趟啤酒厂之旅，最后到密西根湖边的现代艺术博物馆玩耍。</p>
<p>一路上道路平直，略有起伏，视野非常开阔，自然风光很好。虽然是初春，路上的草木还没有发芽，但依然可以从两边的丛林里展望到夏天郁郁葱葱的景色。</p>
<p>第一站是哈雷戴维森摩托博物馆。这个博物馆里陈列了从1904年开始的各种型号的摩托。比如1909年产的<strong>自行车</strong>+<strong>发动机</strong>组合而成的摩托：</p>
<center>
<img src="/life/Milwaukee-tour-20180311/Fancy_motor_1.jpg" width="500">
<br>
</center>

<p>不过这里给我留下最深印象的还是产于19世纪40年代初期左右的一款军用摩托。它的最大特点是三轮，侧边有一个可以载人的小车厢。这种摩托我小时候在抗日电视剧里面经常见到。</p>
<center>
<img src="/life/Milwaukee-tour-20180311/Fancy_motor_4.jpg" width="500">
<br>
</center>

<p>当然，这里也有其他二十一世纪初生产的花里胡哨的摩托：</p>
<center>
<img src="/life/Milwaukee-tour-20180311/Fancy_motor_2.jpg" width="500">
<br>
<img src="/life/Milwaukee-tour-20180311/Fancy_motor_3.jpg" width="500">
<br>
</center>

<p>哈雷戴维森摩托的发展历史一步一个脚印的展现出来，令人印象深刻。然而，现在在街上已经基本看不到摩托的身影了。在麦迪逊，路上绝大部分人都是开车而不是骑摩托。</p>
<p>逛的其他地方亮点不多，不提。放几张图意思一下：</p>
<center>
<img src="/life/Milwaukee-tour-20180311/Beside_lake.jpg" width="500">
东临碣石
<br>
<img src="/life/Milwaukee-tour-20180311/Drag_anchor.jpg" width="500">
力拔锚兮气盖世
<br>
<img src="/life/Milwaukee-tour-20180311/Four_group.jpg" width="500">
一日游F4
</center>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>生活</tag>
        <tag>密尔沃基</tag>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>颓废的我</title>
    <url>/2018/08/16/life/about-depression/</url>
    <content><![CDATA[<p>有一段时间没有更新博客了，因为最近的情绪一直比较低落。对什么都提不起兴趣，什么都不想干，然而什么都不干又会让自己更加烦躁，这一个多月的我简直就是在虚度光阴。</p>
<p>虽然我是和另一个中国人合租的公寓，但平常交流并不多，基本只有每周末一起去买菜的时候会有一些交流。绝大部分时间，我都是一个人呆着。适应了这里的生活节奏之后，我的生活反而越来越单调，越来越枯燥无味。在尝试过不同的食物之后，食物的选择范围也组建缩小。这边的美食本来就不多，很多食物也不对我的胃口。渐渐的，我发现我现在每周吃的食物基本都是一个模式的。蔬菜就那么几种，对肉类也基本失去兴趣，也就虾和鱼还算合胃口。</p>
<p>更让我无奈的是，我发现自己一旦吃辣的食物之后，左眼的就会疼。我的左眼在还在国内的时候，就长过两颗比较大的麦粒肿，那时候刚好是比较忙的时间，就没怎么重视。等到疼的难受的时候才去看医生，那时候已经比较大了，必须手术处理。当时虽然治疗好了，但好像左眼的麦粒肿并没有除根。稍微吃的辣的东西之后，原来一颗麦粒肿的位置就会红肿发疼。这让原本比较喜欢吃辣的我很苦恼。</p>
<p>生活和科研方面的压力，让我的情绪时不时的低落，特别是这里放了暑假，自己好像一下子松懈下来。暑假刚开始，没忍住又吃了辣椒，嘴上倒是爽了，可眼睛当天万岁就疼起来了，索性放松一段时间。</p>
<p>这段时间也的确是什么都不想做，每天宅在房间里，看看番剧，读读网络小说度过时光。除此之外，除了每天跟女朋友视频聊天以外，其他什么都没有管，脑袋里面再没有其他事情。</p>
<p>然而，我的情绪并没有如想象那样因为一段时间的放松而恢复过来，反而在不知不觉中，我感觉自己慢慢便懒了，做事的动力慢慢减退，甚至是一些原本很喜欢的事情都开始渐渐提不起兴致来了。</p>
<p>手机里每天都有一些各种通知和广告短信进来，瞅一眼不是重要的东西，也就没有点开看，红红的数字提示一直在叠加。微信和QQ里面的很多群消息我也没有心思去点开看，任由它们叠加着。</p>
<p>我的生活也逐渐不规律了起来。起床越来越晚，早饭时间也随之推迟，之后直接不吃早饭了。到中午的时候饿的不行了，然后再随便弄点原本早餐的东西吃。原本晚饭都都是做两个菜，晚上吃一部分，然后第二天中午吃一部分。然而这个规律也慢慢改变着，渐渐的连饭都懒得做。有时吃煮的速冻饺子，有时直接用榨菜配饭吃。</p>
<p>生活逐渐不规律，运动也渐渐减少，原本一周锻炼三到四次，在这一个多月中频率逐渐降低，上周只锻炼了一次，这周一次都还没有锻炼。睡眠也不规律了，晚睡晚起，而且起的越來越晚。白天脑袋一直昏昏沉沉的，晚上的时候脑袋更是像一团浆糊一样，感觉脑袋是空的，什么东西都装不下。白天看的东西，到了晚上就感觉完全忘了，留不下什么印象。</p>
<p>状态越来越差，情绪低落，身体无力，脑袋空空。我也逐渐发现自己状态不好，科研进度迟缓，生活规律一塌糊涂。我思考着怎么去改变，但好像脑袋根本无法思考，一要思考什么东西的时候，就感觉自己的脑袋有一种压抑的疼痛，转不动。</p>
<p>时间一天天过去，我却什么正经事儿都没做。每天都会愧疚，自责自己又虚度了一天的光阴，更自责自己为何如此懦弱，为什么会这样莫名其妙的颓废。</p>
<p>然而最令我痛苦害怕的事，并不是虚度了一天的光阴，而是每天和女朋友视频的时候，都要努力假装自己过的很好。几周前，自己状态虽然也不好，但好歹也还不算太差。然而随着自己状态逐渐变差，每一次面对她的时候我都有种羞愧的感觉，她每天都在努力的学习，在进步着，而自己却如此颓废，不仅如此，还在不断掩饰自己，假装自己很好。我很羞愧，羞愧自己的状态，羞愧自己想改变却是那么无力，羞愧自己对她的隐瞒。我也很害怕，害怕自己陷入到这种状态无法自拔，也害怕自己的状态被她发现。害怕被她发现自己的颓废，我不自觉的减少了和她聊天的时间，把自己的脸隐藏在阴影里甚至是直接不面对屏幕来掩藏自己的表情。</p>
<p>明明每天都在颓废，我却没有正面面对，反而是不断把自己封闭起来，减少和外界的接触，犹如掩耳盗铃般假装好像什么都没有发生。每天蜷缩在一个小角落里面，对外界的一切熟视无睹，什么也不做，也假装外界什么也没有发生，甚至连女朋友的生日都被自己忽视了。</p>
<p>这种掩耳盗铃的颓废生活显然也掩饰不了多久，女朋友和周围的同学也发现了我的异常状态。他们的话语让我意识到，我的自我调整已经失败，我这种封闭自我式的自我调整不仅没有让自己回复状态，反而是在颓废的路上越走越远。</p>
<p>我不能再这样下去了，这段时间这种自欺欺人的生活，已经辜负了许多人对我的关心。而一直被自己掩盖的颓废，也必须要由我自己亲自揭开，对于我所辜负的人，我必须要做出补偿。</p>
<p>情绪与心理这些东西我懂得不多，我也不知道到底是什么原因让我逐渐陷入到现在这种颓废状态，但我知道，我现在的状态很不好。我现在应该已经处于心理疾病中，而我已无力自助，必须要依靠外界的力量来帮助我做出改变，我已经预约了明天去看心理医生，希望我能够尽快从现在的颓废中解脱出来。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>生活</tag>
        <tag>decadent</tag>
        <tag>颓废</tag>
      </tags>
  </entry>
  <entry>
    <title>第三次心理咨询有感</title>
    <url>/2018/07/10/life/counseling-3rd/</url>
    <content><![CDATA[<p>2018年7月，我来到美国学习已经9个月了。这段时间，经历了刚开始的适应，然后一阵兴奋探索期，之后组建平静，又经历了一段时间的焦虑迷茫与颓废，到现在慢慢走出回归平淡的日常。不同的时间段，对生活和科研的感受差别很大。我现在依然没有回到全盛的状态，还在慢慢调整。</p>
<p>7月9日的时候，与心理咨询师进行了第三次交流。与他的交流中，我意识到我现在从心理层面对科研并不是很喜欢，科研现在没有带给我兴奋感，科研对我来说是一种压力。在交流的过程中，我也发现我自己是那种需要依靠兴奋感来作为动力的人。或者说，对于我来说，来自兴奋感的动力比来自压力的动力效果要好很多。</p>
<p>而之前的一段时间，我一直尝试让自己重新喜欢上科研，从科研中获得更多的兴奋感。然而，尝试失败了。最近一段时间，我并没有重新喜欢上科研，每一次刚到办公室的时候，打开电脑，搞一会儿科研，然而还没有做出什么东西，就有那种无聊的感觉。这段时间，我沉迷在一本叫做《仙逆》的网络小说中，一直到近两周后把它看完。然后我的心才慢慢平静下来，现在到办公室可以做更多的科研工作而不厌烦了。</p>
<p>也是在这次心理咨询的过程中，我意识到我自己的一个规律：喜欢一个东西，从中获得兴奋感，然后便投入大量的时间到其中，一直到完成或者取得一定成果，然后再平淡下来，慢慢又喜欢另一个事物。这种兴奋感的周期并不是很长，大概从一两个月到半年不等。也的确如此，我以往好像也都是没有全身心投入到一件事情超过半年的记录。每过一段时间，我的状态就会发生变化，需要进行调整。</p>
<p>我之前试图让自己再度从科研中获得更多的兴奋感，不仅没有成功，反而让我对此产生了更大的抗拒。心理咨询师告诉我，这种事情是很正常的，我没有必要强迫自己喜欢上搞科研，有些事情可以一边讨厌它，一边去做它，即便讨厌它的时候做它效果肯定不会很好，但这是正常的，没有必要去强迫自己去改变。</p>
<p>另外，我生活中没有其他的事情让我产生兴奋感也是一个不太好的现象。我在美国生活，生活逐渐平淡之后，平时除了白天科研，晚上看动漫外，就没有其他想要做的事情了。我需要一种每天不会占用我大量时间，但能给我带来一定兴奋感的兴趣爱好，或者是探索其他新鲜事物调剂我的生活，如果这件事是对我有利的，那就更好了。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>生活</tag>
        <tag>第三次心理咨询</tag>
        <tag>兴奋感</tag>
      </tags>
  </entry>
  <entry>
    <title>我的需求层次与努力方向</title>
    <url>/2019/05/16/life/essential-skill/</url>
    <content><![CDATA[<p>以前上大学的时候，有上过职业规划之类的课，政治课上也有讨论过人生规划之类的问题，不过当时根本没有认真思考过这个问题，只想着老师快点下课。 </p>
<p>最近到国外访学中，每天有5个小时以上的时间是独处的，反而开始想这些问题。我想要一个怎么的人生，我该怎样去实现它？</p>
<p>经济基础决定上层建筑。我在社会上处在什么位置，现阶段我人生的主要矛盾是什么？我该怎么样更上一层？<a href="https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA">马斯洛需求层次理论</a>是一个常用来描述这个问题的理论。我觉得这个理论用在我身上也很合适。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/Maslows-hierarchy-of-needs-zh.svg/512px-Maslows-hierarchy-of-needs-zh.svg.png" alt="马斯洛需求层次理论"></p>
<p>我现在不需要为<strong>生理需求</strong>层面的食物，水，空气和睡眠而操心。我担心最多的是：</p>
<ol>
<li>毕业了找不到好工作，工资不高怎么办</li>
<li>买不起房子结不起婚怎么办</li>
<li>即便结婚了，养不起孩子怎么办</li>
</ol>
<p>这些担忧的核心，也可以归结为一个方面：<strong>能否找到一个工资较高，福利待遇好的工作</strong>。这个工作必须要能够提供比较高的薪水。如果这个工作能够同时兼顾社交需求，尊重需求和自我实现需求，就更好了。</p>
<p>对我而言，要找到这样的工作，必须要具备一些核心技能，增加自己的不可替代性。这些技能需要具备以下特征：</p>
<ol>
<li>能够增加自己的工作机会</li>
<li>能够持续发展，终身学习的技能</li>
<li>有门槛，上限高，水平不同是能够比较容易区分</li>
<li>我必须掌握的好。</li>
</ol>
<p>这些技能还要能够持续发展。我的专业是核能科学与工程，但平时主要做的是模拟计算和数据处理与分析。对于我而言，在核能领域或是数据分析领域是最合适的工作领域。应该至少把这两个作为核心技能，同时，其他我能想到的重要的技能也需要发展。</p>
<ol>
<li>核能专业的知识与技能；</li>
<li>数据分析的编程能力,重点发展：Python与C++；</li>
<li>语言能力，英语需要进一步提升，再学习一门日语。</li>
</ol>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>needs</tag>
        <tag>需求</tag>
        <tag>hierarchy</tag>
        <tag>层次</tag>
        <tag>核心技能</tag>
        <tag>essential skill</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移计划</title>
    <url>/2018/02/16/life/first-blog-move/</url>
    <content><![CDATA[<p>一直在寻找一种适合自己的博客写作方式，在<a href="https://zhuanlan.zhihu.com/p/22191919">知乎</a>上发现了这个方式，Hexo + github的写作方式。于是决定用这个来作为我以后的博客写作方式。</p>
<p>以前的博客是在网易博客上写的，东西也不多，就几篇内容，这个博客还可以<a href="http://zxkjack123.blog.163.com/#m=0&t=0">访问</a>，不过不打算更新了。选择更换的原因有：</p>
<ul>
<li><p>用了几次网易的博客，内容看着还行，但是登陆页面真的很渣，登陆自己的博客都很麻烦</p>
</li>
<li><p>没有办法做到离线提交，离线写博客</p>
</li>
<li><p>对公式之类的东西支持太差，和LaTeX内容兼容太差</p>
</li>
<li><p>在GitHub上搭建博客，远程异地同步很方便，我用GitHub也越来越多，很方便 </p>
</li>
</ul>
<p>特别是最近发现的了<a href="https://github.com/Moeditor/Moeditor">moeditor</a>这个神器，用这个来写Markdown的内容非常方便，体验极佳。</p>
<p>一直想要一种好看的，跨平台的，方便同步，对公式和图片支持比较好的博客写作方式。现在，我感觉我的平台已经有了，剩下的就是坚持用博客记录自己的生活和学习了。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Possible gift list</title>
    <url>/2019/03/16/life/gf-gift-list/</url>
    <content><![CDATA[<h3 id="Perfume"><a href="#Perfume" class="headerlink" title="Perfume"></a>Perfume</h3><ul>
<li>Jo malone, English pear and freesia. Record time: 20190415.</li>
</ul>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>gift</tag>
        <tag>girlfriend</tag>
      </tags>
  </entry>
  <entry>
    <title>第二次心理咨询有感</title>
    <url>/2018/06/26/life/regarding-life-as-a-game/</url>
    <content><![CDATA[<p>2018年6月25日上午，我进行了和Ben的第二次心理咨询。我再一次体会到了心理咨询的好处。一个人在外生活，心理比身体更容易出现问题。美国这里的生活环境，让自己有更多的独立空间的同时，也更容易引起自我封闭，思维陷入死胡同的状态。不识庐山真面目，只缘身在此山中，一个人在心理方面出现问题的时候，自己很难发现，而且即便察觉到自己的异常，恐怕也很难自己调整回来。</p>
<p>这一次的心理咨询，同样让我获益匪浅。我有一个一直存在的心理障碍，那就是会因为害怕不好的结果而不做或是不断推迟做某件事。比如某些自己必须要做的事，害怕自己做不好，害怕搞砸了，而不断推迟做这件事，结果到最后真的搞砸了。又比如做了不好的事或是搞砸了什么事，却不敢果断的去面对后果，虽然自己也知道迟早要面对。</p>
<p>这个心理障碍，最大的特点就是害怕，害怕去面对困难，害怕面对失败。它在生活中会有不同的表现形式：对于尚未发生的事情，这份害怕毫无疑问成为了自己拖延症的诱因之一；而对于已经发生的事情，则让自己总是试图掩盖自己的错误，掩耳盗铃的期望别人不要发现自己的错误。</p>
<p>如何正确处理自己内心的恐惧，是我这次和Ben交流的主题。第一次心理咨询的时候，Ben告诉我，生活中很多事情就是困难的。而这一次，他则告诉我，做一件事没有得到预期的结果，这很正常，人生也不会因为一件事的失败而搞砸。所谓的失败，就是事情的结果没有达到自己预期的目标。就像抛一枚硬币会有正面或者反面朝上一样。做一件事之前，心里总会有一个预期，达到什么样的结果就算是成功，达不到就是失败。</p>
<p>当我有很大把握把事情做成功的时候，我对自己有信心，也有勇气去做。然而，也有很多时候，事情很困难，我成功的把握很小。这个时候各种不良的反应就出现了，焦虑，害怕，拖延…… 然而这些不良反应只会让事情变得更加糟糕，搞砸的可能越來越大，陷入恶性循环。</p>
<p>寻常的小事，即便搞砸了也没有什么，甚至可以当作没有发生过。然而当这件事很重要的时候，比如科研工作，比如未来的买房问题，这些事情无法逃避，搞砸的后果也很严重。当我发现在这些比较做大的事情上成功的概率不高的时候，那份压力与焦虑，对失败后果的恐惧，压抑的感觉仿佛让自己喘不过气来。</p>
<p>怎样来面对这种情绪？Ben告诉我，失败并不可怕，即便失败了，人生也不会因此而完全搞砸。任何事情都有失败的风险，科研工作不可能每一个尝试都得到完美的结果。可以尝试把它们当作在游戏中探索新地图一样，有时候能够有所收获，但有时候探索一片区域后却是一无所获。这个时候，看似花费的时间却一无所获，但实际上还是有所收获的，至少探索过，知道这里有什么。</p>
<p>同时，我以前放大了失败的后果，失败固然可怕，但并不是说失败了，整个人生就完蛋了。其实那些失败后果其实并没有那么可怕，是我自己将它们放大到自己不敢面对的地步。</p>
<p>换一种心态来看到这些事情，我有一种豁然开朗的感觉，很多困难不再可怕，失败也不再可怕到无法面对。这种心态，这种思考的方式其实我以前也在别的地方读到过，以前也曾赞叹过这种观点，尝试过以游戏的观点来看待人生。然而，时间慢慢推移，我渐渐淡忘了这些，甚至自己再度害怕困难，害怕失败的时候都想不起来我曾经阅读过甚至尝试过的道理。当我的心理层面陷入困境的时候，我无法自己拯救自己，必须要依靠外界的帮助。由此看来，每隔一段时间进行一次心理咨询是非常有好处的。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>生活</tag>
        <tag>心理咨询</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么写博客？为什么放到GitHub？</title>
    <url>/2018/05/16/life/why-blog/</url>
    <content><![CDATA[<p>所有的记忆都会被时间冲淡，不论这件事情在当时是多么重要。</p>
<p>看过的书，里面的内容很快就忘了，只记得曾经看过某本书。思考过的事情，也只有在再次遇到类似的内容时才能想起自己曾经思考过，可是具体细节却已忘记。不记录下来，就会遗忘。</p>
<p>即便是记过的笔记，日后想翻看时，早已不知道放在哪里，更不论里面的内容。记录的东西如果没办法方便的查找和回顾，那也没有意义。</p>
<p>就连自己的过去，也会被自己忘记。</p>
<p>回忆自己小时候的样子，却只能想起零星的几件事情，而且对这些事情的记忆也回来越模糊。而且还有更可怕的事情，回忆以前，细节总是记不清的，然而总会下意识的“脑补”一些细节填充进去，一段时间后，我已无法分辨那些细节到底是否真实发生过。</p>
<p>另外，生活中我也时常会主动说一些谎言来掩护我当时的行为或言论。当有类似的情况需要撒谎时，为了保证谎言不被拆穿，我便会撒同样的慌，甚至杜撰出更多的细节来支撑这个谎言。以至于那个谎言已经几乎成为我过去的真实经历。</p>
<p>我已无法通过记忆来认识真实的自己了。因为真实的记忆被逐渐淡忘，下意识脑补出细节来补充，自己编纂出的谎言也混入记忆中。我的记忆慢慢的成为了我与外界交流的工具，可以用来和朋友吹逼，可以到知乎上分享故事，可以为自己的观点编造一些论据，也可以为自己的失败找一些理由。然而，它却没法再用来认识我自己。</p>
<p>我现在才二十来岁了，记忆仿佛已经不属于我自己。这让我感到害怕，有一种失去自我的感觉。我是怎样一步步发展成现在的我的？我想不起来的，而且越是思考这个问题，怕是又有更多的脑补细节填充到我的记忆中来了。我希望能有一个地方，能够记录下自己的轨迹，而且，即便被将来的我篡改了，也能留下清晰的痕迹。</p>
<p>用GitHub pages作为博客，可以记录下我每一个博客版本，正好满足我的需求。同时，这里也可以存放一些自己用得到的步骤比较复杂的东西的文档，是一个不错的博客工具。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>生活</tag>
        <tag>memory</tag>
        <tag>记忆</tag>
        <tag>past</tag>
        <tag>过去</tag>
      </tags>
  </entry>
  <entry>
    <title>关于倾听的一些想法</title>
    <url>/2018/05/16/life/why-listen/</url>
    <content><![CDATA[<p>以前为了想让自己的人际关系变得更好，交更多朋友，读过一些关于倾听的艺术的书。我学了一些倾听别人的皮毛技巧，比如不打断别人的话，不要去指导别人怎么做，不要用自己的经历去佐证或是反驳地方等等。我需要做的只是认认真真的聆听，做一个倾听者，做一些简单的反馈告诉地方我在认真的听就够了。</p>
<p>但我现在觉得单纯做一个倾听者并没有意义。因为每个人都只在乎自己的想法，只在乎自己的感受。我们希望别人理解自己，其实更多的是希望对方做出符合自己想法的事情，或者说至少尊重自己的想法，不去阻碍自己。</p>
<p>没有人真正在乎另一个人的内心想法，即便是恋人这种亲密关系也不一定。我生活中实际发生的故事验证了这一点。我现在独自一人在外学习，和女朋友异国。虽然每天都会在电话或视频里聊不少东西，但我依然感觉到孤独感。<br>今天我们聊到了这个话题，有了下面的对话：</p>
<p><em>我：我有这种孤独的感觉，自己一个人的时候会想各种东西，有时心里很乱，想找个人述说，但却没有人听。</em></p>
<p><em>女朋友：你可以跟我说啊，我愿意听。</em></p>
<p><em>我：可是我说我内心感受的时候，你时不时就打断我，或者指导我该怎么做，或者就着话题扯到别的事情上，根本没有让我说完话。</em></p>
<p><em>女朋友：好像是哦，对不起</em></p>
<p><em>我：哎，其实我也一样，你说你的事情的时候，我也经常心不在焉，做别的事了，只是简单的嗯嗯啊哦的回应一下。就像你之前告诉我你知乎专栏上有两篇文章，但我连题目都没看。我告诉你我在写博客，让你点进来看一下，你也就点了一下，没有认真读内容。</em></p>
<p><em>女朋友：嗯，的确是，我就点了标题粗略看了下。</em></p>
<p><em>我：我们是男女朋友之间都这样，那跟其他人估计更别提了。</em></p>
<p>我和我的女朋友都承认自己并没有真正的关心对方的内心想法与感受，但我们还是在倾听。</p>
<p>我想起一个故事：邹忌讽齐王纳谏。“吾妻之美我者，私我也；妾之美我者，畏我也；客之美我者，欲有求于我也”。大家都爱听自己喜欢的话，爱听符合自己利益的意见。</p>
<p>我为什么要聆听别人的想法呢？我和其他人一样，并不真正关心另一个人的感受，我需要把聆听当作一种手段，从其他人那里获取信息，做到知己知彼，用来包装对自己有利的建议。</p>
<p>为什么别人会听我的呢？不，不会，别人不会听我的，别人听的是符合他们想法利益的事情。不符合他们利益的话，那些他们不想听的话，他们一句也听不进去。我要做的不过是把对我有利的事情中对他们也有利的那些关键点整理出来告他们，那些是他们愿意听的东西。双赢。</p>
<p>同时，我也应该像邹忌那样审视我所听到的一切。由此观之，能真诚相待的人，这一辈子估计遇不到多少个，每一个多应该珍惜。而且二十岁以后遇到的朋友里面，怕是很难出现真诚相待的人了。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>listening</tag>
        <tag>倾听</tag>
      </tags>
  </entry>
  <entry>
    <title>ASIPP Beamer模板</title>
    <url>/2020/08/04/programming/asipp-beamer-template/</url>
    <content><![CDATA[<h2 id="ASIPP-Beamer模板"><a href="#ASIPP-Beamer模板" class="headerlink" title="ASIPP Beamer模板"></a>ASIPP Beamer模板</h2><p>我的国内单位：等离子体物理研究所(ASIPP)，这里大家做汇报展示的时候最常用的是PPT，我而习惯使用Beamer。<br>我用Beamer的主要原因有：</p>
<ul>
<li>我个人的对排版的审美观真的很一般，自己做出来的东西样子很丑（虽然我自己觉得好看），这种事情还是交给Beamer模板处理比较方便。Beamer制作的内容格式统一，整洁干净。</li>
<li>Beamer和其他LaTeX文件一样，可以用github来记录创建和修改历史，很方便管理不同版本</li>
<li>Beamer可以比较方便的添加note，在双屏幕展示的时候，自己可以很方便的看到note，挺好用的</li>
</ul>
<p>基于以上原因，我特别希望那个能有一个ASIPP的模板。不过遗憾的是，我并没有找到。既然没有找到，我就参考别人的模板，自己修改制作一个ASIPP的Beamer模板，可以在<a href="https://github.com/zxkjack123/asipp-beamer">这里</a>找到ASIPP的模板。</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>ASIPP</tag>
        <tag>Beamer</tag>
        <tag>template</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Beamer小技巧</title>
    <url>/2019/10/30/programming/beamer-tricks/</url>
    <content><![CDATA[<p>这篇博客是用来记录我在使用Beamer过程中遇到的我觉得比较好的一些小技巧。</p>
<h3 id="我的模板"><a href="#我的模板" class="headerlink" title="我的模板"></a>我的模板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexbeamer&#125;</span><br><span class="line">\usepackage&#123;latexsym&#125;</span><br><span class="line">\usepackage&#123;amsmath,amssymb&#125;</span><br><span class="line">\usepackage&#123;color,xcolor&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;algorithm&#125;</span><br><span class="line">\usepackage&#123;amsthm&#125;</span><br><span class="line">\usepackage&#123;enumitem&#125;</span><br><span class="line">\setlist[itemize,1]&#123;label&#x3D;$\bullet$&#125;</span><br><span class="line">\setlist[itemize,2]&#123;label&#x3D;$\diamond$&#125;</span><br><span class="line">\setlist[itemize,3]&#123;label&#x3D;$\ast$&#125;</span><br><span class="line">\setlist[itemize,4]&#123;label&#x3D;$\cdot$&#125;</span><br><span class="line">%\usepackage&#123;cites&#125;</span><br><span class="line">%\setbeamerfont&#123;footnote&#125;&#123;size&#x3D;\tiny&#125;</span><br><span class="line">%\usepackage&#123;pgfpages&#125;</span><br><span class="line">%\setbeameroption&#123;show notes on second screen&#x3D;right&#125;</span><br><span class="line">%\usepackage&#123;appendixnumberbeamer&#125; % for backup slides counter</span><br><span class="line">\addtobeamertemplate&#123;navigation symbols&#125;&#123;&#125;&#123;%</span><br><span class="line">    \usebeamerfont&#123;footline&#125;</span><br><span class="line">    \usebeamercolor[fg]&#123;footline&#125;</span><br><span class="line">    \hspace&#123;0.5em&#125;</span><br><span class="line">    \insertframenumber&#x2F;\inserttotalframenumber</span><br><span class="line">&#125;</span><br><span class="line">\newtheorem&#123;proposition&#125;[theorem]&#123;命题&#125;</span><br><span class="line">\setbeamertemplate&#123;theorems&#125;[numbered]</span><br><span class="line">\setbeamertemplate&#123;caption&#125;[numbered]</span><br><span class="line">\usetheme[white]&#123;ASIPP&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增加itemize的层级"><a href="#增加itemize的层级" class="headerlink" title="增加itemize的层级"></a>增加itemize的层级</h3><p>Beamer默认支持3级的itemize，但有时候可能会需要更多层级的列表，这时可以使用<code>enumitem</code>包来增加层级：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;enumitem&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setlist</span><span class="string">[itemize,1]</span><span class="string">&#123;label=$\bullet$&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setlist</span><span class="string">[itemize,2]</span><span class="string">&#123;label=$\diamond$&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setlist</span><span class="string">[itemize,3]</span><span class="string">&#123;label=$\ast$&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setlist</span><span class="string">[itemize,4]</span><span class="string">&#123;label=$\cdot$&#125;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="biblatex引用设置"><a href="#biblatex引用设置" class="headerlink" title="biblatex引用设置"></a>biblatex引用设置</h3><p>使用Beamer时，时常需要一个备用的参考文献列表。按照平常的习惯，我选择使用<code>biblatex</code>。使用时，只需要注意下面几个地方：</p>
<ul>
<li>使用文献管理软件导出参考文献到bib文件时，使用<code>bibtex</code>格式</li>
<li>在Beamer开头添加<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">[</span></span></span><br><span class="line"><span class="tag"><span class="string">backend=bibtex, % 配合文献管理软件生成格式</span></span></span><br><span class="line"><span class="tag"><span class="string">style=numeric, % 引用时显示数字</span></span></span><br><span class="line"><span class="tag"><span class="string">sorting=none, % 按照文献引用顺序排序</span></span></span><br><span class="line"><span class="tag"><span class="string">doi=false, % 不显示文献doi</span></span></span><br><span class="line"><span class="tag"><span class="string">isbn=false, % 不显期刊isbn</span></span></span><br><span class="line"><span class="tag"><span class="string">url=false % 不显示url</span></span></span><br><span class="line"><span class="tag"><span class="string">]</span><span class="string">&#123;biblatex&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">renewcommand*</span><span class="string">&#123;\bibfont&#125;</span><span class="string">&#123;\tiny&#125;</span></span> <span class="comment">% 设置超小字体显示参考文献</span></span><br><span class="line"><span class="tag">\<span class="name">setbeamertemplate</span><span class="string">&#123;bibliography item&#125;</span><span class="string">[text]</span></span> <span class="comment">% 将参考文献图标改称标准格式</span></span><br><span class="line"><span class="tag">\<span class="name">addbibresource</span><span class="string">&#123;xxx.bib&#125;</span></span></span><br></pre></td></tr></table></figure></li>
<li>在想显示参考文献列表的地方添加<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;frame&#125;</span><span class="string">[allowframebreaks]</span></span> <span class="comment">% 文献列表不超过1页时，去掉[allowframebreaks]</span></span><br><span class="line">    <span class="tag">\<span class="name">frametitle</span><span class="string">&#123;References&#125;</span></span></span><br><span class="line">    <span class="tag">\<span class="name">printbibliography</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;frame&#125;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>Beamer</tag>
        <tag>trikcs</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Code documentation tools</title>
    <url>/2019/05/16/programming/code-documentation-tools/</url>
    <content><![CDATA[<h2 id="Code-documentation-tool-in-need"><a href="#Code-documentation-tool-in-need" class="headerlink" title="Code documentation tool in need"></a>Code documentation tool in need</h2><p>As a student who writes code very often, I want a perfect tool to make my code well documented. By the word documentation, I mean, not only the comment lines in the source code, but also something like the introduction of the code/program, user manual, tutorial, getting started page, etc.. </p>
<p>By now, I have tried MS word, LaTeX, Mardown, Github page and even the text file to write documentations for my own code. And also used a Shpinx for an open source program (<a href="https://github.com/pyne/pyne">pyne</a>) I am working on. </p>
<p>Technologies are continually being developed, there are several good tools to make code documentation. It’s time to choose one that meets all my requirements:</p>
<ul>
<li>System independent. This tool should be available for all operating systems, include Windows, Linux and Mac. </li>
<li>Open source. Open source means I can access to it without any restriction, and I may also make changes to the source code.</li>
<li>Multiple programming language support. I am now using python, C++ and fortran. The ideal tool should support all these languages. The more, the better.  </li>
<li>Multiple language support. As a native Chinese speaker, there will be as much communications in Chinese as in English.</li>
<li>Git/Github compatibility. The documentation itself should also be recorded and managed on github. </li>
<li>Multiple output format support. For the documentation, I want at least a local version in text file (such as README.md), a PDF version (should support LaTeX format support), a online HTML version. </li>
<li>Convenient cross reference. Documentations contain contents highly related to each other, cross reference support enables user to jump to related content at a click. </li>
</ul>
<h2 id="Available-choices"><a href="#Available-choices" class="headerlink" title="Available choices"></a>Available choices</h2><p>I have listed the features I want. Now, let’s look at the available tools for code documentation. There are two popular documentation tools: <strong>Doxygen</strong> and <strong>Sphinx</strong>.</p>
<h3 id="Doxygen"><a href="#Doxygen" class="headerlink" title="Doxygen"></a>Doxygen</h3><p><a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> is a great tool for generating documentation from source code. The tool is aimed at C++, but it can also be used with PHP, Java, Python, etc. With the help of Doxygen, you can create online HTML documentation. It can also be used to generate output in multiple formats, including Unix man pages, PostScript, etc.</p>
<p>The biggest advantage of using Doxygen is that you will have consistency throughout your source code documentation. It can also help you to generate code structure using the undocumented source files. All you need to do is configure it accordingly.</p>
<p>Detail features of Doxygen could be found <a href="http://www.stack.nl/~dimitri/doxygen/manual/features.html">here</a>.</p>
<h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p><a href="http://www.sphinx-doc.org/en/master/">Sphinx</a> is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and licensed under the BSD license.</p>
<p>It was originally created for the Python documentation, and it has excellent facilities for the documentation of software projects in a range of languages. </p>
<p>Sphinx has the following features:</p>
<ul>
<li><strong>Output formats</strong>: HTML (including Windows HTML Help), LaTeX (for printable PDF versions), ePub, Texinfo, manual pages, plain text</li>
<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, citations, glossary terms and similar pieces of information</li>
<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic indices</strong>: general index as well as a language-specific module indices</li>
<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>
<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules (API docs), and more</li>
<li><strong>Contributed extensions</strong>: more than 50 extensions contributed by users in a second repository; most of them installable from PyPI</li>
</ul>
<h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><p>According to my requirement, how do these two documentation tools behave? See the table below:</p>
<table>
<thead>
<tr>
<th align="center">Tool</th>
<th align="center">Doxygen</th>
<th align="center">Sphinx</th>
</tr>
</thead>
<tbody><tr>
<td align="center">System independent</td>
<td align="center">Unix, Windows</td>
<td align="center">Linux, Windows, Mac</td>
</tr>
<tr>
<td align="center">Open source</td>
<td align="center">Yes. Writen in C++</td>
<td align="center">Yes. Written in python</td>
</tr>
<tr>
<td align="center">Programming language support</td>
<td align="center">C, C++, C#, Objective-C, IDL, Java, VHDL, PHP, Python, Tcl, Fortran, and D</td>
<td align="center">Python, Javascript, PHP, Java, Go, Erlang, R, .Net</td>
</tr>
<tr>
<td align="center">Language support</td>
<td align="center">en, zh_CN, etc.</td>
<td align="center">en, zh_CN, etc.</td>
</tr>
<tr>
<td align="center">Git/Github compatibility</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">Output format</td>
<td align="center">HTML, LaTeX, RTF, XML, Man page, DocBook</td>
<td align="center">HTML, epub, LaTeX, text, manual page, Texinfo</td>
</tr>
<tr>
<td align="center">Corss reference</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
</tbody></table>
<p>Now we found that both Doxygen and Sphinx meet my need. However, during the research process, I find that I prefer Sphinx for two reasons: </p>
<ul>
<li>Sphinx is written in python. </li>
<li>Documentation is independent of the source code</li>
</ul>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>programming</tag>
        <tag>code</tag>
        <tag>documentation</tag>
        <tag>tools</tag>
        <tag>doxygen</tag>
        <tag>sphinx</tag>
      </tags>
  </entry>
  <entry>
    <title>Install GCC without root permission</title>
    <url>/2019/05/16/programming/install_gcc_without_root/</url>
    <content><![CDATA[<h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>Sometime, we want to relative new version of basic building tools on a linux sever, where we don’t have root permission, to install some software not so popular to our own account.</p>
<p>For my case, I want to install MOAB, PyNE and DAGMC on a sever maintained by the several PhD or post-doctor researchers. This sever is used for some specific purpose highly related to the research. There isn’t a staff versatile enough to cope with the sever maintaince. There isn’t a moudle on the sever. Some characters of the sever:</p>
<ul>
<li>No tool <code>module</code></li>
<li>Some prebuild tools, such as GCC, are old version</li>
<li>I don’t have root permission</li>
</ul>
<p>While, maybe the better way to solve the problem is to ask experts to do install anything you want for me. But, I can’t find out a person with enough knowledge in our research group to do that. So, I am going to build a GCC on my own without root permission.</p>
<h2 id="Setup-GSRC"><a href="#Setup-GSRC" class="headerlink" title="Setup GSRC"></a>Setup GSRC</h2><p>I way I choose to install GCC is use <a href="http://www.gnu.org/software/gsrc/">GSRC</a> (GNU Source Release Collection) to install it.<br><strong>Note</strong>: Do <strong>not</strong> download GSRC package from <a href="http://ftp.gnu.org/gnu/gsrc/">ftp</a>, <strong>use bzr</strong> to download it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc</span><br><span class="line">       <span class="comment"># (use &quot;bzr checkout --lightweight&quot; to download the latest revision only)</span></span><br><span class="line">       <span class="comment"># there isn&#x27;t a bzr on the sever, so I download the file from https://ftp.gnu.org/gnu/gsrc/ and scp the file to the server and then extract</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> gsrc/</span><br><span class="line">$ ./bootstrap                       <span class="comment"># to create the configure script</span></span><br><span class="line">$ ./configure --prefix=<span class="variable">$HOME</span>/opt/GNU    <span class="comment"># --prefix is directory to install the packages</span></span><br><span class="line">                                        <span class="comment"># Pick your --prefix by your wishes.</span></span><br><span class="line">$ . ./setup.sh                      <span class="comment"># This just sets some ENV variables and appends to PATH</span></span><br><span class="line">                                        <span class="comment"># and other variables to allow GSRC to work seamlessly.</span></span><br><span class="line">                                            <span class="comment"># Put this line in your .bashrc.</span></span><br></pre></td></tr></table></figure>
<h3 id="Set-GSRC-environment"><a href="#Set-GSRC-environment" class="headerlink" title="Set GSRC environment"></a>Set GSRC environment</h3><p>Open ~/.bashrc, add the following line in the file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$PATH_TO_GSRC</span>/setup.sh</span><br></pre></td></tr></table></figure>

<h2 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h2><h3 id="Update-ISL"><a href="#Update-ISL" class="headerlink" title="Update ISL"></a>Update ISL</h3><p>ISL is a required by GCC, but the version of the prebuild one is too lower thant 0.15. So, install ISL.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -C pkg/other/isl</span><br><span class="line">$ make -C pkg/other/isl install</span><br></pre></td></tr></table></figure>

<h2 id="Install-GCC"><a href="#Install-GCC" class="headerlink" title="Install GCC"></a>Install GCC</h2><p>Now, I want to install GCC-7.4.0 on the sever.</p>
<h3 id="Modify-config-mk"><a href="#Modify-config-mk" class="headerlink" title="Modify config.mk"></a>Modify config.mk</h3><p>Before install GCC, there are some configure options should be changed. Open the gsrc/pkg/gnu/gcc7/config.mk, edit the following items:</p>
<ul>
<li><code>--enable-languages=c,c++,fortran</code></li>
<li><code>--disable-multilib</code></li>
</ul>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>Run the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ cd PATH_TO_GSRC</span></span><br><span class="line">$ make -C pkg/gnu/gcc7</span><br></pre></td></tr></table></figure>
<h4 id="Catch-problems-and-fix"><a href="#Catch-problems-and-fix" class="headerlink" title="Catch problems and fix"></a>Catch problems and fix</h4><p>When you running perform <code>make</code>, there may be some error like this:</p>
<ol>
<li><code>...suspect...32...multilib..., if 64... rerun with --disable-multilib</code>. Just RERUN the same make process.</li>
<li><code>...vec.h:295:7: error: ‘GATHER_STATISTICS’ was not declared in this scope</code>.<br>Form <a href="https://stackoverflow.com/questions/21685255/how-can-i-understand-these-dreadful-errors-when-building-gcc-4-8-2/24377214#24377214">here</a> I know the solution is unset a bunch of C compiler flags: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> LIBRARY_PATH CPATH C_INCLUDE_PATH PKG_CONFIG_PATH CPLUS_INCLUDE_PATH INCLUDE</span><br></pre></td></tr></table></figure>
And run the <code>make</code> again:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -C pkg/gnu/gcc7</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -C pkg/gnu/gcc7 check</span><br><span class="line">$ make -C pkg/gnu/gcc7 install</span><br></pre></td></tr></table></figure>

<h2 id="Post-install-env-set"><a href="#Post-install-env-set" class="headerlink" title="Post-install, env set"></a>Post-install, env set</h2><p>The GCC binaries I installed have the suffix of <code>-7</code>. Link them to the name without <code>-7</code>. Acutally, I can modify the <code>pkg/gnu/gcc7/config.mk</code> and change the <code>--program-suffix</code> to none to avoid this suffix.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/opt/GNU/bin</span><br><span class="line">$ ln -sf gcc-7 gcc</span><br><span class="line">$ ln -sf g++-7 g++</span><br><span class="line">$ ln -sf gfortran-7 gfortran</span><br></pre></td></tr></table></figure>
<p>Done!</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>GCC</tag>
        <tag>install</tag>
        <tag>root permission</tag>
      </tags>
  </entry>
  <entry>
    <title>Programming cycle</title>
    <url>/2019/05/16/programming/programming_cycle/</url>
    <content><![CDATA[<p>Summary of my experience of developing an tools/code.</p>
<h2 id="Request-analysis"><a href="#Request-analysis" class="headerlink" title="Request analysis"></a>Request analysis</h2><p>Know your expected objective and motivation:</p>
<ul>
<li>Why do you want this tool?</li>
<li>Aims and functions you want.</li>
<li>Benefits of the tool.</li>
</ul>
<h2 id="Research-plan"><a href="#Research-plan" class="headerlink" title="Research plan"></a>Research plan</h2><p>Plan your work in detail: </p>
<ul>
<li>Literature review</li>
<li>Software developing/modification: split the task into smaller functions, design before coding, make sure add unit test for each individual functions</li>
<li>Verification using numerical experiments</li>
<li>Validation (benchmarking) and demonstraction of benefit</li>
<li>Analysis performance improvements (CPU and memory usage)<ul>
<li><a href="https://github.com/rkern/line_profiler">line_profiler</a>: record the cpu time of each line</li>
<li><a href="https://pypi.org/project/memory-profiler">memory_profiler</a>: record the memory usage of each line </li>
</ul>
</li>
</ul>
<h2 id="Final-Report"><a href="#Final-Report" class="headerlink" title="Final Report"></a>Final Report</h2><p>Documentation:</p>
<ul>
<li>theory of the tool</li>
<li>specific details regarding the implementation</li>
<li>evidence of its correct implementation and validation</li>
</ul>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>programming</tag>
        <tag>line profiler</tag>
        <tag>memory profiler</tag>
      </tags>
  </entry>
  <entry>
    <title>安装ALARA</title>
    <url>/2019/05/16/neutronics/alara-install/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>中子活化计算是和中子学分析的重要一环。国际上用的比较多有<a href="http://www.ccfe.ac.uk/fispact.aspx">FISPACT</a>, <a href="http://www.oecd-nea.org/tools/abstract/detail/nea-1839">ACAB</a>和<a href="http://www.oecd-nea.org/tools/abstract/detail/nea-1839">ALARA</a>。</p>
<p>文献上能看到很多用MCNP + FISPACT或者MCNP + ACAB的组合进行核分析的案例。不过FISPACT是收费软件，ACAB好像更难获取（连官方说明手册都没法下载全文）。</p>
<p>ALARA也是一款能够计算活化的软件。经常和PyNE, DAGMC配合的软件就是这款ALARA。</p>
<p>ALARA是开源软件，可以在其<a href="https://github.com/svalinn/ALARA">Github主页</a>获取,在这里参考<a href="http://alara.engr.wisc.edu/users.guide.html/">使用说明</a>。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>假设我们想把ALARA安装在<code>$HOME/opt/ALARA/</code>文件夹下，我们可以参照下面步骤进行。</p>
<h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> opt</span><br><span class="line">$ mkdir ALARA</span><br><span class="line">$ <span class="built_in">cd</span> ALARA</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/svalinn/ALARA</span><br><span class="line">$ <span class="built_in">cd</span> ALARA</span><br><span class="line">$ autoreconf -<span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 建立bld文件夹用来存放build过程文件</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ mkdir bld</span><br><span class="line">$ <span class="built_in">cd</span> bld</span><br><span class="line">$ ../ALARA/configure --prefix=<span class="variable">$HOME</span>/opt/ALARA</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3><p>回到<code>$HOME/opt/ALARA</code>文件夹下，我们可以看到生成了<code>bin</code>,<code>data</code>,<code>doc</code>和<code>sample</code>文件夹。我们已经安装成功。不过要想轻松的使用它，必须要把它的可执行文件路径加到<code>~/.bashrc</code>中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/opt/ALARA/bin</span><br></pre></td></tr></table></figure>
<p>保存<code>~/.bashrc</code>并在terminal上运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>然后系统就可以找到alara了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> alara</span><br></pre></td></tr></table></figure>

<h2 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h2><p>未完待续</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>neutronics</tag>
        <tag>ALARA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FENDL3.1d数据库</title>
    <url>/2019/05/16/neutronics/apply-fendl3.1d/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FENDL3.1d (<a href="https://www-nds.iaea.org/fendl/">Fusion Evaluated Nuclear Data Library Ver.3.1d</a>)数据库是聚变中子学计算时使用的核数据库，于2018年1月24日发布。在3.1版本之前，FENDL系列数据库还有2.1版，3.0版等我也都用过。我用它们来进行中子和光子输运计算。</p>
<p>2.1版的数据库存在缺点：核素种类不够丰富。有时候部分核素2.1库里面没有，需要换用其他库。</p>
<p>3.0版的数据库也存在缺点：K39这个核素的数据库有问题，计算会导致模拟出错终止。</p>
<p>不过好在FENDL3.1c版本的时候就对K39这个核素的问题进行了修复。</p>
<p>经过了bug修复和一些核素数据库的更新之后，相信3.1d版本的数据库能够表现更好。</p>
<h2 id="MCNP添加FENDL3-1d版本核数据库"><a href="#MCNP添加FENDL3-1d版本核数据库" class="headerlink" title="MCNP添加FENDL3.1d版本核数据库"></a>MCNP添加FENDL3.1d版本核数据库</h2><p>FENDL3.1d版本核数据库包含中子，光子，质子及氘核等多种数据库，每种又有不同的格式。这里仅列出MCNP使用的ace格式的中子数据库的添加方法。</p>
<p>给MCNP添加FENDL3.1d中子数据库的方法有以下几步：</p>
<ul>
<li><a href="https://www-nds.iaea.org/fendl/">官网</a>下载<a href="https://www-nds.iaea.org/fendl/data/neutron/fendl31d-neutron-ace.zip">中子ace格式数据库</a></li>
<li>解压压缩文件至MCNP数据库文件夹下(有xsdir的那个文件夹)</li>
<li>添加核素索引至xsdir</li>
<li>测试验证数据库是否被正确读取</li>
</ul>
<h3 id="解压数据库文件"><a href="#解压数据库文件" class="headerlink" title="解压数据库文件"></a>解压数据库文件</h3><p>下载到的数据库压缩包名为<strong>fendl31d-neutron-ace.zip</strong>。将其解压后内容如下：</p>
<ul>
<li>fendl31d_ACE: 文件夹。内含181个数据库文件，总大小2.5G。这就是数据库主体了。</li>
<li>fendl31d_ACE_Linux.xsd: 文件。顾名思义，是fendl3.1d ace版数据库在Linux版本下的路径索引(xsd, cross section directory)</li>
<li>fendl31d_ACE_Windows.xsd: 文件。fendl3.1d ace版数据库在Windows版本下的路径索引</li>
</ul>
<p>将fendl31d_ACE这个文件夹放到MCNP数据库所在位置(与xsdir文件相同)。</p>
<p><strong>备注</strong>：不需要将文件夹里面的文件拷贝出来，而是将文件夹整个放到那个位置</p>
<h3 id="添加核素索引"><a href="#添加核素索引" class="headerlink" title="添加核素索引"></a>添加核素索引</h3><p>虽然把数据库文件放到了指定文件夹，但现在MCNP还找不到这些数据库文件。因为MCNP在运行的时候是通过xsdir (cross section directory)这个文件来找数据库文件的。这个xsdir内指定了各个数据库文件的路径。</p>
<p>打开xsdir文件，这个文件主要由两部分组成：</p>
<ul>
<li><strong>atomic weight ratios</strong>: 记录了各个元素的不同核素的相对原子质量</li>
<li><strong>directory</strong>: 记录了各个核素相应的数据库文件位置及一些参数。格式为[ZZZ][AAA].[xx][c/h/e/u/p/m/g/y/t/d] 相对原子质量 数据库文件位置 …</li>
</ul>
<p>我们需要将FENDL3.1d数据库的各个文件位置告诉MCNP，方法就是将<strong>fendl31d_ACE_Linux.xsd</strong>或者<strong>fendl31d_ACE_Windows.xsd</strong>中的内容全部复制粘贴到<strong>xsdir</strong>文件中<strong>directory</strong>部分中即可。</p>
<p><strong>备注</strong>: 同一个核素，可能有很多核数据库都包含它的数据，也就是有多个路径多个文件。MCNP在找的时候是按照其在xsdir中出现的顺序来决定读取的数据库的。比如同时有1001的1001.21c和1001.31c这两个数据库文件，如果1001.21c对应的路径出现在前面，那么MCNP就会用1001.21c对应的文件数据，而不是31c的数据库。因此，我们应该将fendl3.1d的那些31c结尾的数据库路径放在21c的前面。</p>
<h3 id="验证数据库读取正确"><a href="#验证数据库读取正确" class="headerlink" title="验证数据库读取正确"></a>验证数据库读取正确</h3><p>为了确保新添加的fendl3.1数据库能够被正确读取，我们可以用一个小例子运行一下。让例子中包含K39这个核素，运行。运行完成后，打开输出文件outp,搜索<em>19039.31c</em>，能够找到就说明fendl3.1数据库添加成功，可以被正确读取了。</p>
<h2 id="关于K39"><a href="#关于K39" class="headerlink" title="关于K39"></a>关于K39</h2><p>在FENDL3.1数据库中，K39比较特殊，它有两个数据库文件:<strong>19K_039</strong>和<strong>19K_039_</strong>。其中最新的文件是<strong>19K_039</strong>，打开它，我们可以看到它的更新时间是07/28/17，由TENDL-2015得到。而<strong>19K_039_</strong>则是更新于09/07/15，由TENDL-2010得到。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>nuclear data library</tag>
        <tag>FENDL</tag>
      </tags>
  </entry>
  <entry>
    <title>dag-openmc-docker</title>
    <url>/2020/08/04/neutronics/dag-openmc-docker/</url>
    <content><![CDATA[<p>This blog records the steps of mine building docker image for DAG-OpenMC.</p>
<h3 id="Build-official-docker-image"><a href="#Build-official-docker-image" class="headerlink" title="Build official docker image"></a>Build official docker image</h3><p>There is a <a href="https://github.com/zxkjack123/openmc/blob/zxk_dockerfile/Dockerfile">dockerfile</a> to build image of pure OpenMC on my machine.<br>Dlwnload the dockerfile, rename it to <code>openmc.dockerfile</code>, then run it with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build --tag=dagopenmc:update -f ./openmc.dockerfile .</span><br></pre></td></tr></table></figure>

<h3 id="Test-with-toy-problem"><a href="#Test-with-toy-problem" class="headerlink" title="Test with toy problem"></a>Test with toy problem</h3>]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>DAGMC</tag>
        <tag>OpenMC</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dag-openmc-example</title>
    <url>/2020/08/04/neutronics/dag-openmc-example/</url>
    <content><![CDATA[<p>DAGMC can be installed as a libray of OpenMC.<br>Let’s call it DAG-OpenMC.<br>This blog shows a simple example of DAG-OpenMC problem.</p>
<h3 id="Test-problem-description"><a href="#Test-problem-description" class="headerlink" title="Test problem description"></a>Test problem description</h3><p>I am using a toy problem for SDR calculation with a collimator as the example:</p>
<center>
<img src="/neutronics/dag-openmc-example/demo_collimator_design.png" width="500">
<br>
</center>

<p>Create a DAGMC geometry file in Trelis to use.</p>
<h3 id="Define-material"><a href="#Define-material" class="headerlink" title="Define material"></a>Define material</h3><p>Here, we use PyNE to generate <code>h5</code> material and then combine it with the geometry file.<br>As it is an example, we use the default <code>nndc_hdf5</code> nuclide library.<br>So, we don’t need to use <code>expand_elements</code> when generte the pyne material.<br>Otherwise, there will be inconsistency between nuclide name definition.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> pyne.material <span class="keyword">import</span> Material,MaterialLibrary</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Welcome!&quot;</span></span><br><span class="line">mat_lib=MaterialLibrary()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">lead = Material(&#123;<span class="string">&#x27;Pb&#x27;</span>:<span class="number">1</span>&#125;,density=<span class="number">11.35</span>)</span><br><span class="line"><span class="comment">#lead = lead.expand_elements()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define a simple water since O-18 not in mcnp xs libs</span></span><br><span class="line">watervec=&#123;<span class="number">10010</span>:<span class="number">2</span>,<span class="number">80160</span>:<span class="number">1</span>&#125; <span class="comment"># simple water</span></span><br><span class="line">water = Material()</span><br><span class="line">water.density = <span class="number">1.0</span></span><br><span class="line">water.from_atom_frac(watervec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Air</span></span><br><span class="line">air = Material(&#123;<span class="string">&#x27;C&#x27;</span>:<span class="number">0.000124</span>, <span class="string">&#x27;N&#x27;</span>:<span class="number">0.755268</span>, <span class="string">&#x27;O&#x27;</span>:<span class="number">0.231781</span>, <span class="string">&#x27;Ar&#x27;</span>:<span class="number">0.012827</span>&#125;,</span><br><span class="line">               density=<span class="number">0.001205</span>)</span><br><span class="line"><span class="comment">#air = air.expand_elements()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put materials in the mat_lib</span></span><br><span class="line">mat_lib[<span class="string">&quot;Lead&quot;</span>] = lead</span><br><span class="line">mat_lib[<span class="string">&quot;Air&quot;</span>] = air</span><br><span class="line">mat_lib[<span class="string">&quot;Water&quot;</span>] = water</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mat_lib.write_hdf5(<span class="string">&quot;demo_collimator_mat_lib.h5&quot;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;All done!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Combine-the-geometry-and-material"><a href="#Combine-the-geometry-and-material" class="headerlink" title="Combine the geometry and material"></a>Combine the geometry and material</h3><p>Use <code>uwuw_preproc</code> to combine the material and geometry in <code>dagmc.h5m</code>.<br>Note that the name of this file must be <a href="https://github.com/zxkjack123/dag_openmc_example"><code>dagmc.h5m</code></a> for use of DAG-OpenMC.</p>
<h3 id="define-other-items-for-OpenMC-using-Python-API"><a href="#define-other-items-for-OpenMC-using-Python-API" class="headerlink" title="define other items for OpenMC using Python API"></a>define other items for OpenMC using Python API</h3><p>Things to be defined:</p>
<ul>
<li>general settings (include <code>dagmc</code> option to be <code>True</code>)</li>
<li>source</li>
<li>tally</li>
<li>run and plots</li>
</ul>
<p>The following is the <code>input.py</code> for this problem:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> openmc</span><br><span class="line"><span class="keyword">import</span> openmc.capi</span><br><span class="line"><span class="keyword">from</span> openmc.stats <span class="keyword">import</span> Point</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">model = openmc.model.Model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings</span></span><br><span class="line">model.settings.batches = <span class="number">5</span></span><br><span class="line">model.settings.inactive = <span class="number">0</span></span><br><span class="line">model.settings.particles = <span class="number">100</span> <span class="comment"># particle per batch</span></span><br><span class="line">model.settings.run_mode = <span class="string">&#x27;fixed source&#x27;</span></span><br><span class="line">model.settings.output = &#123;<span class="string">&#x27;tallies&#x27;</span>:<span class="literal">True</span>, <span class="string">&#x27;summary&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># source, 14MeV at (-30, 0, 0), isotropic</span></span><br><span class="line">source = openmc.Source()</span><br><span class="line">source.space = Point(xyz=(<span class="number">-30.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">source.energy = openmc.stats.Discrete([<span class="number">14.0</span>*<span class="number">1e6</span>], [<span class="number">1.0</span>])</span><br><span class="line">model.settings.source = source</span><br><span class="line"></span><br><span class="line"><span class="comment"># set model.settings.dagmc to be true, the default &#x27;dagmc.h5m&#x27; will be used</span></span><br><span class="line">model.settings.dagmc = <span class="literal">True</span></span><br><span class="line">model.settings.export_to_xml(path=<span class="string">&#x27;settings.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tally</span></span><br><span class="line">tally = openmc.Tally()</span><br><span class="line"><span class="comment"># define score</span></span><br><span class="line">tally.scores = [<span class="string">&#x27;flux&#x27;</span>]</span><br><span class="line"><span class="comment"># define filter</span></span><br><span class="line"><span class="comment"># 175 energy group, energy unit of openmc is eV</span></span><br><span class="line">energy_bins = np.array([<span class="number">0.0</span>,</span><br><span class="line">        <span class="number">1.00001E-007</span>, <span class="number">4.13994E-007</span>, <span class="number">5.31579E-007</span>, <span class="number">6.82560E-007</span>, <span class="number">8.76425E-007</span>,</span><br><span class="line">        <span class="number">1.12535E-006</span>, <span class="number">1.44498E-006</span>, <span class="number">1.85539E-006</span>, <span class="number">2.38237E-006</span>, <span class="number">3.05902E-006</span>,     </span><br><span class="line">        <span class="number">3.92786E-006</span>, <span class="number">5.04348E-006</span>, <span class="number">6.47595E-006</span>, <span class="number">8.31529E-006</span>, <span class="number">1.06770E-005</span>,     </span><br><span class="line">        <span class="number">1.37096E-005</span>, <span class="number">1.76035E-005</span>, <span class="number">2.26033E-005</span>, <span class="number">2.90232E-005</span>, <span class="number">3.72665E-005</span>,     </span><br><span class="line">        <span class="number">4.78512E-005</span>, <span class="number">6.14421E-005</span>, <span class="number">7.88932E-005</span>, <span class="number">1.01301E-004</span>, <span class="number">1.30073E-004</span>,     </span><br><span class="line">        <span class="number">1.67017E-004</span>, <span class="number">2.14454E-004</span>, <span class="number">2.75364E-004</span>, <span class="number">3.53575E-004</span>, <span class="number">4.53999E-004</span>,     </span><br><span class="line">        <span class="number">5.82947E-004</span>, <span class="number">7.48518E-004</span>, <span class="number">9.61117E-004</span>, <span class="number">1.23410E-003</span>, <span class="number">1.58461E-003</span>,     </span><br><span class="line">        <span class="number">2.03468E-003</span>, <span class="number">2.24867E-003</span>, <span class="number">2.48517E-003</span>, <span class="number">2.61259E-003</span>, <span class="number">2.74654E-003</span>,     </span><br><span class="line">        <span class="number">3.03539E-003</span>, <span class="number">3.35463E-003</span>, <span class="number">3.70744E-003</span>, <span class="number">4.30742E-003</span>, <span class="number">5.53084E-003</span>,     </span><br><span class="line">        <span class="number">7.10174E-003</span>, <span class="number">9.11882E-003</span>, <span class="number">1.05946E-002</span>, <span class="number">1.17088E-002</span>, <span class="number">1.50344E-002</span>,     </span><br><span class="line">        <span class="number">1.93045E-002</span>, <span class="number">2.18749E-002</span>, <span class="number">2.35786E-002</span>, <span class="number">2.41755E-002</span>, <span class="number">2.47875E-002</span>,     </span><br><span class="line">        <span class="number">2.60584E-002</span>, <span class="number">2.70001E-002</span>, <span class="number">2.85011E-002</span>, <span class="number">3.18278E-002</span>, <span class="number">3.43067E-002</span>,     </span><br><span class="line">        <span class="number">4.08677E-002</span>, <span class="number">4.63092E-002</span>, <span class="number">5.24752E-002</span>, <span class="number">5.65622E-002</span>, <span class="number">6.73795E-002</span>,     </span><br><span class="line">        <span class="number">7.20245E-002</span>, <span class="number">7.94987E-002</span>, <span class="number">8.25034E-002</span>, <span class="number">8.65170E-002</span>, <span class="number">9.80365E-002</span>,     </span><br><span class="line">        <span class="number">1.11090E-001</span>, <span class="number">1.16786E-001</span>, <span class="number">1.22773E-001</span>, <span class="number">1.29068E-001</span>, <span class="number">1.35686E-001</span>,     </span><br><span class="line">        <span class="number">1.42642E-001</span>, <span class="number">1.49956E-001</span>, <span class="number">1.57644E-001</span>, <span class="number">1.65727E-001</span>, <span class="number">1.74224E-001</span>,     </span><br><span class="line">        <span class="number">1.83156E-001</span>, <span class="number">1.92547E-001</span>, <span class="number">2.02419E-001</span>, <span class="number">2.12797E-001</span>, <span class="number">2.23708E-001</span>,     </span><br><span class="line">        <span class="number">2.35177E-001</span>, <span class="number">2.47235E-001</span>, <span class="number">2.73237E-001</span>, <span class="number">2.87246E-001</span>, <span class="number">2.94518E-001</span>,     </span><br><span class="line">        <span class="number">2.97211E-001</span>, <span class="number">2.98491E-001</span>, <span class="number">3.01974E-001</span>, <span class="number">3.33733E-001</span>, <span class="number">3.68832E-001</span>,     </span><br><span class="line">        <span class="number">3.87742E-001</span>, <span class="number">4.07622E-001</span>, <span class="number">4.50492E-001</span>, <span class="number">4.97871E-001</span>, <span class="number">5.23397E-001</span>,     </span><br><span class="line">        <span class="number">5.50232E-001</span>, <span class="number">5.78443E-001</span>, <span class="number">6.08101E-001</span>, <span class="number">6.39279E-001</span>, <span class="number">6.72055E-001</span>,     </span><br><span class="line">        <span class="number">7.06512E-001</span>, <span class="number">7.42736E-001</span>, <span class="number">7.80817E-001</span>, <span class="number">8.20850E-001</span>, <span class="number">8.62936E-001</span>,     </span><br><span class="line">        <span class="number">9.07180E-001</span>, <span class="number">9.61672E-001</span>, <span class="number">1.00259E+000</span>, <span class="number">1.10803E+000</span>, <span class="number">1.16484E+000</span>,     </span><br><span class="line">        <span class="number">1.22456E+000</span>, <span class="number">1.28735E+000</span>, <span class="number">1.35335E+000</span>, <span class="number">1.42274E+000</span>, <span class="number">1.49569E+000</span>,     </span><br><span class="line">        <span class="number">1.57237E+000</span>, <span class="number">1.65299E+000</span>, <span class="number">1.73774E+000</span>, <span class="number">1.82684E+000</span>, <span class="number">1.92050E+000</span>,     </span><br><span class="line">        <span class="number">2.01897E+000</span>, <span class="number">2.12248E+000</span>, <span class="number">2.23130E+000</span>, <span class="number">2.30693E+000</span>, <span class="number">2.34570E+000</span>,     </span><br><span class="line">        <span class="number">2.36533E+000</span>, <span class="number">2.38513E+000</span>, <span class="number">2.46597E+000</span>, <span class="number">2.59240E+000</span>, <span class="number">2.72532E+000</span>,     </span><br><span class="line">        <span class="number">2.86505E+000</span>, <span class="number">3.01194E+000</span>, <span class="number">3.16637E+000</span>, <span class="number">3.32871E+000</span>, <span class="number">3.67879E+000</span>,     </span><br><span class="line">        <span class="number">4.06570E+000</span>, <span class="number">4.49329E+000</span>, <span class="number">4.72367E+000</span>, <span class="number">4.96585E+000</span>, <span class="number">5.22046E+000</span>,     </span><br><span class="line">        <span class="number">5.48812E+000</span>, <span class="number">5.76950E+000</span>, <span class="number">6.06531E+000</span>, <span class="number">6.37628E+000</span>, <span class="number">6.59241E+000</span>,     </span><br><span class="line">        <span class="number">6.70320E+000</span>, <span class="number">7.04688E+000</span>, <span class="number">7.40818E+000</span>, <span class="number">7.78801E+000</span>, <span class="number">8.18731E+000</span>,     </span><br><span class="line">        <span class="number">8.60708E+000</span>, <span class="number">9.04837E+000</span>, <span class="number">9.51229E+000</span>, <span class="number">1.00000E+001</span>, <span class="number">1.05127E+001</span>,     </span><br><span class="line">        <span class="number">1.10517E+001</span>, <span class="number">1.16183E+001</span>, <span class="number">1.22140E+001</span>, <span class="number">1.25232E+001</span>, <span class="number">1.28403E+001</span>,     </span><br><span class="line">        <span class="number">1.34986E+001</span>, <span class="number">1.38403E+001</span>, <span class="number">1.41907E+001</span>, <span class="number">1.45499E+001</span>, <span class="number">1.49182E+001</span>,     </span><br><span class="line">        <span class="number">1.56831E+001</span>, <span class="number">1.64872E+001</span>, <span class="number">1.69046E+001</span>, <span class="number">1.73325E+001</span>, <span class="number">1.96403E+001</span>])</span><br><span class="line">energy_filter = openmc.EnergyFilter(energy_bins*<span class="number">1e6</span>)</span><br><span class="line">tally.filters.append(energy_filter)</span><br><span class="line"><span class="comment"># mesh filter</span></span><br><span class="line">mesh = openmc.Mesh(mesh_id=<span class="number">14</span>, name=<span class="string">&quot;n_flux&quot;</span>)</span><br><span class="line">mesh.dimension= [<span class="number">16</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">mesh.lower_left = (<span class="number">-40.0</span>, <span class="number">-12.5</span>, <span class="number">-2.5</span>)</span><br><span class="line">mesh.upper_right = (<span class="number">40.0</span>, <span class="number">12.5</span>, <span class="number">2.5</span>)</span><br><span class="line">mesh_filter = openmc.MeshFilter(mesh)</span><br><span class="line">tally.filters.append(mesh_filter)</span><br><span class="line"><span class="comment"># add the tally to tallies list</span></span><br><span class="line">tallies = openmc.Tallies()</span><br><span class="line">tallies.append(tally)</span><br><span class="line">tallies.export_to_xml()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the problem</span></span><br><span class="line"><span class="comment">#openmc.run(mpi_args=[&#x27;mpiexec&#x27;, &#x27;-n&#x27;, &#x27;4&#x27;])</span></span><br><span class="line">openmc.run()</span><br></pre></td></tr></table></figure>

<h3 id="Run-the-problem"><a href="#Run-the-problem" class="headerlink" title="Run the problem"></a>Run the problem</h3><p>Run the problem using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python input.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>DAGMC</tag>
        <tag>OpenMC</tag>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>dag-openmc-fendl31d-neutron-nuc-lib</title>
    <url>/2020/08/04/neutronics/dag-openmc-fendl31d-neutron-nuc-lib/</url>
    <content><![CDATA[<p>The default nuclear library used in OpenMC is <code>nndc_hdf5</code> from ENDF/B-VII.1.<br>It contains neutron and photon nuclear data library.<br>As the OpenMC is mainly used for fission related calculation, some of the nuclides are missing from the defaul <strong>neutron</strong> nuclear library.<br>Such as <code>C12</code>, <code>C13</code> and <code>O18</code>.</p>
<p>I am trying to use OpenMC to run fusion problem, therefore, add the missing nuclides to the nuclear library is a necessary step.<br>And the process is quite simple.</p>
<h3 id="Found-a-missing-nuclide"><a href="#Found-a-missing-nuclide" class="headerlink" title="Found a missing nuclide"></a>Found a missing nuclide</h3><p>Sometimes when you run the problem, OpenMC reports a error such as:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find nuclide O18 in cross_sections.xml.</span><br></pre></td></tr></table></figure>
<p>That means the <code>O18</code> is missing in your nuclear library.</p>
<h3 id="Generate-h5-nuc-file-for-specific-nuclide"><a href="#Generate-h5-nuc-file-for-specific-nuclide" class="headerlink" title="Generate h5 nuc file for specific nuclide"></a>Generate h5 nuc file for specific nuclide</h3><p>OpenMC provide a script <a href="https://openmc.readthedocs.io/en/latest/usersguide/scripts.html#openmc-ace-to-hdf5"><code>openmc-ace-to-hdf5</code></a> to convert ACE format nuclear library to OpenMC h5 nuclear library.<br>For examle, assuming that you have downloaded the <a href="https://www-nds.iaea.org/fendl/data/neutron/fendl31d-neutron-ace.zip">FENDL3.1d neutron library</a>, you can create the <code>O18.h5</code> library using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openmc-ace-to-hdf5 08O_18</span><br></pre></td></tr></table></figure>
<p>More usage of <code>openmc-ace-to-hdf5</code> can refer to the official tutorial.</p>
<h3 id="Add-the-path-to-cross-sections-xml"><a href="#Add-the-path-to-cross-sections-xml" class="headerlink" title="Add the path to cross_sections.xml"></a>Add the path to <strong>cross_sections.xml</strong></h3><p>Once the wanted nuclear library is created, you need to add the path of the nuclide to <code>corss_sections.xml</code>.<br>Then that’s all set!</p>
<p><strong>Note</strong>: We can create all the FENDL3.1d nuclear library and add the path before the defaul neutron library paths.<br>After that, OpenMC will find the FENDL3.1d neutron library first.</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>DAGMC</tag>
        <tag>OpenMC</tag>
        <tag>fenld</tag>
        <tag>neutron</tag>
        <tag>nuclear library</tag>
      </tags>
  </entry>
  <entry>
    <title>DagOpenMC使用小技巧及FAQ</title>
    <url>/2019/12/06/neutronics/dag-openmc-tricks/</url>
    <content><![CDATA[<p>这篇博客用于记录我在学习及使用DagOpenMC的过程中，觉得有价值的一些小技巧及一些FAQ。</p>
<h2 id="一些有用的设置"><a href="#一些有用的设置" class="headerlink" title="一些有用的设置"></a>一些有用的设置</h2><h3 id="输出控制"><a href="#输出控制" class="headerlink" title="输出控制"></a>输出控制</h3><h4 id="settings-output"><a href="#settings-output" class="headerlink" title="settings.output"></a>settings.output</h4><p><code>settings.output</code>是用来控制运行过程中输出文件的选项。OpenMC运行过程中会默认输出<code>tallies.out</code>和<code>summary.h5</code>。这两个内容，在不需要的时候，可以选择让OpenMC不输出他们。能够稍微减少文件I/O耗费的时间，稍微节省磁盘空间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">settings.output = &#123;<span class="string">&#x27;tallies&#x27;</span>:<span class="literal">False</span>, <span class="string">&#x27;summary&#x27;</span>:<span class="literal">False</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="settings-sourcepoint"><a href="#settings-sourcepoint" class="headerlink" title="settings.sourcepoint"></a>settings.sourcepoint</h4><p><code>settings.sourcepoint</code> 是用来控制是否在<code>statepoint.xx.h5</code>文件中保存一个batch的所有源粒子信息的选项。当一个batch的粒子数目很多时，保存这部分信息会导致statepoint文件非常大，而且要耗费一些时间。<br>可以通过下面的设置不保存源粒子的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">settings.sourcepoint = &#123;write<span class="string">&#x27;:False&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算速度"><a href="#计算速度" class="headerlink" title="计算速度"></a>计算速度</h3><h4 id="settings-survival-biasing"><a href="#settings-survival-biasing" class="headerlink" title="settings.survival_biasing"></a>settings.survival_biasing</h4><p><code>settings.survival_biasing</code>是用来控制计算时是否使用隐式辐射俘获来提升计算速度的。推荐开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">settings.survival_biasing &#x3D; True</span><br></pre></td></tr></table></figure>

<h3 id="Tally"><a href="#Tally" class="headerlink" title="Tally"></a>Tally</h3><h4 id="网格计算总中子通量的误差"><a href="#网格计算总中子通量的误差" class="headerlink" title="网格计算总中子通量的误差"></a>网格计算总中子通量的误差</h4><p>OpenMC网格技术的能量区间划分和MCNP不一样，暂时没有默认的全能量区间计数及全能量区间误差计算。<br>我们在画图的时候，经常用到总中子通量的误差。由于同一个网格，不同能量区间的计数并不是相对独立的，而是相关的，我们无法通过直接将各个能量区间的方差相加的方式获得总通量的方差。<br>目前，可以单独设置另一个单一的包含所有能量区间的能群来计数总通量。<br>举个例子，我用175群计数中子通量的时候，第一个tally的<code>EnergyFilter</code>用175群的能量边界（176个数）用来记录175群每个能群的通量；第二个tally用<code>[0, ebin_175]</code>来计数总通量，这样通过第二个tally计数来获得总通量的误差。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>DAGMC</tag>
        <tag>OpenMC</tag>
        <tag>DagOpenMC</tag>
        <tag>tricks</tag>
        <tag>FAQ</tag>
      </tags>
  </entry>
  <entry>
    <title>DAGMC几何和数据可视化</title>
    <url>/2019/05/16/neutronics/dagmc-geom-data-visualization/</url>
    <content><![CDATA[<p>科学计算达到了结果之后，总是希望能够画出酷炫的图来展示自己的成果。比如说展示复杂几何结构的的图，展示数据在空间分布的图，或者两者结合起来的几何和数据匹配的图。</p>
<p>我们在使用DAGMC的过程中，除了Trelis几何模型处理阶段有图形以外，我们还可以把meshtal的结果和几何一起展示出来。</p>
<p>要制作这种几何和数据结合的图，我们可以使用<a href="https://wci.llnl.gov/simulation/computer-codes/visit">visit</a>或者ParaView。<br>下面以Visit为例展示过程。</p>
<p>我们把几何文件和数据文件都转换为vtk格式，然后用visit就可以画图了。</p>
<h2 id="几何模型准备"><a href="#几何模型准备" class="headerlink" title="几何模型准备"></a>几何模型准备</h2><p>经过Trelis处理到处的geom.h5m文件可以使用MOAB的工具mbconvert将h5m文件转化为vtk文件。</p>
<p>不过我们不能直接使用那个用于输运计算的几何文件。因为那个文件中存在一个graveyard，那个是我们添加在原本几何模型外围的中子计算截止区域的几何。我们不需要这个graveyard，需要在Trelis模型中去掉这部分，导出一个没有graveyard的几何文件。</p>
<h2 id="数据文件准备"><a href="#数据文件准备" class="headerlink" title="数据文件准备"></a>数据文件准备</h2><p>我们得到meshtal或者OpenMC的state point文件后，可以通过PyNE这个工具来将其先转化为h5m文件，然后再通过mbconvert转化为vtk文件。</p>
<h3 id="meshtal数据写入h5m文件"><a href="#meshtal数据写入h5m文件" class="headerlink" title="meshtal数据写入h5m文件"></a>meshtal数据写入h5m文件</h3><p>比如一个包含fmesh4和fmesh14的meshtal文件，我们想画femsh4的图，可以通过下面的python脚本将这fmesh4的数据写入到h5m文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyne <span class="keyword">import</span> mcnp</span><br><span class="line"><span class="keyword">from</span> pyne.mesh <span class="keyword">import</span> MeshTally</span><br><span class="line"><span class="comment"># define data tag names, 4 set of data, their default names are</span></span><br><span class="line"><span class="comment"># neutron_result neutron_result_rel_error neutron_result_total neutron_result_total_rel_error</span></span><br><span class="line">tags=&#123;<span class="number">4</span>:[<span class="string">&quot;n_result&quot;</span>, <span class="string">&quot;n_rel_error&quot;</span>, <span class="string">&quot;n_total_result&quot;</span>, <span class="string">&quot;n_total_rel_error&quot;</span>],</span><br><span class="line">      <span class="number">14</span>:[<span class="string">&quot;n_result&quot;</span>, <span class="string">&quot;n_rel_error&quot;</span>, <span class="string">&quot;n_total_result&quot;</span>, <span class="string">&quot;n_total_rel_error&quot;</span>]&#125;</span><br><span class="line">meshtal = mcnp.Meshtal(<span class="string">&quot;meshtal&quot;</span>, tags=tags)</span><br><span class="line">meshtally = meshtal.tally[<span class="number">4</span>]</span><br><span class="line">meshtally.write_hdf5(<span class="string">&quot;meshtally4.h5m&quot;</span>, write_mats=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="state-point数据写入h5m文件"><a href="#state-point数据写入h5m文件" class="headerlink" title="state point数据写入h5m文件"></a>state point数据写入h5m文件</h3><p>Assuming that there is a mesh tally with ID 4, mesh id 1.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyne.mesh <span class="keyword">import</span> MeshTally</span><br><span class="line"><span class="keyword">from</span> pyne <span class="keyword">import</span> openmc_utils</span><br><span class="line">tags=&#123;<span class="number">4</span>:[<span class="string">&quot;n_result&quot;</span>, <span class="string">&quot;n_rel_error&quot;</span>, <span class="string">&quot;n_total_result&quot;</span>, <span class="string">&quot;n_total_rel_error&quot;</span>]&#125;</span><br><span class="line">sp = <span class="string">&quot;statepoint.xx.h5&quot;</span></span><br><span class="line">meshtally = openmc_utils.create_meshtally(sp, tally_id=<span class="number">4</span>, mesh_id=<span class="number">1</span>, tag_names=tags[<span class="number">4</span>]&#125;</span><br><span class="line">meshtally.write_hdf5(<span class="string">&quot;meshtally4.h5m&quot;</span>, write_mats=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="将h5m文件转化为vtk文件"><a href="#将h5m文件转化为vtk文件" class="headerlink" title="将h5m文件转化为vtk文件"></a>将h5m文件转化为vtk文件</h3><p>使用下面的命令将h5m文件转化为vtk文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mbconvert meshtally4.h5m meshtally4.vtk</span><br></pre></td></tr></table></figure>

<h2 id="visit绘图"><a href="#visit绘图" class="headerlink" title="visit绘图"></a>visit绘图</h2><h3 id="单独绘制几何"><a href="#单独绘制几何" class="headerlink" title="单独绘制几何"></a>单独绘制几何</h3><p>运行visit -&gt; File -&gt; Open file -&gt; 选择几何vtk文件 -&gt; 在窗口找到Plots子窗口 -&gt; 点击Add下单菜单 -&gt; 选择mesh -&gt; 选择mesh -&gt; 窗口出现一个对象 -&gt; 点击Plots子窗口Draw按钮 </p>
<p>按照上述流程几何显示出几何文件的网格结构图。</p>
<p>下图是<a href="https://zxkjack123.github.io/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/">计算停机剂量的例子</a>中的几何图形：<br><img src="https://i.imgur.com/pudCxoD.png" alt="几何图"></p>
<h3 id="单独绘制数据"><a href="#单独绘制数据" class="headerlink" title="单独绘制数据"></a>单独绘制数据</h3><p>与绘制几何类似：</p>
<p>运行visit -&gt; File -&gt; Open file -&gt; 选择数据vtk文件 -&gt; 在窗口找到Plots子窗口 -&gt; 点击Add下单菜单 -&gt; 选择pseudocolor -&gt; 选择相应的tally tag -&gt; 窗口出现一个对象 -&gt; 点击Plots子窗口Draw按钮 </p>
<p><img src="https://i.imgur.com/Wg8jHmn.png" alt="剂量图"></p>
<h3 id="同时绘制几何和数据"><a href="#同时绘制几何和数据" class="headerlink" title="同时绘制几何和数据"></a>同时绘制几何和数据</h3><p>同时绘制几何和数据的操作其实就是将几何和图像同时话在同一个图上，操作流程就是上述两者的结合。</p>
<p><img src="https://i.imgur.com/28Ko0SN.png" alt="几何加图"></p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>DAGMC</tag>
        <tag>Trelis</tag>
        <tag>visit</tag>
        <tag>visualization</tag>
        <tag>geometry</tag>
        <tag>data</tag>
      </tags>
  </entry>
  <entry>
    <title>安装DAGMC</title>
    <url>/2019/05/16/neutronics/dagmc-install/</url>
    <content><![CDATA[<h2 id="DAGMC简介"><a href="#DAGMC简介" class="headerlink" title="DAGMC简介"></a>DAGMC简介</h2><p><a href="https://svalinn.github.io/DAGMC/">DAGMC</a>是Direct Accelerated Geometry Monte Carlo的缩写，如其名字所示，DAGMC设计了一套方便高效的几何手段，用于蒙特卡罗方法的计算。DAGMC已经有了与MCNP5, MCNP6, Geant4, FLUKA, Tripoli4和Shift结合的相应工具。即使用DAGMC的几何处理部分，配合其他工具的物理计算部分代码，实现蒙特卡罗计算。</p>
<h2 id="DAGMC依赖软件安装"><a href="#DAGMC依赖软件安装" class="headerlink" title="DAGMC依赖软件安装"></a>DAGMC依赖软件安装</h2><p>DAGMC可以用来和PyNE配合来进行停机剂量计算工作。PyNE的安装可以参考<a href="https://zxkjack123.github.io/neutronics/pyne-developer-install/">PyNE的开发版本安装</a>。DAGMC的安装可以参考<a href="https://svalinn.github.io/DAGMC/install/index.html">官方安装指导</a>。DAGMC依赖于MOAB(5.1)。</p>
<h3 id="安装HDF5"><a href="#安装HDF5" class="headerlink" title="安装HDF5"></a>安装HDF5</h3><p>电脑中可能已经安装了HDF5了，我们可以通过下面的命令来检查它的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -s libhdf5-dev</span><br></pre></td></tr></table></figure>
<p>如果没有安装的话，通过下面的命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install hdf5-dev</span><br></pre></td></tr></table></figure>

<p>Install MOAB5.1 as described <a href="https://zxkjack123.github.io/neutronics/moab-install/">here</a>.</p>
<h3 id="安装MPI"><a href="#安装MPI" class="headerlink" title="安装MPI"></a>安装MPI</h3><p>电脑如果还没有安装MPI的话，推荐安装openmpi:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudp apt install openmpi-bin libopenmpi-dev</span><br></pre></td></tr></table></figure>
<p><strong>NOTE</strong>:在服务器上测试发现，OpenMPI 4.0.2和OpenMPI 3.1.4和当前版本的并行DAGMC不兼容，可以编译成功，但运行时会出现Segmentation fault。因此，在服务器上推荐使用MPICH (3.3.1)。</p>
<h2 id="安装DAGMC"><a href="#安装DAGMC" class="headerlink" title="安装DAGMC"></a>安装DAGMC</h2><p>完成HDF5和MOAB5.1的安装后，我们可以安装DAGMC了。</p>
<p>假设我们要把DAGMC安装在$HOME/opt/DAGMC文件夹下，可以按照下面的步骤进行。</p>
<h3 id="获取DAGMC源代码"><a href="#获取DAGMC源代码" class="headerlink" title="获取DAGMC源代码"></a>获取DAGMC源代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/opt</span><br><span class="line">mkdir DAGMC</span><br><span class="line"><span class="built_in">cd</span> DAGMC</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/svalinn/DAGMC</span><br><span class="line"><span class="comment"># 此处会在DAGMC文件夹下再生成一个DAGMC文件夹-&gt; DAGMC/DAGMC</span></span><br><span class="line"><span class="built_in">cd</span> DAGMC</span><br><span class="line">git checkout develop</span><br></pre></td></tr></table></figure>
<h3 id="安装DAGMC-1"><a href="#安装DAGMC-1" class="headerlink" title="安装DAGMC"></a>安装DAGMC</h3><p><strong>这个步骤需要相应的物理计算部分的源代码</strong>。请参考<a href="https://svalinn.github.io/DAGMC/install/dagmc.html">官方文档</a>选择相应版本执行后续安装步骤。<br>下面以安装DAG-MCNP v1.xx为例说明安装过程</p>
<h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mcnp/mcnp5</span><br><span class="line">cp -r &lt;path_to_dvd&gt;/MCNP5/Source .</span><br><span class="line">chmod -R u+rw Source</span><br><span class="line">patch -p0 &lt; patch/mcnpxxx.patch</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/opt/DAGMC/DAGMC</span><br><span class="line">mkdir bld</span><br><span class="line"><span class="built_in">cd</span> bld</span><br><span class="line">cmake ../. -DBUILD_MCNP5=ON -DBUILD_MCNP_MPI=ON -DCMAKE_INSTALL_PREFIX=<span class="variable">$HOME</span>/opt/DAGMC -DHDF5_LIBRARIES=/usr/lib/x86_64-linux-gnu/hdf5/serial/lib -DHDF5_INCLUDE_DIRS=/usr/lib/x86_64-linux-gnu/hdf5/serial/include -DMCNP5_DATAPATH=<span class="variable">$HOME</span>/opt/MCNPDATA -DMOAB_DIR=<span class="variable">$HOME</span>/opt/MOAB5.1</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="添加路径到-bashrc"><a href="#添加路径到-bashrc" class="headerlink" title="添加路径到~/.bashrc"></a>添加路径到~/.bashrc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:$HOME&#x2F;opt&#x2F;DAGMC&#x2F;bin</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:$HOME&#x2F;DAGMC&#x2F;lib</span><br></pre></td></tr></table></figure>

<h2 id="编译带用于R2S的源子程序的DAGMC"><a href="#编译带用于R2S的源子程序的DAGMC" class="headerlink" title="编译带用于R2S的源子程序的DAGMC"></a>编译带用于R2S的源子程序的DAGMC</h2><p>上面的步骤是编译DAGMC的通用流程。但是当我们需要配合PyNE进行R2S计算的DAGMC时，需要修改源子程序，修改及其编译说明可以参考<a href="http://pyne.io/usersguide/source_sampling.html#source-sampling-in-mcnp5">官方文档</a>。</p>
<p>如果是第一次安装DAGMC，想直接安装配合PyNE的DAGMC，那么需要上述安装步骤的<strong>patch之后配置之前</strong>加入如下步骤：</p>
<ol>
<li>Navigate to the folder MCNP5/Source/src.</li>
<li>Soft-link the following files into this folder:<ul>
<li>pyne/src/source_sampling.cpp</li>
<li>pyne/src/source_sampling.h</li>
<li>pyne/src/measure.cpp</li>
<li>pyne/src/measure.h</li>
</ul>
</li>
<li>Remove the pre-existing empty source.F90 file.</li>
<li>Soft-link pyne/share/source.F90.</li>
<li>Open the file MCNP/Source/src/FILE.list.</li>
<li>Edit file, add CXX_SRC under C_SRC to include the additional source files. It should look like “CXX_SRC := measure.cpp source_sampling.cpp”.</li>
</ol>
<p>然后接着配置之后的步骤进行即可。</p>
<p>如果是已经安装过DAGMC，则可以省去patch及patch之前的步骤，直接使用上面的修改，然后进行配置编译即可。</p>
<p><strong>备注</strong>： 进行上述修改步骤时，必须注意两点：</p>
<ol>
<li>确保系统路径中的MOAB是5.1版本</li>
<li>确保pyne的branch是你需要的branch</li>
</ol>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>install</tag>
        <tag>DAGMC</tag>
      </tags>
  </entry>
  <entry>
    <title>留学感悟之科研环境</title>
    <url>/2019/05/16/neutronics/imporve-aspects-learned-from-studying-abroad/</url>
    <content><![CDATA[<p>我2017年10月初到的美国，到现在已经5个月了。这里的生活和科研环境都和国内差别很大。国别不同，文化不同，环境差异再所难免，不可能做到国内外一样。文化习惯方面的差异没有优劣之分，各自有其相适应的环境。但在科研方面还是有一些地方，我认为美国这边比国内好，而且国内也可以复制学习的。</p>
<p>下面是我想到的几点可以学习的方面：</p>
<ul>
<li>个人层面<ul>
<li>科研记录与版本控制</li>
<li>编程及数据处理</li>
</ul>
</li>
<li>团队层面<ul>
<li>交流工具</li>
<li>项目文档管理</li>
</ul>
</li>
</ul>
<h2 id="个人层面"><a href="#个人层面" class="headerlink" title="个人层面"></a>个人层面</h2><h3 id="科研记录与版本控制"><a href="#科研记录与版本控制" class="headerlink" title="科研记录与版本控制"></a>科研记录与版本控制</h3><p>科研工作面对的问题，往往有很多的步骤，非常多的细节，而且有时候，有一些参数我们并不知道。我们需要经常性的猜测/测试/对比/修改/推倒重来。因此，除了要提前做好规划以外，做好记录也是非常重要的。如果不把做过的东西详细的记录下来，过一段时间后就不知道自己曾经做过什么，当初是怎么做的了。因此，在进行一个项目的过程中，使用能够保留过程中每一个版本的细节的工具非常必要。</p>
<h4 id="主要困难"><a href="#主要困难" class="headerlink" title="主要困难"></a>主要困难</h4><p>记录并不是一件简单的事情，因为：</p>
<ul>
<li>任何一个测试也都包含很多参数，我们没法记录全部的内容，只能记录其中的重点参数。这样其实丢失了其他的细节。</li>
<li>不同的阶段会做各种各样的测试，需要保留非常多的版本，有时还会出现命名的冲突。</li>
<li>一个修改涉及到多个文件时，由于各种原因（名称接近/数据类似等）非常容易出现失误。</li>
</ul>
<p>我对此深有体会。在做各种测试的时候，产生并保存了很多版本，由于文件多，处理过程多，非常容易犯错误，出现错误后又很难通过肉眼检查出来。</p>
<h4 id="现用方法"><a href="#现用方法" class="headerlink" title="现用方法"></a>现用方法</h4><p>国内常用Word文档来记录科研过程，用Word来写论文。过程中会产生非常多的版本，但是我们没办法非常方便的比较不同版本的区别。另外Word文档不方便在文档外全文搜索，导致过一段时间想找文档就不好找了。</p>
<h4 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h4><p>在美国这边大家都把自己的科研过程（从方案设计规划，模拟计算数据到写论文过程）用<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">git</a>配合github留存着。使用这套工具，只需要一套文件，不需要复制/另存/重命名多个版本就可以保留所有过程的细节。利用这套工具可以很方便的：</p>
<ul>
<li>创建分支：一个分支就是一个版本，可以方便的查看任意版本的所有细节</li>
<li>比较分支差异：可以非常方便的查看不同版本之间的差异</li>
<li>查看修改：这一次修改了什么，也一目了然</li>
</ul>
<p>同时，需要注意，git+github可以只管的查看以文本格式保存的内容(常用的txt, dat, csv, tex, bib等)，但是不能查看和比较二进制保存的文件(如docx, xls, ppt等)。</p>
<p>因此，推荐使用能够以文本格式保存的文件来保存和记录科研过程及成果。</p>
<p>PS：如果用<a href="https://stackoverflow.com/questions/6188780/git-latex-workflow">git+LaTeX</a>写论文的话，那么从项目的开始到结束，所有的细节全部都能够保留并方便查看。</p>
<h3 id="编程及数据处理"><a href="#编程及数据处理" class="headerlink" title="编程及数据处理"></a>编程及数据处理</h3><p>科研过程中伴随着大量的数据文件，输入文件，输出文件，后处理等等。很多时候，特别是对某些参数做扫描式对比的时候，会需要对相同格式的数据进行相同的处理步骤。也有些时候我们需要处理的数据量很大，或者处理步骤比较繁琐。总而言之，我们需要处理并维护大量的数据。</p>
<h4 id="现用方法-1"><a href="#现用方法-1" class="headerlink" title="现用方法"></a>现用方法</h4><p>现在课题组还常用excel来保存数据。常见的数据处理流程：(从word文件/excel复制参数到输入文件)-&gt;计算，得到输出文件-&gt;拷贝结果到excel保存数据-&gt;拷贝数据到word文档写报告。</p>
<p>这样的流程有非常明显的弊端：</p>
<ul>
<li>耗时多</li>
<li>容易出错</li>
<li>检查错误很困难</li>
<li>只能对数据进行简单处理</li>
</ul>
<h4 id="推荐方法"><a href="#推荐方法" class="headerlink" title="推荐方法"></a>推荐方法</h4><p>使用简单的程序来自动化处理各类数据能够在很多程度上简化数据处理过程，减少错误的发生，更容易检查错误，而且能够对数据进行更为复杂的处理。</p>
<p>国外这边的课题组，编程基本是每个研究生必备的技能。现在python在这里非常流行，它简单易学，处理数据能力强，还能方便的用数据绘图可视化，配合git+github也能方便的进行数据备份，检查，非常方便。</p>
<h2 id="团队层面"><a href="#团队层面" class="headerlink" title="团队层面"></a>团队层面</h2><h3 id="交流工具"><a href="#交流工具" class="headerlink" title="交流工具"></a>交流工具</h3><h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><p>国内科研人员的交流工具主要是QQ，微信和电子邮件。但这几个都有各自的缺点。QQ和微信没办法永久保留文件。邮件交流互动性和及时性比较差，文件大小也有明显限制。</p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>科研人员交流，具有以下特定：</p>
<ul>
<li>能够双人/多人交流</li>
<li>小组，一个人会有不同的小组</li>
<li>经常需要传递文件和图片</li>
<li>文件/文字的要长期保留</li>
<li>文件内容需要多人能够修改/评注</li>
<li>要能通过关键词进行文字/文件的查询</li>
<li>团队或小组日程/通知功能</li>
</ul>
<h4 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h4><p>Paul课题组使用<a href="https://slack.com/">Slack</a>+<a href="https://www.google.com/drive/">google drive</a>的方式进行团队交流。Slack是一款交流工具，可以直接在网页上/电脑上/手机上使用。具备上面所说的功能，通过把文件放在drive里，通过链接放入文件。</p>
<p>国内不能用google drive，但可以使用其他类似的代替品。</p>
<p>国内也有专门的协作配合的软件，把科研交流集中起来，能够更方便团队协作。</p>
<p>但我并没有对国内的这些工具进行过调研，尚不清楚最好的方案。</p>
<h3 id="项目文档管理"><a href="#项目文档管理" class="headerlink" title="项目文档管理"></a>项目文档管理</h3><p>进行一个科研项目的过程中，会产生非常多的文档。这些文档分布在课题组的各个成员手中，由课题组成员创建与更新。这些文档作为项目过程中的重要资料，也需要记录与管理。</p>
<h4 id="现状-1"><a href="#现状-1" class="headerlink" title="现状"></a>现状</h4><p>目前，课题组对于项目文档的管理存在一些缺陷。</p>
<ul>
<li>一个课题组成员创建了文档，里面包含了一些更新的设计参数和方案等内容。但其他成员并不知道，依然在使用比较旧的版本。在设计不断迭代更新的过程中，不同课题组的成员经常使用了不同的参数。</li>
<li>项目设计报告，论文等基本都是在结题的时候收集整理。对于时间跨度较长的项目，很多报告可能存在找不到了，有些报告是最新版还是已经淘汰的版本不明确。</li>
<li>查看组内其他人写的文档不够方便。有时不知道自己的师兄/师姐以前是否有相同或相似内容的报告。不知道自己用的一些参数是否有在其他报告中有更新。</li>
<li>文档之间相互引用非常不方便。一个项目往往涉及到多个方面，某个组员A做的工作，他的输入参数和设计是来自于另一个组员B，他的结果可能会被组员C使用。但是现在我们课题组的相互引用仅限于论文的引用。但是在设计工作中使用的设计参数很可能相对于论文的内容是有更新的。</li>
</ul>
<h4 id="项目文档管理建议"><a href="#项目文档管理建议" class="headerlink" title="项目文档管理建议"></a>项目文档管理建议</h4><p>建议项目文档：</p>
<ul>
<li>集中管理。Paul课题组是将文档放到google drive，然后根据子方向分类。所有人都能看到全部的文档。 </li>
<li>更新时组内审核。更新报告文档时，还需要相关的上下游同学确认参数。</li>
<li>引用和更新通知。建议在文档中加入引用和被引用内容。引用其他文档的数据和参数时，在本文档中著名哪些参数是引用自哪篇文档；同时在被引用文档中加入说明，说明被引用文档的哪些参数被另一篇文档引用。这样，当一个作者更新某you篇文档时，他就可以通知那些引用这篇文档的人文档有更新。</li>
</ul>
<p>这样管理文档的话，相信可以使得大家对其他方向的同学的工作有更多的了解，文档的更新也能更加方便，避免了课题组不同同学使用不同参数的情况。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>上面写到的一些建议，是基于美国Paul课题组和国内课题组的情况，结合我自身的感受想到的内容。 这里只涉及了科研工具方面的内容。美国的研究生培养模式还有很多其他方面与国内差异很大，但是我现在对那些差异也还没有很好的了解与理解，因此没有提及。</p>
<p>另外，我个人认为比较好的改进，其他同学可能并不觉得好。做出改变也需要花费时间和经历，还是需要根据实际情况与效果做决定。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>留学</tag>
        <tag>科研</tag>
        <tag>感悟</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyNE制作材料库</title>
    <url>/2019/05/16/neutronics/make-pyne-material-lib/</url>
    <content><![CDATA[<p>在使用DAGMC进行输运计算的时候，其几何文件中，已经通过trelis定义了材料名称和密度，但并没有定义这些材料的具体组成成分。在进行计算之前，需要制作相应的材料数据库，把材料数据写入到h5文件中，再跟几何文件整合起来。这样，DAGMC就知道这个栅元的材料成分了。</p>
<p>针对不同的问题规模，可以采用不同的形式来制作材料库。比如简单的问题，只需要几种不复杂的材料时，我们可以直接在python脚本内编辑材料成分，然后写入材料库。对于涉及材料比较多的问题，可以通过提前准备材料数据库文件（即将各种材料以一定格式提前保存在电脑中，再通过python脚本读取材料文件格式化的制作材料数据库）。或者直接提前准备包含自己会用到的h5材料数据库。</p>
<h2 id="简单数据库制作"><a href="#简单数据库制作" class="headerlink" title="简单数据库制作"></a>简单数据库制作</h2><p>对于几何简单，涉及材料较少(少于5个材料)的计算任务，直接在python脚本中调用pyne的材料库写就行了。</p>
<p>定义材料时，我们需要制定材料的以下信息：</p>
<ol>
<li>名称：和trelis中group name对应的字符串</li>
<li>密度：材料密度</li>
<li>核素组成：材料的具体成分</li>
</ol>
<p>我们可以用多种方式来定义材料的组成成分，详细说明可以参考<a href="http://pyne.io/tutorial/02.html">官方文档</a>。比如下面三种常用方式：</p>
<ol>
<li>通过核素的核子密度比例(atom fraction)，可以不归一化</li>
<li>通过核素的质量份额(mass fraction)，可以不归一化</li>
<li>通过元素的质量份额，然后expand元素</li>
</ol>
<p>比如下面的文件定义了<strong>Water</strong>，<strong>BoronCarbide</strong>和<strong>Steel</strong>三种材料并将材料写入到材料库<strong>example_material_lib.h5</strong>中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> pyne.material <span class="keyword">import</span> Material, MaterialLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Welcome!&quot;</span></span><br><span class="line">mat_lib = MaterialLibrary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># define a simple water since O-18 not in mcnp xs libs</span></span><br><span class="line">watervec = &#123;<span class="number">10010</span>:<span class="number">2</span>,<span class="number">80160</span>:<span class="number">1</span>&#125; <span class="comment"># simple water</span></span><br><span class="line">water = Material()</span><br><span class="line">water.density = <span class="number">1.0</span></span><br><span class="line">water.from_atom_frac(watervec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define b4c</span></span><br><span class="line">b4c = Material()</span><br><span class="line">b4c.from_atom_frac(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">b4c.density = <span class="number">2.54</span></span><br><span class="line">b4c = b4c.expand_elements()</span><br><span class="line"></span><br><span class="line"><span class="comment"># define steel</span></span><br><span class="line">steel = Material(&#123;<span class="string">&#x27;Fe&#x27;</span>:<span class="number">0.655</span>,<span class="string">&#x27;Cr&#x27;</span>:<span class="number">0.170</span>,<span class="string">&#x27;Ni&#x27;</span>:<span class="number">0.120</span>,<span class="string">&#x27;Mo&#x27;</span>: <span class="number">0.025</span>,<span class="string">&#x27;Mn&#x27;</span>: <span class="number">0.02</span>, <span class="string">&#x27;Si&#x27;</span>:<span class="number">.01</span>&#125;,density=<span class="number">7.92</span>)</span><br><span class="line">steel = steel.expand_elements()</span><br><span class="line"></span><br><span class="line"><span class="comment"># put materials into mat_lib</span></span><br><span class="line">mat_lib[<span class="string">&quot;Water&quot;</span>] = water</span><br><span class="line">mat_lib[<span class="string">&quot;BoronCarbide&quot;</span>] = b4c</span><br><span class="line">mat_lib[<span class="string">&quot;Steel&quot;</span>] = steel</span><br><span class="line"></span><br><span class="line"><span class="comment"># write into hdf5 file</span></span><br><span class="line">mat_lib.write_hdf5(<span class="string">&quot;example_material_lib.h5&quot;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;All done!&quot;</span></span><br></pre></td></tr></table></figure>

<p>此例子中，定义<strong>Water</strong>时用材料的核素个数比例来定义的材料。在定义<strong>BoronCarbide</strong>时使用材料的元素比例来定义。在定义<strong>Steel</strong>时使用的材料的元素质量份额来定义。</p>
<h2 id="格式化数据库制作"><a href="#格式化数据库制作" class="headerlink" title="格式化数据库制作"></a>格式化数据库制作</h2><p>对于涉及材料比较多，材料成分比较复杂的模型，直接用python脚本来定义每种材料就会非常麻烦了，而且不利于材料的更新，维护与阅读。</p>
<p>对于原本是使用其他蒙特卡罗软件的人，可能已经为其使用的软件准备了一套材料数据库，要是让他们再为其他软件单独准备一套数据库，工作量又大，又容易出错。这时使用脚本将其他格式的材料转换为pyne的材料定义方式是更好的选择。</p>
<p>因此，格式化数据库制作的过程，就是指将原本以其他媒介（如excel, 文本文件，hdf5文件等）以其他格式（如成分表格，MCNP格式等）存放的材料信息转化为pyne识别的，可以用于DAGMC计算的材料数据库的过程。</p>
<p>万变不离其宗，不论是什么媒介什么格式的方式，都是通过读取材料的名称，密度和材料组成成分进而根据pyne的格式来定义材料数据库。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>material</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>MOAB for both PyNE and DAGMC</title>
    <url>/2019/05/16/neutronics/moab-install/</url>
    <content><![CDATA[<h2 id="Install-MOAB5-1"><a href="#Install-MOAB5-1" class="headerlink" title="Install MOAB5.1"></a>Install MOAB5.1</h2><p>MOAB is used in both PyNE (previously based on MOAB4.9.1) and DAGMC (based on the latest version of MOAB). However, users have to install both MOAB4.9.1 and MOAB5.0 on the same machine if they want to use both PyNE and DAGMC. Fortunately, in the latest update that deploy pymoab interface to replace pytabs enables us to use the latest version of MOAB (MOAB5.1) for PyNE. Therefore, we need to install just MOAB5.1 now.</p>
<p>The following commands provide a example of how to install MOAB5.1 (assuming that we want to install the MOAB5.1 in $HOME/opt/MOAB5.1):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/opt</span><br><span class="line">mkdir MOAB5.1</span><br><span class="line"><span class="built_in">cd</span> MOAB5.1</span><br><span class="line"><span class="built_in">export</span> MOAB_DIR=<span class="variable">$HOME</span>/opt/MOAB5.1</span><br><span class="line">git <span class="built_in">clone</span> --branch Version5.1.0 --single-branch https://bitbucket.org/fathomteam/moab moab-repo</span><br><span class="line"><span class="built_in">cd</span> moab-repo</span><br><span class="line">autoreconf -<span class="keyword">fi</span></span><br><span class="line">mkdir -p build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">../configure --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-pymoab --with-hdf5=/usr/lib/x86_64-linux-gnu/hdf5/serial --prefix=<span class="variable">$MOAB_DIR</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LD_LIBRARY_PATH=<span class="variable">$MOAB_DIR</span>/lib:\$LD_LIBRARY_PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LIBRARY_PATH=<span class="variable">$MOAB_DIR</span>/lib:\$LIBRARY_PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export CPLUS_INCLUDE_PATH=<span class="variable">$MOAB_DIR</span>/include:\$CPLUS_INCLUDE_PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export C_INCLUDE_PATH=<span class="variable">$MOAB_DIR</span>/include:\$C_INCLUDE_PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PYTHONPATH=<span class="variable">$HOME</span>/opt/MOAB5.1/lib/python2.7/site-packages:<span class="variable">$PYTHONPATH</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>neutronics</tag>
        <tag>PyNE</tag>
        <tag>DAGMC</tag>
        <tag>MOAB</tag>
      </tags>
  </entry>
  <entry>
    <title>中子输运相关软件</title>
    <url>/2019/05/16/neutronics/neutron-transport-code/</url>
    <content><![CDATA[<p>我的专业是核能科学与工程，这个专业做实验代价很高，而且现在也有一些比较可靠的模拟计算工具。因此很多时候都要用到模拟计算，不论是单独计算还是作为实验的预分析。</p>
<p>很多模拟计算的核心，是计算中子通量。这个需要进行中子输运计算。中子输运计算分两类，一类是确定论的计算，就是通过解方程的方法计算，另一类是蒙特卡罗方法计算。</p>
<p>两种计算方法各有优缺点。我接触比较多的聚变领域，由于几何模型非常复杂，用确定论方法计算不够准确，一般都是用蒙特卡罗方法计算。</p>
<p>蒙特卡罗中子输运软件中，最出名的就是MCNP了。不过这个软件对中国是封锁的，中国人是没法使用的。（当然也有特例，原子能院可以合法使用MNCP4C，不过MCNP现在的版本是MCNP6了，4C是非常旧的版本了）</p>
<p>我作为一个平时主要做核分析模拟计算的研究生，非常尴尬，我的博士研究可以受限制很严重。如果不能用其他的可靠的工具代替MCNP，现在我的方向就是一条没有前途的路。国内的确需要这方面的人来做相应的工作，但这些工作难发文章，难以升迁。我现在是博士第三年，现在改变自己的课题或是方向，代价太高。现在在脚镣下跳舞是不得已而为之。但当我博士毕业之后，如果还继续读个博后之类的继续走科研道路的话，绝对不能再在这条路上一条道走到黑了。</p>
<p>那么，我就需要了解一下现在的一些中子输运软件了。Quora上有一个<a href="https://www.quora.com/What-are-some-nuclear-reactor-simulation-codes">问题</a>已经给出了非常简洁明了的答案。搬运过来并做一些补充：</p>
<ul>
<li>Probabilistic codes<ul>
<li><a href="https://github.com/mit-crpg/openmc">OpenMC</a> - An MIT developed open source Monte Carlo code. It is a constructive solid geometry, continuous-energy transport code that uses HDF5 format cross sections.</li>
<li><a href="https://mcnp.lanl.gov/">MCNP</a> - A LANL developed Monte Carlo code for general radiation transport</li>
<li><a href="http://www.oecd-nea.org/tools/abstract/detail/ccc-0436/">KENO</a> - An ORNL developed Monte Carlo code for criticality analysis</li>
<li><a href="http://www.answerssoftwareservice.com/mcbend/">MCBEND</a> - An ANSWERS Software Service developed Monte Carlo code for general radiation transport</li>
<li><a href="http://montecarlo.vtt.fi/">Serpent</a> - A Finnish developed Monte Carlo neutron transport code</li>
<li><a href="http://www.oecd-nea.org/tools/abstract/detail/nea-1716/">TRIPOLI</a> - 3D general purpose continuous energy Monte Carlo Transport code developed at CEA, France. TRIPOLI-4 solves fixed source as well as eigenvalue problems.</li>
</ul>
</li>
<li>Deterministic codes<ul>
<li><a href="https://www.vareximaging.com/products/attila-software">Attila</a> - A commercial transport code</li>
<li><a href="http://www.polymtl.ca/merlin/downloads/IGE294.pdf">DRAGON</a> - An open-source lattice physics code</li>
<li>PHOENIX/ANC - A proprietary lattice-physics and global diffusion code suite from Westinghouse Electric</li>
<li>PARTISN - A LANL developed transport code based on the discrete ordinates method</li>
<li>NEWT - An ORNL developed 2-D SN code</li>
<li>DIF3D/VARIANT - An Argonne National Laboratory developed 3-D code originally developed for fast reactors</li>
<li>DENOVO - A massively parallel transport code under development by ORNL</li>
<li>DANTSYS</li>
<li>RAMA - A proprietary 3D method of characteristics code with arbitrary geometry modeling, developed for EPRI byTransWare Enterprises Inc.</li>
<li>RAPTOR-M3G - A proprietary parallel radiation transport code developed by Westinghouse Electric Company</li>
<li>OpenMOC - An MIT developed open source parallel method of characteristics code</li>
<li>MPACT - A parallel 3D method of characteristics code under development by the University of Michigan</li>
<li>DORT - Discrete Ordinates Transport</li>
</ul>
</li>
</ul>
<p>替代软件不一定要计算最准确，但一定要是中国人可以免费下载后者收费购买获取的软件，最好是开源软件。</p>
<p>MCNP是肯定没戏的了，对中国人限制摆在这里。</p>
<p>目前SERPENT的<a href="http://www.oecd-nea.org/dbprog/pretlo.cgi?country=CHINA&submit=Display">中国获取单位</a>中显示有北京和成都的几家单位，可以尝试通过这个渠道获取。</p>
<p>另外，OpenMC是开源软件，现在还在开发完善过程中。<a href="https://www.sciencedirect.com/science/article/pii/S030645491400379X?via=ihub">这篇文章</a>介绍了OpenMC的总体情况</p>
<ol>
<li>已经支持中子输运计算，支持光子输运计算。</li>
<li>现在只支持固定源和k-value计算模式，不支持次临界源计算</li>
<li>现在只支持2阶曲面，不支持4阶曲面（聚变需要4阶曲面）</li>
</ol>
<p>但是OpenMC还是在不断更新发展中，而且是开源的，现在已经添加了DAG-OpenMC支持，是一个非常好的选择。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>neutron</tag>
        <tag>neutron transport</tag>
      </tags>
  </entry>
  <entry>
    <title>On-the-flux GVR使用方法</title>
    <url>/2019/12/10/neutronics/on-the-flux-gvr/</url>
    <content><![CDATA[<p>在蒙卡输运计算中，减方差方法对于屏蔽问题时非常重要的。这篇博客介绍了课题组博士生郑俞等开发的一种on-the-flux全局减方差技术[1]的使用方法。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>该方法修改了部分MCNP源代码，并添加了7个源文件，需要重新编译。课题组已经成功在MCNP5及DAG-MCNP5上成功编译该代码。本博客不涉及该代码的获取及编译过程。<br>为了不混淆可执行代码名称，下面我们用mcnp5.mpi指代不带GVR的可执行文件，用mcnp5_gvr.mpi指代GVR版代码。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用该方法，主要有以下几步：</p>
<ul>
<li>产生初始权窗</li>
<li>使用GVR优化权窗</li>
<li>使用优化后的权窗进行计算</li>
</ul>
<p>下面以例题的形式来展示具体过程。我们用一个非常简单的几何，来针对某一个网格区域产生一个初始的(两群）权窗，然后用GVR优化这个权窗，最后使用优化后的全长进行计算。例题的输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C example for on-the-flux GVR</span><br><span class="line">C cell cards</span><br><span class="line">1 1 -1.0 -1 imp:n&#x3D;1</span><br><span class="line">2 0      1 -2 imp:n&#x3D;1</span><br><span class="line">3 0      2 imp:n&#x3D;0</span><br><span class="line"></span><br><span class="line">C surface cards</span><br><span class="line">1 so 10</span><br><span class="line">2 so 20</span><br><span class="line"></span><br><span class="line">C data crads</span><br><span class="line">m1</span><br><span class="line">      1001 -0.11</span><br><span class="line">      8016 -0.89</span><br><span class="line">sdef</span><br><span class="line">nps 1000</span><br><span class="line">C tally</span><br><span class="line">f4:n 1</span><br><span class="line">wwg   4  0  0  j j j j 0</span><br><span class="line">wwge:n 0.1 20</span><br><span class="line">mesh origin&#x3D;-1 -1 -1 geom&#x3D;xyz ref&#x3D;0.0 0.0 0.0</span><br><span class="line">     imesh&#x3D;1 iints&#x3D;10</span><br><span class="line">     jmesh&#x3D;1 jints&#x3D;10</span><br><span class="line">     kmesh&#x3D;1 kints&#x3D;10</span><br><span class="line">C wwp:n 5.0 J 5 0 -0.5</span><br><span class="line">print</span><br></pre></td></tr></table></figure>
<h4 id="产生初始权窗"><a href="#产生初始权窗" class="headerlink" title="产生初始权窗"></a>产生初始权窗</h4><p>首先用不带GVR的代码进行一次初始计算，产生一个初始化权窗。这个权窗是否精细准确不重要，只需要格式正确即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mcnp5.mpi i=input</span><br></pre></td></tr></table></figure>
<p>这个过程生成的wwout就是我们需要的初始权窗文件，将它重命名为<code>wwinp1</code>备用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv wwout wwinp1</span><br></pre></td></tr></table></figure>

<h4 id="使用GVR代码优化权窗"><a href="#使用GVR代码优化权窗" class="headerlink" title="使用GVR代码优化权窗"></a>使用GVR代码优化权窗</h4><p>现在，我们使用带GVR的代码对初始权窗进行优化。</p>
<ul>
<li>将输入文件中的产生权窗的部分注释掉，使用<code>wwp</code></li>
<li><strong>创建一个和权窗使用的网格对应的fmesh，注意网格和能群需要与权窗一致</strong></li>
<li>暂时只支持NPS设定history数目，不支持CTME为终止计算条件</li>
</ul>
<p>改造后的输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C example for on-the-flux GVR</span><br><span class="line">C cell cards</span><br><span class="line">1 1 -1.0 -1 imp:n&#x3D;1</span><br><span class="line">2 0      1 -2 imp:n&#x3D;1</span><br><span class="line">3 0      2 imp:n&#x3D;0</span><br><span class="line"></span><br><span class="line">C surface cards</span><br><span class="line">1 so 10</span><br><span class="line">2 so 20</span><br><span class="line"></span><br><span class="line">C data cards</span><br><span class="line">m1</span><br><span class="line">      1001 -0.11</span><br><span class="line">      8016 -0.89</span><br><span class="line">sdef</span><br><span class="line">nps 1000</span><br><span class="line">C tally</span><br><span class="line">fmesh4:n origin&#x3D;-1 -1 -1 geom&#x3D;xyz</span><br><span class="line">         imesh&#x3D;1 iints&#x3D;10</span><br><span class="line">         jmesh&#x3D;1 jints&#x3D;10</span><br><span class="line">         kmesh&#x3D;1 kints&#x3D;10</span><br><span class="line">         emesh 0.1 20</span><br><span class="line">C wwg   4  0  0  j j j j 0</span><br><span class="line">C wwge:n 0.1 20</span><br><span class="line">C mesh origin&#x3D;-1 -1 -1 geom&#x3D;xyz ref&#x3D;0.0 0.0 0.0</span><br><span class="line">C      imesh&#x3D;1 iints&#x3D;10</span><br><span class="line">C      jmesh&#x3D;1 jints&#x3D;10</span><br><span class="line">C      kmesh&#x3D;1 kints&#x3D;10</span><br><span class="line">wwp:n 5.0 J 5 0 -0.5</span><br><span class="line">print</span><br></pre></td></tr></table></figure>
<p>运行代GVR可执行文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mcnp5_gvr.mpi i=input wwinp=wwinp1</span><br></pre></td></tr></table></figure>
<p>运行结束，将会生成下列文件：</p>
<ul>
<li>myMeshFlux</li>
<li>myRelativeError</li>
<li>originMeshFlux</li>
<li>weightwindow</li>
</ul>
<p>这里的<code>weightwindow</code>里面包含的数据，就是我们需要的权窗数据（但不包含权窗头文件）。我们将<code>wwinp1</code>的权窗头文件和<code>weightwindow</code>里的权窗数据组合起来，就是优化后的权窗文件了，命名它为<code>wwinp2</code>。</p>
<h4 id="实际计算"><a href="#实际计算" class="headerlink" title="实际计算"></a>实际计算</h4><p>在得到优化后的权窗文件后，我们可以使用不带GVR的代码，使用我们实际使用的网格和能群，进行输运计算了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mcnp5.mpi i=input wwinp=wwinp2</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>本博客仅用于以例题说明该方法的使用，对该方法的原理，实现过程及其中涉及的其他文件的作用不做任何说明。使用方法最终解释权归代码原作者所有。本博客如有错误，敬请指正。</p>
<p>[1] Zheng, Yu, Yuefeng Qiu, Peng Lu, Yixue Chen, Ulrich Fischer, and Songlin Liu. “An Improved On-the-Fly Global Variance Reduction Technique by Automatically Updating Weight Window Values for Monte Carlo Shielding Calculation.” Fusion Engineering and Design 147 (October 1, 2019): 111238. <a href="https://doi.org/10.1016/j.fusengdes.2019.06.011">https://doi.org/10.1016/j.fusengdes.2019.06.011</a>.</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>DAGMC</tag>
        <tag>GVR</tag>
        <tag>MCNP</tag>
        <tag>Variance reduction</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenMC第一个例子</title>
    <url>/2019/05/16/neutronics/openmc-first-example/</url>
    <content><![CDATA[<p>浏览过一遍OpenMC的<a href="http://openmc.readthedocs.io/en/stable/usersguide/index.html">User Guide</a>之后，对OpenMC的使用有了大致的初步了解。</p>
<p>和其他蒙卡程序类似，OpenMC也是需要定义几何，材料，源和tally以及其他信息。OpenMC用不同的xml文件来存放不同的信息。</p>
<p>OpenMC有一个鲜明的特性：Python API，OpenMC相关的所有内容都有Python API，这样我们可以直接通过python脚步来写相应的信息，然后直接使用导出函数转化成xml文件。这个API的存在对比较小规模的问题，或者几何不是非常复杂的问题是比较方便的。另外，数据后处理部分，OpenMC也有接口，画图和数据处理都很容易。</p>
<p>本文将通过一个非常简单的小例子来进行一次完整的OpenMC准备和计算流程。</p>
<h2 id="准备核数据"><a href="#准备核数据" class="headerlink" title="准备核数据"></a>准备核数据</h2><p>OpenMC计算时，会从<code>openmc.Materials</code>或者<code>materials.xml</code>中寻找材料数据库的位置，可以通过这两个方式定义材料库的位置。</p>
<p>不过如果我们只使用固定的材料库的话，每次都要特别制定材料数据库就太麻烦了。可以通过把材料数据库的路径添加到系统变量<code>OPENMC_CROSS_SECTIONS</code>中去。</p>
<h3 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h3><p><a href="http://openmc.readthedocs.io/en/stable/usersguide/cross_sections.html">这里</a>介绍了获取不同数据库的方法。这里我为了简便，使用最简单的NNDC的数据库。根据文档，我需要使用openmc-get-nndc-data这个脚本。</p>
<p>因为这个数据库完全是为OpenMC计算任务而存在，所以我把这个数据库放在<code>$HOME/opt/OpenMC/NNDC</code>下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/opt/OpenMC</span><br><span class="line">$ mkdir NNDC</span><br><span class="line">$ <span class="built_in">cd</span> NNDC</span><br><span class="line">$ openmc-get-nndc-data</span><br></pre></td></tr></table></figure>
<h3 id="添加路径"><a href="#添加路径" class="headerlink" title="添加路径"></a>添加路径</h3><p>然后把这个<code>OPENMC_CROSS_SECTIONS</code>的路径设为这个并添加到<code>$HOME/.bashrc</code>中去。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>为了简单，这里打算使用一个半径为10里面的球，这个球材质为密度为1.0的水，球外侧区域不考虑。</p>
<p>中子源就设为在原点的各项同性的1MeV的点源。 </p>
<h2 id="Python-API文件"><a href="#Python-API文件" class="headerlink" title="Python API文件"></a>Python API文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input.py</span></span><br><span class="line"><span class="keyword">import</span> openmc</span><br><span class="line"></span><br><span class="line"><span class="comment"># materials</span></span><br><span class="line">materials = openmc.Materials()</span><br><span class="line">water = openmc.Material()</span><br><span class="line">water.add_element(<span class="string">&#x27;H&#x27;</span>, <span class="number">0.667</span>, <span class="string">&#x27;ao&#x27;</span>)</span><br><span class="line">water.add_element(<span class="string">&#x27;O&#x27;</span>, <span class="number">0.334</span>, percent_type=<span class="string">&#x27;ao&#x27;</span>)</span><br><span class="line">water.set_density(<span class="string">&#x27;g/cm3&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">materials.append(water)</span><br><span class="line">materials.export_to_xml()</span><br><span class="line"></span><br><span class="line"><span class="comment"># geometry - surfaces</span></span><br><span class="line">sphere = openmc.Sphere(r=<span class="number">10.0</span>)</span><br><span class="line">sphere.boundary_type = <span class="string">&#x27;vacuum&#x27;</span></span><br><span class="line">inside_sphere = -sphere</span><br><span class="line">outside_sphere = +sphere</span><br><span class="line"><span class="comment"># geometry cells</span></span><br><span class="line">universe = openmc.Universe()</span><br><span class="line">moderator = openmc.Cell(fill=water, region=inside_sphere)</span><br><span class="line">universe.add_cell(moderator)</span><br><span class="line">geometry = openmc.Geometry(universe)</span><br><span class="line">geometry.export_to_xml(path=<span class="string">&#x27;geometry.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># run mode</span></span><br><span class="line">settings = openmc.Settings()</span><br><span class="line">settings.run_mode = <span class="string">&#x27;fixed source&#x27;</span></span><br><span class="line">settings.particles = <span class="number">10000</span></span><br><span class="line">settings.batches = <span class="number">10</span></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">settings.output = &#123;<span class="string">&#x27;tallies&#x27;</span>:<span class="literal">True</span>, <span class="string">&#x27;summary&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"><span class="comment"># source distribution</span></span><br><span class="line">source = openmc.Source()</span><br><span class="line">source.space = openmc.stats.Point(xyz=(<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>))</span><br><span class="line">source.angle = openmc.stats.Isotropic()</span><br><span class="line">source.energy = openmc.stats.Discrete([<span class="number">10.0e6</span>], [<span class="number">1.0</span>])</span><br><span class="line">settings.source = source</span><br><span class="line">settings.export_to_xml(path=<span class="string">&#x27;settings.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tallies</span></span><br><span class="line">cell_filter = openmc.CellFilter([moderator])</span><br><span class="line">tally1 = openmc.Tally()</span><br><span class="line">tally1.scores = [<span class="string">&#x27;flux&#x27;</span>]</span><br><span class="line">tally1.filters.append(cell_filter)</span><br><span class="line">tallies = openmc.Tallies()</span><br><span class="line">tallies.append(tally1)</span><br><span class="line">tallies.export_to_xml()</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot</span></span><br><span class="line">plot1 = openmc.Plot()</span><br><span class="line">plot1.basis = <span class="string">&#x27;xz&#x27;</span></span><br><span class="line">plot1.origin = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">plot1.width = (<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">plot1.pixels = (<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">plot1.color_by = <span class="string">&#x27;material&#x27;</span></span><br><span class="line">plots=openmc.Plots()</span><br><span class="line">plots.append(plot1)</span><br><span class="line">plots.export_to_xml()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run</span></span><br><span class="line">openmc.run()</span><br><span class="line">openmc.plot_geometry(output=<span class="literal">True</span>, openmc_exec=<span class="string">&#x27;openmc&#x27;</span>, cwd=<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="生成的几何图像"><a href="#生成的几何图像" class="headerlink" title="生成的几何图像"></a>生成的几何图像</h2><p>上面的脚本会生成一个叫做plot_10000.ppm，用convert命令转化为png格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ convert plot_10000.ppm plot_10000.png</span><br></pre></td></tr></table></figure>
<p>可以看到生成的几何图像的样子：<br><img src="https://i.imgur.com/xMIVxAh.png" alt="图像"></p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>OpenMC</tag>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>安装PyNE的开发版本</title>
    <url>/2019/05/16/neutronics/pyne-developer-install/</url>
    <content><![CDATA[<h2 id="PyNE简介"><a href="#PyNE简介" class="headerlink" title="PyNE简介"></a>PyNE简介</h2><p><a href="http://pyne.io/">PyNE</a> 是一系列计算核工程领域的工具组成的一个系统工具平台。</p>
<p>我是用PyNE配合DAGMC来进行停机剂量计算工作。现在正在进行一部分的改进工作，需要添加一部分代码，因此需要安装PyNE的开发版本。</p>
<h2 id="Ubuntu-18-04系统下安装PyNE开发者版本"><a href="#Ubuntu-18-04系统下安装PyNE开发者版本" class="headerlink" title="Ubuntu 18.04系统下安装PyNE开发者版本"></a>Ubuntu 18.04系统下安装PyNE开发者版本</h2><p>PyNE已经写了针对不同系统使用的<a href="https://github.com/pyne/install_scripts">安装脚本</a>。<br>里面的内容可供参考，这里记录了在我自己电脑上的安装流程。</p>
<h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><p>在<a href="https://github.com/pyne/install_scripts">pyne/install_scripts</a>下找到<a href="https://github.com/pyne/install_scripts/blob/master/ubuntu_16.04.sh"><strong>ubuntu_16.04.sh</strong></a>这个文件，其中的<em>package_list</em>就是安装pyne前需要安装的工具。使用下面的命令安装这些软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y --fix-missing software-properties-common wget git cmake vim \</span><br><span class="line">             build-essential python3-setuptools python3-pip python3-dev \</span><br><span class="line">             libpython3-dev python3-nose python3-matplotlib python3-tables \</span><br><span class="line">             python3-scipy python3-jinja2 \</span><br><span class="line">             libblas-dev liblapack-dev libhdf5-dev \</span><br><span class="line">             gfortran autoconf libtool hdf5-tools doxygen</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --force-reinstall sphinx cloud_sptheme prettytable sphinxcontrib_bibtex \</span><br><span class="line">             numpy tables numpydoc nbconvert nose cython future</span><br></pre></td></tr></table></figure>

<p>Install MOAB5.1 as described <a href="https://zxkjack123.github.io/neutronics/moab-install/">here</a>.</p>
<h3 id="安装PyNE"><a href="#安装PyNE" class="headerlink" title="安装PyNE"></a>安装PyNE</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export MOAB_DIR=$HOME/opt/MOAB5.1</span></span><br><span class="line">python setup.py install --user -- --moab <span class="variable">$HOME</span>/opt/MOAB5.1 --dagmc <span class="variable">$HOME</span>/opt/DAGMC</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$HOME</span>/.local/bin:\$PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LD_LIBRARY_PATH=<span class="variable">$HOME</span>/.local/lib:\$LD_LIBRARY_PATH&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="核数据"><a href="#核数据" class="headerlink" title="核数据"></a>核数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">./nuc_data_make</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>PyNE在开发过程中，功能性函数都配置了unit test进入pyne/tests问价夹下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./travis-run-tests.sh python2</span><br></pre></td></tr></table></figure>

<h3 id="添加快捷安装方式"><a href="#添加快捷安装方式" class="headerlink" title="添加快捷安装方式"></a>添加快捷安装方式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias pyne_build=&#x27; python setup.py install --user -- --moab <span class="variable">$HOME</span>/opt/MOAB5.1 --dagmc <span class="variable">$HOME</span>/opt/DAGMC&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;alias pyne_clean=&#x27;rm -rf <span class="variable">$HOME</span>/opt/pyne/build/ <span class="variable">$HOME</span>/.local/lib/python2.7/site-packages/pyne* <span class="variable">$HOME</span>/.local/lib/libpyne.so <span class="variable">$HOME</span>/opt/pyne/build_nuc_data <span class="variable">$HOME</span>/opt/pyne/scripts/build_nuc_data&#x27;&quot;</span></span><br><span class="line"><span class="comment"># source ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<p>之后需要重新编译PyNE的时候，只需要执行下面的命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyne_clean</span><br><span class="line">pyne_build</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>neutronics</tag>
        <tag>PyNE</tag>
        <tag>developer</tag>
      </tags>
  </entry>
  <entry>
    <title>PyNE unstructured R2S</title>
    <url>/2019/05/16/neutronics/pyne-unstructured-r2s/</url>
    <content><![CDATA[<p>This article describes the steps for PyNE unstructured R2S.</p>
<p>The user should intall Trelis, DAGMC, ALARA and PyNE before the following contents.<br>DAGMC install guide see <a href="https://zxkjack123.github.io/neutronics/dagmc-install/">here</a>， PyNE install guide see <a href="https://zxkjack123.github.io/neutronics/pyne-developer-install/">here</a>。ALARA install guide see <a href="https://zxkjack123.github.io/neutronics/alara-install/">here</a>。</p>
<p>Most of the content is similar to the guide for r2s <a href="https://zxkjack123.github.io/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/">here</a>. Therefore, there is only contents that different from that guide for structured r2s.</p>
<h2 id="Input-file"><a href="#Input-file" class="headerlink" title="Input file"></a>Input file</h2><p>要进行蒙特卡罗输运计算，我们需要提供以下信息：</p>
<ol>
<li>几何信息，包括栅元和曲面。</li>
<li>材料信息。每个区域（栅元）是什么材料（材料的组成份额）</li>
<li>中子源信息。</li>
<li>Tally信息。想统计的东西</li>
<li>其他信息。如截断卡，权重及权窗，计算终止条件等。</li>
</ol>
<p>与普通MCNP计算不同，使用DAGMC计算时这些信息并不是全部都由一个输入文件提供，而是分别通过不同的文件提供。一个加载了几何和材料信息的h5m文件提供几何和材料信息。而其他信息则通过另一个input文本文件提供。</p>
<h3 id="Build-geometry-file-in-Trelis"><a href="#Build-geometry-file-in-Trelis" class="headerlink" title="Build geometry file in Trelis"></a>Build geometry file in Trelis</h3><p>Build up geometry, make several groups graveyard) (including and assign material for each group.</p>
<h4 id="Create-unstructured-mesh"><a href="#Create-unstructured-mesh" class="headerlink" title="Create unstructured mesh"></a>Create unstructured mesh</h4><p>The user has to create an unstructured mesh for the geometry. Here is an example comment in trelis to do that:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; vol all scheme tetmesh</span><br><span class="line">trelis&gt; vol all size auto factor 7</span><br><span class="line">trelis&gt; mesh vol all</span><br></pre></td></tr></table></figure>
<h4 id="Imprint-and-merge"><a href="#Imprint-and-merge" class="headerlink" title="Imprint and merge"></a>Imprint and merge</h4><p>Use the following command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; imprint body all</span><br><span class="line">trelis&gt; merge all</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">#### Export the geometry</span><br><span class="line">The following command will export the geometry file into &#96;geom.h5m&#96;. </span><br></pre></td></tr></table></figure>
<p>trelis&gt; export dagmc geom.h5m</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Build materials</span><br><span class="line"></span><br><span class="line">Write a python script to build materials using PyNE, reference: [define PyNE materials](https:&#x2F;&#x2F;zxkjack123.github.io&#x2F;neutronics&#x2F;make-pyne-material-lib&#x2F;)。</span><br><span class="line"></span><br><span class="line">下面是制作本例子中的&quot;Water&quot;和&quot;Steel&quot;用到的python脚本文件：</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/python<br>#<br>from pyne.material import Material,MaterialLibrary<br>print “Welcome!”<br>mat_lib=MaterialLibrary()<br>#<br>mat2 = Material({‘Fe’:0.655,’Cr’:0.170,’Ni’:0.120,’Mo’: 0.025,’Mn’: 0.02, ‘Si’:.01},density=7.92)<br>mat2=mat2.expand_elements()<br>#</p>
<h1 id="define-a-simple-water-since-O-18-not-in-mcnp-xs-libs"><a href="#define-a-simple-water-since-O-18-not-in-mcnp-xs-libs" class="headerlink" title="define a simple water since O-18 not in mcnp xs libs"></a>define a simple water since O-18 not in mcnp xs libs</h1><p>watervec={10010:2,80160:1} # simple water<br>water = Material()<br>water.density = 1.0<br>water.from_atom_frac(watervec)<br>#<br>mat_lib[“Steel”]=mat2<br>mat_lib[“Water”]=water<br>#<br>mat_lib.write_hdf5(“test_material_lib.h5”)<br>#<br>print “All done!”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">备注：制作材料的时候会调用PyNE，需要保证此时系统**LD_LIBRARY_PATH**中的MOAB是4.9.1版本的。</span><br><span class="line"></span><br><span class="line">### 整合几何与材料</span><br><span class="line"></span><br><span class="line">按照UWUW流程制作材料，使用UWUW_preprocessor：</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">$ uwuw_preproc &lt;dagmc h5m filename&gt; -v -l &lt;path to nuclear data library&gt;</span><br></pre></td></tr></table></figure>

<p>假设我们制作了材料库并存放在”material_lib1.h5”中，我们接下来就可以执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uwuw_preproc geometry1.h5m -v -l material_lib1.h5</span><br></pre></td></tr></table></figure>

<p>备注：整合几何和材料的时候需要调用DAGMC的功能，此时需要保证系统<strong>LD_LIBRARY_PATH</strong>中的MOAB版本是5.0版的。</p>
<h3 id="DAGMC-input文件准备"><a href="#DAGMC-input文件准备" class="headerlink" title="DAGMC input文件准备"></a>DAGMC input文件准备</h3><p>DAGMC的input文件中需要给定普通MCNP中除了栅元卡和曲面卡以及材料卡的其他部分，包括但不限于：</p>
<ol>
<li>中子源定义，必要项</li>
<li>计算终止条件，必要项</li>
<li>Tally卡，可选项，但一般都会有</li>
<li>其他功能性辅助卡，可选项，根据实际情况添加</li>
</ol>
<p>对于此例子的一个简单input文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C test1 input</span><br><span class="line">C neutron source: point source, 14 MeV</span><br><span class="line">sdef pos&#x3D;0 0 0  erg&#x3D;14  </span><br><span class="line">C </span><br><span class="line">nps 1e5</span><br><span class="line">C Tally card</span><br><span class="line">fmesh4:n geom&#x3D;xyz origin&#x3D; -5 -5 -5</span><br><span class="line">         imesh&#x3D;15 iints&#x3D;2</span><br><span class="line">         jmesh&#x3D;5 jints&#x3D;1</span><br><span class="line">         kmesh&#x3D;15 kints&#x3D;2</span><br><span class="line">         emesh 0.1 20</span><br></pre></td></tr></table></figure>
<h2 id="中子输运计算"><a href="#中子输运计算" class="headerlink" title="中子输运计算"></a>中子输运计算</h2><p>使用DAGMC进行输运计算时，需要通过<strong>i=**来指定输入文件，通过</strong>g=**来指定加载了材料的几何文件，详细运行指令可以参考<a href="https://svalinn.github.io/DAGMC/usersguide/uw2.html">官方文档</a>。</p>
<p>对于本例题，可以使用下面的方法运行本例子。<br>单线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要先保障系统能够找到正确的mcnp5.mpi，找不到的话需要给出完整路径</span><br><span class="line">mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>

<p>多线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mpirun -np n mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>
<p>备注：input文件和几何文件的名称长度都不能超过8个字符，可以使用<strong>ln -sf original_long_name.h5m geom.h5m</strong>把原文件链接到一个较短名字的文件后再运行。</p>
<p>计算完成之后，我们便得到了一个<strong>meshtal</strong>文件。</p>
<h2 id="活化计算"><a href="#活化计算" class="headerlink" title="活化计算"></a>活化计算</h2><p>中子输运完成后，我们开始正式调用PyNE的<a href="http://pyne.io/usersguide/r2s.html?highlight=r2s">R2S计算</a>模块的功能进行停机剂量率计算了。</p>
<p>进行停机剂量率计算，我们需要的主要信息包括：</p>
<ol>
<li>每个网格单元的材料成分。必须项。由同时包含了几何和材料的geom.h5m文件提供。（此文件就是进行DAGMC计算的那个）</li>
<li>每个网格单元的中子通量能谱。必须项。由meshtal文件提供。</li>
<li>活化计算能力。必须项。由Analytic and Laplacian Adaptive Radioactivity Analysis软件:<a href="https://github.com/svalinn/ALARA">ALARA</a>提供。</li>
<li>辐照及冷却方案。必须项。需要在R2S过程中指定。</li>
</ol>
<p>在我们的工作文件夹下新建一个子文件夹用来存放R2S计算相关的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir r2s_run</span><br><span class="line"><span class="built_in">cd</span> r2s_run</span><br></pre></td></tr></table></figure>
<h3 id="初始化配置-setup"><a href="#初始化配置-setup" class="headerlink" title="初始化配置:setup"></a>初始化配置:setup</h3><p>初始化配置r2s。执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r2s.py setup</span><br></pre></td></tr></table></figure>
<p>备注：检查确认系统<strong>LD_LIBRARY_PATH</strong>中的MOAB为4.9.1版本，并且在安装PyNE时将相应路径加入到~/.bashrc文件中后，r2s.py将能够直接被系统找到(which r2s.py)。</p>
<p>执行之后我们应该能够看到下面的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一些warning</span><br><span class="line">File &quot;config.ini&quot; has been written</span><br><span class="line">File &quot;alara_params.txt&quot; has been written</span><br><span class="line">Fill out the fields in these filse then run &quot;&gt;&gt; r2s.py step1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><strong>setup</strong>这一步会生成两个文件：<strong>config.ini</strong>和<strong>alara_params.txt</strong>，我们需要修改这两个文件中的一些设置，包括辐照方案的设置和一些计算细节的设置。</p>
<h4 id="修改config-ini设置"><a href="#修改config-ini设置" class="headerlink" title="修改config.ini设置"></a>修改<strong>config.ini</strong>设置</h4><p>一般情况下，我们需要注意的几个设置是：</p>
<ol>
<li>structured: 是否是结构化网格。结构化网格就是指MCNP中用的xyz或cyl网格。我们应该选<strong>True</strong></li>
<li>sub_voxel: 是否采用sub_voxel模式，sub_voxel模式是我正在添加的代码，还没有完成，暂时不能选用，因此是False</li>
<li>reverse: 反转中子通量顺序。DAGMC输出的中子通量是按照从低能到高能排序，而用ALARA进行活化计算时需要按照从高能到低能读取，因此需要把中子通量逆序排列。这里填True。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[general]</span><br><span class="line"><span class="comment"># Specify whether this problem uses structured or unstructured mesh</span></span><br><span class="line">structured: <span class="literal">True</span></span><br><span class="line"><span class="comment"># Specify whether this problem uses sub-voxel r2s</span></span><br><span class="line">sub_voxel: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[step1]</span><br><span class="line"><span class="comment"># Path to MCNP MESHTAL file containing neutron fluxes or a DAG-MCNP5</span></span><br><span class="line"><span class="comment"># unstructured mesh tally .h5m file.</span></span><br><span class="line">meshtal: meshtal</span><br><span class="line"><span class="comment"># Tally number within the meshtal file containing the fluxes for activation.</span></span><br><span class="line">tally_num: <span class="number">4</span></span><br><span class="line"><span class="comment"># The name of the tag used to store flux data on the mesh. For unstructured</span></span><br><span class="line"><span class="comment"># mesh this tag must already exist within the file specified in &lt;meshtal&gt;.</span></span><br><span class="line">flux_tag: n_flux</span><br><span class="line"><span class="comment"># Path to the DAGMC material-laden geometry file (.h5m).</span></span><br><span class="line">geom: geom.h5m</span><br><span class="line"><span class="comment"># If True the fluxes in the fluxin file will be printed in the reverse</span></span><br><span class="line"><span class="comment"># order of how they appear within the flux vector tag. Since MCNP and</span></span><br><span class="line"><span class="comment"># the Meshtal class order fluxes from low energy to high energy, this</span></span><br><span class="line"><span class="comment"># option should be true if the transmutation data being used is</span></span><br><span class="line"><span class="comment"># ordered from high-energy to low-energy.</span></span><br><span class="line">reverse: <span class="literal">True</span></span><br><span class="line"><span class="comment"># Number of rays to fire down each mesh row in each direction to calculate</span></span><br><span class="line"><span class="comment"># cell volume fractions.</span></span><br><span class="line">num_rays: <span class="number">10</span></span><br><span class="line"><span class="comment"># If true, rays will be fired down mesh rows in evenly spaced intervals.</span></span><br><span class="line"><span class="comment"># In this case &lt;num_rays&gt; must be a perfect square. If false, rays are fired</span></span><br><span class="line"><span class="comment"># down mesh rows in random intervals.</span></span><br><span class="line">grid: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[step2]</span><br><span class="line"><span class="comment"># List of decays times, seperated by commas. These strings much match exactly</span></span><br><span class="line"><span class="comment"># with their counterparts in the phtn_src file produced in step1. No spaces</span></span><br><span class="line"><span class="comment"># should appear in this line except the space between the time and the time unit</span></span><br><span class="line"><span class="comment"># for each entry.</span></span><br><span class="line">decay_times:<span class="number">1</span> h</span><br><span class="line"><span class="comment"># The prefix of the .h5m files containing the source density distributations for</span></span><br><span class="line"><span class="comment"># each decay time.</span></span><br><span class="line">output: source</span><br><span class="line"><span class="comment"># The name of the output files containing the total photon source intensities for</span></span><br><span class="line"><span class="comment"># each decay time</span></span><br><span class="line">tot_phtn_src_intensities : total_photon_source_intensites.txt</span><br></pre></td></tr></table></figure>

<h4 id="修改alara-params-txt"><a href="#修改alara-params-txt" class="headerlink" title="修改alara_params.txt"></a>修改alara_params.txt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">material_lib alara_matlib</span><br><span class="line">element_lib data&#x2F;nuclib</span><br><span class="line">data_library alaralib data&#x2F;truncated_fendl2bin</span><br><span class="line"></span><br><span class="line">cooling</span><br><span class="line">    1 h</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">output zone</span><br><span class="line">       integrate_energy</span><br><span class="line">       # Energy group upper bounds. The lower bound is always zero.</span><br><span class="line">       photon_source  data&#x2F;truncated_fendl2bin  phtn_src 24 1.00E4 2.00E4 5.00E4 1.00E5</span><br><span class="line">       2.00E5 3.00E5 4.00E5 6.00E5 8.00E5 1.00E6 1.22E6 1.44E6 1.66E6</span><br><span class="line">       2.00E6 2.50E6 3.00E6 4.00E6 5.00E6 6.50E6 8.00E6 1.00E7 1.20E7</span><br><span class="line">       1.40E7 2.00E7</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#     flux name    fluxin file   norm   shift   unused</span><br><span class="line">flux  my_flux     alara_fluxin  1e10     0      default</span><br><span class="line"></span><br><span class="line"># Specify the irradiation schedule below.</span><br><span class="line"># Syntax is found in the ALARA user manual</span><br><span class="line"># This example is for a single 1 y pulse</span><br><span class="line">schedule    my_schedule</span><br><span class="line">    1 y my_flux my_pulse_history 0  s</span><br><span class="line">end</span><br><span class="line">pulsehistory  my_pulse_history</span><br><span class="line">    1    0.0    s</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#other parameters</span><br><span class="line">truncation 1e-12</span><br><span class="line">impurity 5e-6 1e-3</span><br><span class="line">dump_file dump.file</span><br></pre></td></tr></table></figure>

<h3 id="r2s-py-step1"><a href="#r2s-py-step1" class="headerlink" title="r2s.py step1"></a>r2s.py step1</h3><p><strong>r2s.py step1</strong>是用来根据<strong>r2s.py setup</strong>生成的配置文件生成ALARA输入文件，中子通量文件和ALARA材料库文件的。</p>
<p>当我们修改好上面两个文件后，就可以使用r2s.py生成ALARA计算需要的文件了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ r2s.py step1</span><br></pre></td></tr></table></figure>


<h3 id="材料数据库准备"><a href="#材料数据库准备" class="headerlink" title="材料数据库准备"></a>材料数据库准备</h3><p><strong>ALARA输入文件</strong>中有三行是<strong>材料数据库</strong>相关的信息。</p>
<ol>
<li>material_lib alara_matlib 这个<strong>alara_matlib</strong>是alara需要读取的材料成功定义的文件名。这个文件是会由程序从test1_geometry.h5m (geom.h5m)中读取的，不需要做修改。</li>
<li>element_lib data/nuclib 这个文件是定义元素的丰度用的。默认是自然丰度，也可以自己定义修改丰度。自己定义一个元素丰度数据表显然是非常麻烦的，在ALARA的安装文件中$ALARA/data下有一个<strong>elelib.std</strong>，可以把这个文件拷贝到工作文件夹下并重命名为<strong>nucib</strong>即可（也可以设置element_lib elelib.std)。但是这个<strong>elelib.std</strong>只能用于材料定义是按照元素定义的，如果有针对核素的定义，则这个就不能用了。需要将元素扩展成核素，需要后续介的方法单独处理。</li>
<li>data_library alaralib truncated_fendl2bin （ALARA应该配备fendl3bin)但是并没有，ALARA安装文件中的sample/datam文件夹下只有truncated_fendl2bin数据库。我们可以把这个数据库相关的文件拷贝到工作文件夹。</li>
</ol>
<p>当材料定义是针对核素定义了的化，普通的<strong>elelib.std</strong>就没办法使用了，会出现错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">310: Could not find element &lt;string&gt; in element library.</span><br><span class="line"></span><br><span class="line">The element string was not found in the element library. This could be due to an error in the material library, incorrect user input, or an omission in the element library.</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">这时我们需要使用工具**elelib_to_nuclib.py**来将元素扩展成核素数据。这个工具是一个python脚本，调用pyne数据模块扩展元素数据。工具的位置在ALARA源文件的tools文件夹下，使用方法：</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">$ cd r2s_run&#x2F;data</span><br><span class="line">$ python &lt;path_to_elelib_to_nuclib.py&gt; elelib_std -o nuclib</span><br></pre></td></tr></table></figure>



<h3 id="alara计算"><a href="#alara计算" class="headerlink" title="alara计算"></a>alara计算</h3><p>当<strong>step1</strong>完成后，程序会给出运行alara的提示，按照提示运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ alara alara_inp &gt; output.txt</span><br></pre></td></tr></table></figure>
<p>等待alara运行完成，会生成几个文件：</p>
<ol>
<li>output.txt: ALARA输出文件，里面有活化后材料的核素组成以及光子发射率数据</li>
<li>phtn_src: ALARA输出文件，里面有详细的各个各个材料各个核素缠身的各个能群的光子数据</li>
</ol>
<h3 id="r2s-step2"><a href="#r2s-step2" class="headerlink" title="r2s step2"></a>r2s step2</h3><p>ALARA计算完成后，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ r2s.py step2</span><br></pre></td></tr></table></figure>
<p>执行完成后，我们可以看到工作文件夹中多了几个文件：</p>
<ol>
<li>e_bounds:光子能群结构。从低能到高能，单位为eV。最低能群能量下限为0.</li>
<li>phtn_src.h5: HDF5格式的光子源数据，无法直接打开读取，只能程序读。</li>
<li>source_<strong>i</strong>.h5m: 第<strong>i</strong>个冷却时间点的网格光子源数据。</li>
<li>total_photon_source_intensites.txt: 里面是各个冷却时间节点的总光子发射率。<br>你</li>
</ol>
<h2 id="光子输运"><a href="#光子输运" class="headerlink" title="光子输运"></a>光子输运</h2><p>获得光子源后，我们就可以进行光子输运计算了。计算前必须确认DAGMC是已经包含了源子程序的版本，如果没有，需要先参考<a href="%E7%BC%96%E8%AF%91%E5%B8%A6%E7%94%A8%E4%BA%8ER2S%E7%9A%84%E6%BA%90%E5%AD%90%E7%A8%8B%E5%BA%8F%E7%9A%84DAGMC">编译带用于R2S的源子程序的DAGMC</a>安装DAGMC。</p>
<h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p>进行光子输运计算，我们需要提供几何文件，材料，光子源，以及需要统计的信息。因此需要准备的文件有：</p>
<ol>
<li>geom.h5m: 就是中子输运时用的那个文件，即本例子中的test1_geometry.h5m，它包含了几何和材料信息</li>
<li>source.h5m:光子源信息文件，源子程序需要从这里读取信息。由于MCNP无法从输入文件中传递字符串，所以这个文件名称不能改变，必须是source.h5m。</li>
<li>e_bounds: 光子能群结构文件。</li>
<li>input: 提供tally信息，另外需要在这个文件中定义<strong>idum</strong>，用于控制源子程序过程。</li>
</ol>
<p>准备好这些文件后，我们还需要对这些文件进行一些小修改。</p>
<ol>
<li>input文件修改：首先，需要加上mode p， 然后修改tally部分。</li>
<li>e_bounds: 这个文件中的能群单位是eV而不是MeV，需要手动将里面的数据单位除以1e6。（在github上提交该修改建议）</li>
</ol>
<p>我们还需要修改栅元的重要性，因为中子输运时的文件里面的重要性是默认为中子的重要性，没有光子的重要性。但是这个重要性信息是写在h5m文件里面的，没法直接修改。</p>
<p>我们需要先运行一次这个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mcnp5.mpi i=input g=geom.h5m</span><br></pre></td></tr></table></figure>
<p>现在这个运行肯定会出现错误，说粒子产生子重要性为0的区域。但是同时这个过程会生成一个可编辑的<strong>lcad</strong>文件，我们可以修改这个<strong>lcad</strong>文件，在重要性部分添加上<strong>imp:p=1</strong>/<strong>imp:p=0</strong>，将这个文件重命名为<strong>lcad_m</strong>，删掉过程文件<strong>fcad, outp, runtpe</strong>后再次运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mcnp5.mpi i=input g=geom.h5m l=lcad_m</span><br></pre></td></tr></table></figure>
<p>之后就得到结果，至此停机剂量的计算完成。</p>
<p><strong>备注</strong>：在计算得到结果之后，还可以把几何图形及计算结果的网格数据进行可视化绘图。绘图方法可以参考<a href="https://zxkjack123.github.io/neutronics/dagmc-geom-data-visualization/">DAGMC数据绘图</a>。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>R2S</tag>
        <tag>shutdown dose rate</tag>
        <tag>unstructured</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyNE生成MAGIC权窗的例子</title>
    <url>/2019/05/16/neutronics/sample-magic-weight-window-pyne/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本篇文章使用例子来说明使用PyNE来进行MAGIC的权窗文件的流程。</p>
<p>本流程需要提前安装PyNE (PyNE的安装参考<a href="https://zxkjack123.github.io/neutronics/pyne-developer-install/">这里</a>)</p>
<h2 id="例子描述"><a href="#例子描述" class="headerlink" title="例子描述"></a>例子描述</h2><p>这里直接使用用于R2S计算停机剂量的例子。例题几何与材料描述参考<a href="https://zxkjack123.github.io/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/">这里</a>。</p>
<h3 id="DAGMC-input文件准备"><a href="#DAGMC-input文件准备" class="headerlink" title="DAGMC input文件准备"></a>DAGMC input文件准备</h3><p>input文件由于仅用于迭代权窗，而不是为了计算精确的通量数据。因此与普通输入文件有几点不同：</p>
<ol>
<li>使用的mesh tally是为了生成权窗，网格voxel的尺寸不要超过材料的平均自由程(mean free path)；</li>
<li>mesh tally的能群一般设置为两群就够了(如 0.1 20)；</li>
<li>迭代过程中一般使用较高的能量截断(energy cut-off)，随着迭代可以逐步降低截断能量，逐步获得更精确的数据。</li>
</ol>
<p>对于此例子的一个简单input文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C sample input for MAGIC weight window</span><br><span class="line">C neutron source: point source, 14 MeV</span><br><span class="line">sdef pos&#x3D;0 0 0  erg&#x3D;14  </span><br><span class="line">C </span><br><span class="line">nps 1e4</span><br><span class="line">cut:n j 0.01 -0.5 -0.25 1</span><br><span class="line">C Tally card</span><br><span class="line">fmesh4:n geom&#x3D;xyz origin&#x3D; -5 -5 -5</span><br><span class="line">         imesh&#x3D;15 iints&#x3D;2</span><br><span class="line">         jmesh&#x3D;5 jints&#x3D;1</span><br><span class="line">         kmesh&#x3D;15 kints&#x3D;2</span><br><span class="line">         emesh 0.1 20</span><br></pre></td></tr></table></figure>
<h3 id="第一次中子输运计算"><a href="#第一次中子输运计算" class="headerlink" title="第一次中子输运计算"></a>第一次中子输运计算</h3><p>使用DAGMC进行输运计算时，需要通过<strong>i=**来指定输入文件，通过</strong>g=**来指定加载了材料的几何文件，详细运行指令可以参考<a href="https://svalinn.github.io/DAGMC/usersguide/uw2.html">官方文档</a>。</p>
<p>对于本例题，可以使用下面的方法运行本例子。<br>单线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要先保障系统能够找到正确的mcnp5.mpi，找不到的话需要给出完整路径</span><br><span class="line">mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>

<p>多线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mpirun -np n mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>
<p>备注：input文件和几何文件的名称长度都不能超过8个字符，可以使用<strong>ln -sf original_long_name.h5m geom.h5m</strong>把原文件链接到一个较短名字的文件后再运行。</p>
<p>计算完成之后，我们便得到了一个<strong>meshtal</strong>文件。</p>
<h3 id="生成权窗"><a href="#生成权窗" class="headerlink" title="生成权窗"></a>生成权窗</h3><p>MAGIC生成权窗的说明可以参考<a href="http://pyne.io/theorymanual/variance_reduction.html">这里</a>。实际使用时，我们通过PyNE中的工具读取meshtal文件中的内容，生成MAGIC权窗，然后写入到文件中。下面是一个生成权窗的python脚本例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pyne <span class="keyword">import</span> variancereduction <span class="keyword">as</span> vr</span><br><span class="line"><span class="keyword">from</span> pyne.mcnp <span class="keyword">import</span> Meshtal, Wwinp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    f = sys.argv[<span class="number">1</span>] <span class="comment">#must be a meshtal file</span></span><br><span class="line">    M = Meshtal(f)</span><br><span class="line">    <span class="comment"># User can also define the tally as 4, 14, ...</span></span><br><span class="line">    tally_number = M.tally.keys()[<span class="number">0</span>]</span><br><span class="line">    meshtally = M.tally[tally_number]</span><br><span class="line">    tags = meshtally.tag_names</span><br><span class="line"></span><br><span class="line">    res_tag = tags[<span class="number">0</span>]</span><br><span class="line">    err_tag = tags[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    vr.magic(meshtally, res_tag, err_tag)</span><br><span class="line"></span><br><span class="line">    meshtally.write_hdf5(<span class="string">&quot;mesh-ww-tags.h5m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    wwinp = Wwinp()</span><br><span class="line">    wwinp.read_mesh(meshtally.mesh)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># write out the wwinp file</span></span><br><span class="line">    wwinp.write_wwinp(<span class="string">&quot;wwinp-magic&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>bash执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python magic.py meshtal</span><br></pre></td></tr></table></figure>
<p>之后便生成了我们所需要的权窗文件<strong>wwinp-magic</strong>。</p>
<h3 id="使用权窗"><a href="#使用权窗" class="headerlink" title="使用权窗"></a>使用权窗</h3><p>使用权窗时，使用权窗时，在输入文件中添加合适的WWP参数读取生成的权窗文件中的权窗数据即可。下面是第二轮计算的输入文件例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C sample input for MAGIC 2nd run</span><br><span class="line">C neutron source: point source, 14 MeV</span><br><span class="line">sdef pos&#x3D;0 0 0  erg&#x3D;14</span><br><span class="line">C </span><br><span class="line">nps 1e4</span><br><span class="line">C weight window parameters</span><br><span class="line">wwp:n 5 j 5 0 -0.5</span><br><span class="line">cut:n j 1e-3 -0.5 -0.25 1</span><br><span class="line">C Tally card</span><br><span class="line">fmesh4:n geom&#x3D;xyz origin&#x3D; -5 -5 -5</span><br><span class="line">         imesh&#x3D;15 iints&#x3D;2</span><br><span class="line">         jmesh&#x3D;5 jints&#x3D;1</span><br><span class="line">         kmesh&#x3D;15 kints&#x3D;2</span><br><span class="line">         emesh 0.1 20</span><br></pre></td></tr></table></figure>
<p><strong>备注</strong>： <strong>wwp</strong>和<strong>cut</strong>有变化。</p>
<p>使用权窗计算后，会有新一轮的结果。可以通过对比meshtal的变化发现，使用权窗后的结果误差更小(这里的例子规模太小，提升效果并不明显)。</p>
<h3 id="最终计算"><a href="#最终计算" class="headerlink" title="最终计算"></a>最终计算</h3><p>当迭代出满意的权窗后，就可以使用那个权窗进行真正的通量计算了。那个时候再根据实际情况使用恰当的cut卡，使用真正的tally卡，计算得到想要的结果。</p>
<p><strong>备注</strong>：在计算得到结果之后，还可以把几何图形及计算结果的网格数据进行可视化绘图。绘图方法可以参考<a href="https://zxkjack123.github.io/neutronics/dagmc-geom-data-visualization/">DAGMC数据绘图</a>。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>MAGIC</tag>
        <tag>权窗</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Ubuntu装机必备软件</title>
    <url>/2019/05/16/ubuntu/academic-tools/</url>
    <content><![CDATA[<h2 id="重装系统的恐怖回忆"><a href="#重装系统的恐怖回忆" class="headerlink" title="重装系统的恐怖回忆"></a>重装系统的恐怖回忆</h2><p>2017年的时候因为想在ubuntu上装个IE浏览器，然后网上找了一下，需要装个wine这个东西。然后一装，结果就把系统搞坏了，装任何软件或者卸载任何软件，都会莫名其妙的弹出一个窗口，告诉我在配置什么东西，下面一个“确定”按钮还点不了。<br>哎，我对ubuntu也不是特别熟，网上搜索了一下也没找到好的解决办法，心一横就把电脑重装系统了。</p>
<p>2018年1月23号，Ubuntu系统弹出提示，告诉我有更新，但是是什么partial update。心想着是系统提示的更新，就更新吧，确定，授权，更新，重启，整个流程都没有在意。然而当Boot Menu的开机页面蹦出来的时候，我傻眼了。什么鬼，进不去系统了！<br><img src="https://i.imgur.com/pZNBVCF.jpg" alt="开机页面"><br>我只能挥泪重装系统，好在最近的工作都同步在GitHub上，损失不大，只不过需要花点时间把东西都安装回来而已。</p>
<h2 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h2><p>在准备重装系统的时候，我意识到一个问题，我之前安装到底安装了哪些软件？</p>
<p>完了，我也记不清楚了。而且有些东西，安装之后又卸载，又装不同版本之类的，折腾来折腾去，压根不知道具体该装啥了。</p>
<p>只好凭借这回忆，把需要用的工具整理一番，将来万一系统又蹦了，也好用这个清单再一个个装回来。</p>
<p>2019年10月，我回国了。发现现在翻墙很困难，以前用的VPN现在基本都不好使用了。没办法，现在需要把常用的软件更换到国内国外都能用的版本。比如chrome浏览器就用不了了，因此删掉了chrome。</p>
<ul>
<li>vim: 一个通用的文本编辑器。功能强大，配合各种插件，可以写各种代码。</li>
<li>Unblock boundary: 翻回国内看番剧的神器（需要购买会员），妈妈再也不用担心我在国外看不了bilibili了！</li>
<li>Thunderbird: 收发邮件。即便是重装系统时本地文件全部清除后也不会丢失自己对邮件的处理记录，比如存档的邮件。点击<a href="https://zxkjack123.github.io/2018/01/25/ubuntu-thunderbird.html">这里</a>查看Thunderbird接收我常用邮箱的设置。</li>
<li>Zotero: 科研文献管理软件，跨平台，开源，方便同步。外导课题组使用zotero，我现在已经从mendeley切换到zotero了。</li>
<li>Tex live &amp; Texstudio: 很好用的LaTeX书写软件,配合GitHub保存一切书写记录和版本控制。LaTeX + GitHub写论文，版本控制很轻松，修改记录一直记录着。</li>
<li>kolourpaint4 &amp; Gimp: 画图用的。ubuntu平台没有adobe PS &amp; AI可用，可以用这两个替代用来处理简单的图形。</li>
<li>git:这个东西配合github，可以把其他各类代码放到github管理与同步，很方便。LaTeX文档(没错，论文也能)放上面。</li>
<li>pycharm: 写python代码用的。最近都用vim在写python代码，基本不怎么用了。</li>
<li>Nutstore: 这是一个国内开发的跨平台同步盘，很方便。</li>
<li>VScode: 写代码很好用，需要安装python和C++插件。</li>
</ul>
<p>下面是几个常用的工具：</p>
<ul>
<li><a href="https://convertio.co/zh/">Convertio</a> 各种文件格式转换，写论文的时候用这个把图片转pdf,pdf转图片什么的。</li>
<li><a href="http://detexify.kirelabs.org/classify.html">Detexify</a> LaTeX符合检测与转换。手画一个LaTeX符号，Detexify输出LaTeX代码，对那些都叫不出名字的符号，用这个比自己在列表里找方便多了</li>
<li><a href="http://linggle.com/">Linggle</a> 写论文的时候时常纠结某个词用的对不对，这里是接to还是for，用a还是the还是不要。这些常用的搭配，用linggle的推荐基本就没错了，减少很多烦恼</li>
<li><a href="http://www.gingersoftware.com/">Ginger</a> 身为中国人，对自己说的英语没自信，对自己写的英语也没自信。现在在国外访学，用这个工具来帮助检查自己的英语书写的语法错误，很方便。</li>
</ul>
<p>以后遇到其他给力的软件再放上来。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>Chorme打开链接时在新窗口打开空白页问题</title>
    <url>/2018/05/16/ubuntu/chrome-new-tab/</url>
    <content><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>我最近把自己的笔记本系统从Win10换到了Ubuntu 16.04。Chrome是我在Ubuntu系统上的默认浏览器。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>安装Chrome完成打开之后使用都很正常，但就是有一个地方很蛋疼：<br>当你打开一个链接的时候，它会生成一个新的Chrome窗口(window)，然后在那个窗口显示的也是一个空白网页(tab)。</p>
<p>如果想让链接在原来已经打开的Chrome窗口中的一个新tab打开时，我必须使用以下操作：右击链接-&gt;拷贝链接地址-&gt;在空白网页粘贴链接</p>
<p>对于我这种经常需要从邮件里面打开链接的人来说，这种复杂的操作让我难以忍受。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>还好，国外已经有大佬帮我解决了这个<a href="https://askubuntu.com/questions/689449/external-links-are-opened-as-blank-tabs-in-new-browser-window-in-chrome">问题</a>。</p>
<p>只需要打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HOME</span>/.<span class="built_in">local</span>/share/applications/google-chrome.desktop</span><br></pre></td></tr></table></figure>
<p>这个文件，<br>在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exec=/opt/google/chrome/chrome</span><br></pre></td></tr></table></figure>

<p>这一行后面添加一个 <code>%U</code>再保存一下文件就OK了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exec=/opt/google/chrome/chrome %U</span><br></pre></td></tr></table></figure>

<p>我重装系统后又遇到了这个问题，结果忘了上次再哪而找的答案，结果又花了好久从找到。这次学聪明点，直接把答案搬运过来，翻译好，以后再遇到这个问题就不怕了。</p>
<p>我也遇到过要修改的那个文件名称不一致的情况，存在多个看着像那个文件但不是的文件。我索性直接把所有的相似的文件都加上了那个<code>%U</code>，这样问题解决。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>chrome</tag>
        <tag>tab</tag>
      </tags>
  </entry>
  <entry>
    <title>Rebuild github page bolg</title>
    <url>/2019/05/16/ubuntu/github-page-rebuild/</url>
    <content><![CDATA[<h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>My github page blog disappered (404 not found) when I cancled my github pro. I need to rebuild it.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Deleted the gh-pages branch on github</span></span><br><span class="line">git push origin --delete gh-pages</span><br><span class="line"><span class="comment"># Deleted the gh-pages branch on local</span></span><br><span class="line">git branch -D gh-pages</span><br><span class="line"><span class="comment"># Recreated the branch on local based on master</span></span><br><span class="line">git checkout -b gh-pages</span><br><span class="line"><span class="comment"># Pushed the gh-pages branch to github</span></span><br><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>github page</tag>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github pages和Hexo搭建自己的博客</title>
    <url>/2019/05/16/ubuntu/hexo_blog_setup/</url>
    <content><![CDATA[<p>我所利用的所有工具都是有大神写好了代码，写好了教程。我只需要按照教程一步一步来操作就可以了。这其中很多教程都是图文并茂，简直是手把手教我怎样搭建博客。而这篇博客本身不生产新的教程，只是把一些我用到的教程按照流程整理下来，主要是避免自己将来万一需要重新搭建博客的时候忘了如何操作。</p>
<p>说实话，搭建这样一个博客工具，即便是在有各种教程的情况下，也不是一件很简单的事情。至少我自己就不想再另一台电脑上重新搞一次，写博客都在自己笔记本上操作。</p>
<h3 id="本博客中使用到的工具及平台"><a href="#本博客中使用到的工具及平台" class="headerlink" title="本博客中使用到的工具及平台"></a>本博客中使用到的工具及平台</h3><ul>
<li>系统：Ubuntu 18.04博客</li>
<li>博客发布地址：我的<a href="https://zxkjack123.github.io/">Github pages</a></li>
<li>博客内容文本编辑器：<a href="https://github.com/Moeditor/Moeditor">Moeditor</a>， 这是一款Markdown编辑器</li>
<li>博客网页生成工具：<a href="https://hexo.io/">Hexo</a></li>
<li>博客主题风格： <a href="https://github.com/theme-next/hexo-theme-next">NexT</a></li>
<li>博客评论工具： Disqus</li>
<li>博客浏览数统计工具： LeanCloud</li>
<li>博客操作手册：<a href="https://hexo.io/docs/commands.html">Commands</a></li>
</ul>
<h3 id="博客搭建步骤"><a href="#博客搭建步骤" class="headerlink" title="博客搭建步骤"></a>博客搭建步骤</h3><p><strong>注意</strong>:博客搭建流程需要sudo权限。推荐使用<a href="https://zealot.top/hexo%E5%BB%BA%E7%AB%99%E5%BF%83%E5%BE%97.html">Zealot的建站心得</a>。</p>
<ol>
<li><a href="https://websiteforstudents.com/install-the-latest-node-js-and-nmp-packages-on-ubuntu-16-04-18-04-lts/">安装Node.js和NPM工具</a></li>
<li><a href="https://hexo.io/">安装Hexo</a></li>
<li><a href="https://hexo.io/docs/setup.html">Init Hexo blog</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">安装配置NexT主题</a></li>
</ol>
<p>经过以上步骤，博客框架已经搭建完成。</p>
<h3 id="我的个人设置"><a href="#我的个人设置" class="headerlink" title="我的个人设置"></a>我的个人设置</h3><p>本部分内容是我自己喜欢的一些设置。</p>
<ul>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb">添加本地搜索</a>. 也可以直接在next主题的设置文件中修改local_search选项。</li>
<li><a href="https://github.com/theme-next/theme-next-reading-progress">添加阅读进度显示</a></li>
<li><a href="https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/">使用LeanCloud添加访问量计数</a>.该功能由于受到leancloud影响暂时无法使用。</li>
<li><a href="https://yunhao.space/2018/06/29/hexo-leancloud-counter-security-too-many-requests-error/">解决LeanCloud的Too many request问题</a>.该功能暂时无法使用。</li>
<li><a href="https://zealot.top/%E5%88%A9%E7%94%A8vim%E5%AE%9E%E7%8E%B0HEXO%E6%96%87%E7%AB%A0%E6%8C%89%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F.html">博客文章按照updated时间排序</a></li>
</ul>
<p><strong>注意</strong>： <code>npm install hexo-xxx-xxx --save</code>这一类的命令需要在Hexo博客主文件夹下执行。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Github pages</tag>
        <tag>Hexo</tag>
        <tag>next</tag>
        <tag>leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Thunderbird接收常用邮箱设置</title>
    <url>/2018/08/05/ubuntu/thunderbird-set/</url>
    <content><![CDATA[<h2 id="163邮箱"><a href="#163邮箱" class="headerlink" title="163邮箱"></a>163邮箱</h2><p>Thunderbird接收163免费邮箱设置：</p>
<table>
<thead>
<tr>
<th align="center">服务器名称</th>
<th align="center">服务器地址</th>
<th align="center">SSL协议端口号</th>
<th align="center">非SSL协议端口号</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IMAP</td>
<td align="center">imap.163.com</td>
<td align="center">993</td>
<td align="center">143</td>
</tr>
<tr>
<td align="center">SMTP</td>
<td align="center">smtp.163.com</td>
<td align="center">465/994</td>
<td align="center">25</td>
</tr>
<tr>
<td align="center">POP3</td>
<td align="center">pop.163.com</td>
<td align="center">995</td>
<td align="center">110</td>
</tr>
</tbody></table>
<p>163免费邮客户端设置的POP3、SMTP、IMAP设置<a href="http://help.163.com/09/1223/14/5R7P3QI100753VB8.html">参考链接</a>。</p>
<p><strong>注意</strong>：SMTP设置推荐为</p>
<ul>
<li>Sever Name: smtp.163.com</li>
<li>Port: 25</li>
<li>Connection security: None</li>
<li>Authentication method: Password, transmitted insecurely</li>
<li>User Name: <a href="mailto:&#x78;&#120;&#120;&#120;&#x78;&#120;&#x40;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#x6d;">&#x78;&#120;&#120;&#120;&#x78;&#120;&#x40;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a></li>
</ul>
<p>经过本人实践检验，上面的设置可以接收和发送邮件。而SMTP使用其他设置时就没法发邮件了。</p>
<h2 id="中科院邮箱"><a href="#中科院邮箱" class="headerlink" title="中科院邮箱"></a>中科院邮箱</h2><p>Thunderbird接收中科院系统邮箱设置：</p>
<table>
<thead>
<tr>
<th align="center">服务器名称</th>
<th align="center">服务器地址</th>
<th align="center">安全链接</th>
<th align="center">端口</th>
<th align="center">验证方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IMAP</td>
<td align="center">imap.cstnet.cn</td>
<td align="center">None</td>
<td align="center">143</td>
<td align="center">用户名与密码</td>
</tr>
<tr>
<td align="center">SMTP</td>
<td align="center">smtp.cstnet.cn</td>
<td align="center">None</td>
<td align="center">25</td>
<td align="center">用户名与密码</td>
</tr>
</tbody></table>
<p><a href="http://help.cstnet.cn/changjianwenti/youjianshoufa/Mozilla%20Thunderbird%20imap.html">参考链接</a></p>
<h2 id="中科大学生邮箱"><a href="#中科大学生邮箱" class="headerlink" title="中科大学生邮箱"></a>中科大学生邮箱</h2><p>Thunderbird接收中科大学生邮箱设置：</p>
<table>
<thead>
<tr>
<th align="center">服务器名称</th>
<th align="center">服务器地址</th>
<th align="center">加密方式</th>
<th align="center">端口</th>
<th align="center">Clear text</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IMAP</td>
<td align="center">mail.ustc.edu.cn</td>
<td align="center">SSL</td>
<td align="center">993</td>
<td align="center">143</td>
</tr>
<tr>
<td align="center">SMTP</td>
<td align="center">mail.ustc.edu.cn</td>
<td align="center">SSL</td>
<td align="center">465</td>
<td align="center">25</td>
</tr>
<tr>
<td align="center">POP</td>
<td align="center">mail.ustc.edu.cn</td>
<td align="center">SSL</td>
<td align="center">995</td>
<td align="center">110</td>
</tr>
</tbody></table>
<p><a href="http://mail.ustc.edu.cn/coremail/help/index.jsp">参考链接</a></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>thunderbird</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim-复制内容到vim外</title>
    <url>/2019/05/16/ubuntu/vim-copy-to-clipboard/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在笔记本电脑上使用linux系统，经常打开并编辑一些文本文件，我比较喜欢用vim。但有时候遇到要从文件中拷贝几个数据到文件外(比如excel, 或者google spreadsheets)的时候，我就遇到麻烦了。在vim里面用<strong>y</strong>拷贝的东西，没法粘贴到文件外。因此我每次需要拷贝数据的时候，都是换gedit来操作。直到今天，我由于需要从三个文件中拷贝一共十八个数据，忍不了了。</p>
<p>网上查了资料，的确有解决办法。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>还好，已经有大佬帮我解决了这个[问题](如何将 Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？ - cnlzxin的回答 - 知乎<br><a href="https://www.zhihu.com/question/19863631/answer/182346296)%E3%80%82">https://www.zhihu.com/question/19863631/answer/182346296)。</a></p>
<ul>
<li>检查vim是否支持clipboard功能:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim --version | grep clipboard</span><br></pre></td></tr></table></figure></li>
<li>如果有 <strong>+clipboard</strong> 则跳过这一步; 如果显示的是 <strong>-clipboard</strong> 说明不支持(很遗憾，我的就是 <strong>-clipboard</strong>), 需要<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install vim-gtk</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>安装好vim -gtk之后就可以了。复制内容到vim外了。不过在vim内复制内容时，需要制定将内容复制到 <strong>clipboard</strong>，通过 <strong>“+</strong> 来指定特定寄存器。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>当我想复制一个数据到spreadsheets时，使用<strong>v</strong>选中该数据内容，然后 <strong>“+y</strong>，切换到spreadsheets，<strong>ctrl + v</strong> 即可。想把剪切板的内容复制到另一个vim文件时，使用<code>&quot;+p</code>即可。</p>
<p>其他例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot;+yy  // 复制当前行到剪切板</span></span><br><span class="line"><span class="comment">&quot;+p   // 将剪切板内容粘贴到光标后面</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim-settings-plugins</title>
    <url>/2020/08/04/ubuntu/vim-settings-plugins/</url>
    <content><![CDATA[<p>This blog records my vim settings and plugins. The system I am using is Ubuntu 18.04.</p>
<h3 id="Install-vim-8"><a href="#Install-vim-8" class="headerlink" title="Install vim-8"></a>Install vim-8</h3><p>The default vim of Ubuntu 18.04 is vim-7 (if you install it with <code>sudo apt install vim</code>).<br>First thing to do is upgrade it to vim-8, using the following <a href="http://www.theubuntumaniac.com/2018/09/install-vim-810374-on-ubuntu-1604-1804.html">commands</a>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/vim</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>

<h3 id="Add-plugins"><a href="#Add-plugins" class="headerlink" title="Add plugins"></a>Add plugins</h3><h4 id="Install-Vundle"><a href="#Install-Vundle" class="headerlink" title="Install Vundle"></a>Install Vundle</h4><p>Before installing any plugin, make sure to install <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>.<br><strong>Note</strong> Launch <code>vim</code> and run <code>:PluginInstall</code> when installing new plugin.</p>
<h4 id="List-of-plugins"><a href="#List-of-plugins" class="headerlink" title="List of plugins"></a>List of plugins</h4><p>Here is the list of the plugins I am using:</p>
<ul>
<li><a href="https://github.com/dpelle/vim-LanguageTool">vim-LanguageTool</a>: This plugin integrates the LanguageTool grammar checker into Vim.</li>
</ul>
<h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p><a href="https://dougblack.io/words/a-good-vimrc.html">A good vimrc</a> and <a href="https://nvie.com/posts/how-i-boosted-my-vim/">How I boosted my Vim</a> are good start of setting vimrc.<br>Items used in my vimrc:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; This must be first, because it changes other options as side effect</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filetype plugin indent on</span><br><span class="line">&quot; show existing tab with 4 spaces width</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line">&quot; when indenting with &#39;&gt;&#39;, use 4 spaces width</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">&quot; On pressing tab, insert 4 spaces</span><br><span class="line">set expandtab</span><br><span class="line"></span><br><span class="line">&quot; hidden</span><br><span class="line">set hidden</span><br><span class="line"></span><br><span class="line">&quot; indent</span><br><span class="line">set backspace&#x3D;indent,eol,start &quot; allow backspacing over everything in insert mode</span><br><span class="line">set autoindent    &quot; always set autoindenting on</span><br><span class="line">set copyindent    &quot; copy the previous indentation on autoindenting</span><br><span class="line"></span><br><span class="line">set number        &quot; always show line numbers</span><br><span class="line">set showmatch     &quot; set show matching parenthesis</span><br><span class="line"></span><br><span class="line">set ignorecase    &quot; ignore case when searching</span><br><span class="line">set smartcase     &quot; ignore case if search pattern is all lowercase,  case-sensitive otherwise</span><br><span class="line">set hlsearch      &quot; highlight search terms</span><br><span class="line">set incsearch     &quot; show search matches as you type</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>plugin</tag>
        <tag>LanguageToolCheck</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyNE进行基于网格的计算停机计量的例子</title>
    <url>/2019/05/16/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本篇文章使用例子来说明使用PyNE来进行基于网格的计算停机剂量率的流程。</p>
<p>本流程需要提前安装Trelis, DAGMC, ALARA和PyNE。<br>DAGMC的安装可以参考<a href="https://zxkjack123.github.io/neutronics/dagmc-install/">这里</a>， PyNE的安装可以参考<a href="https://zxkjack123.github.io/neutronics/pyne-developer-install/">这里</a>。ALARA的安装可以参考<a href="https://zxkjack123.github.io/neutronics/alara-install/">这里</a>。</p>
<h2 id="例子的重要性"><a href="#例子的重要性" class="headerlink" title="例子的重要性"></a>例子的重要性</h2><p>使用的工具功能越多，那么使用起来一般就越复杂，新手就越难上手，新手总会在各种环节出现各种开发者意想不到的困难。即便软件官网上介绍了软件的各个工具的使用方法，但如果没有一个生动的例子来把这些应用工具的使用方法串起来的话，还是非常难的。</p>
<p>我自己作为一个PyNE系统的使用者，现在也参与了其中的部分开发工作，对此深有体会。对于新手的教学，告诉他们这个软件的各种功能是远远不够的，必须辅以实例，手把手的教会他们怎么用这个功能。用例子来说明这些问题是比较容易让新手接受的。我作为一个PyNE的使用者，也是一个新手。</p>
<p>这篇文章介绍了我如何从Trelis开始，一步一步实现计算一个简单模型的停机计量的过程的。</p>
<h2 id="例题描述"><a href="#例题描述" class="headerlink" title="例题描述"></a>例题描述</h2><p>现有如下形状的几何体：</p>
<center>
<br><img src="/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/test_case1.png" width="300px"><br></center>
图中每个小快代表着$ 10 \times 10 \times 10 \, \mathrm{cm}^3$的立方体。简单起见，我们把栅元1和3的材料设为密度为$1.0 \, \mathrm{g/cm^3}$的水(Water)，栅元2的材料设为密度为$7.8 \, \mathrm{g/cm^3}$的钢(Steel)。除了这几个栅元外其它区域都是真空。栅元1的正中心有一个点中子源，各项同性的发射能量为14 MeV的中子。

<p>让点中子源以$10^{10}$个中子每秒的中子发射率辐照这几个栅元1年，然后停止辐照，考察停止辐照后1小时的栅元1, 2, 3的停机剂量率。</p>
<h2 id="输入文件准备"><a href="#输入文件准备" class="headerlink" title="输入文件准备"></a>输入文件准备</h2><p>要进行蒙特卡罗输运计算，我们需要提供以下信息：</p>
<ol>
<li>几何信息，包括栅元和曲面。</li>
<li>材料信息。每个区域（栅元）是什么材料（材料的组成份额）</li>
<li>中子源信息。</li>
<li>Tally信息。想统计的东西</li>
<li>其他信息。如截断卡，权重及权窗，计算终止条件等。</li>
</ol>
<p>与普通MCNP计算不同，使用DAGMC计算时这些信息并不是全部都由一个输入文件提供，而是分别通过不同的文件提供。一个加载了几何和材料信息的h5m文件提供几何和材料信息。而其他信息则通过另一个input文本文件提供。</p>
<h3 id="Trelis建模"><a href="#Trelis建模" class="headerlink" title="Trelis建模"></a>Trelis建模</h3><h4 id="几何体的建立"><a href="#几何体的建立" class="headerlink" title="几何体的建立"></a>几何体的建立</h4><p>使用Trelis建立3个立方体，并在立方体外围设置一个graveyard区域，所有到达graveyard区域的中子将被杀死。graveyard的设置可以参考DAGMC关于<a href="https://svalinn.github.io/DAGMC/usersguide/codes/dag-mcnp.html?highlight=graveyard">graveyard的官方说明</a>。</p>
<center><br><img src="/neutronics/sample-trelis-dagmc-pyne-r2s-workflow/trelis_geom_test_case1.png"><br></center>
上图所示的三个小立方体块而就是我们建立的几个栅元，外面一个稍大的立方体薄壳就是我们想要的graveyard。
几何体分别标记为：
1. 蓝色小立方体，cell 1， trelis vol id: 1, 材料为密度为1的水，材料号设定为1
2. 黄色小立方体，cell 2, trelis vol id: 2, 材料为密度为7.8的铁，材料号设定为2
3. 红色小立方体块，cell 3, trelis vol id: 3， 材料为密度为1的水，材料号设定为1
4. 黄色大立方体薄壳，graveyard, trelis vol id: 8

<h4 id="分组并赋材料"><a href="#分组并赋材料" class="headerlink" title="分组并赋材料"></a>分组并赋材料</h4><p>几何体设置好了之后，对这几个栅元进行分组并赋材料。<br>在trelis界面输入下面命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; group &quot;mat:Water&#x2F;rho:1.0&quot; add vol 1 3</span><br><span class="line">trelis&gt; group &quot;mat:Steel&#x2F;rho:7.8&quot; add vol 2</span><br></pre></td></tr></table></figure>
<p><strong>备注1</strong>：’trelis&gt;’代表该命令是在trelis窗口中执行。</p>
<h4 id="设置问题边界"><a href="#设置问题边界" class="headerlink" title="设置问题边界"></a>设置问题边界</h4><p>边界包括终止边界和反射边界等。终止边界指的是我们不关心的区域，中子进入到终止边界后就会被杀死，这和MCNP中<em>imp=0</em>的区域相似。反射边界就是反射面，中子到达反射面后会被反射回去，在对称几何中很常用。</p>
<h5 id="终止边界：graveyard"><a href="#终止边界：graveyard" class="headerlink" title="终止边界：graveyard"></a>终止边界：graveyard</h5><p>终止边界的设置实际上是通过对这个区域设置特殊材料实现的。比如此例题中需要将8号volume (可以简写为vol)设置为graveyard,可以使用下面命令进行设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; group &quot;mat:Graveyard&quot; add volume 8</span><br></pre></td></tr></table></figure>

<h5 id="反射边界"><a href="#反射边界" class="headerlink" title="反射边界"></a>反射边界</h5><p>反射边界是通过指定反射面的方式来设置的。与volume类似，我们可以把一些面加入到一个group，然后将这个group设置为反射面即可。反射面属性的设置也是通过把group名字设置为特殊字符串的方式实现。<br>比如将10, 11号曲面设置为反射面，可以通过下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; group &quot;boundary:Reflecting&quot; add surf 10 11</span><br></pre></td></tr></table></figure>
<p>本例题中不需要将任何曲面设置为反射面。</p>
<h4 id="imprint-amp-merge"><a href="#imprint-amp-merge" class="headerlink" title="imprint &amp; merge"></a>imprint &amp; merge</h4><p>Imprint和merge是trelis中处理曲面的两个操作，他们的作用包括合并重合曲面和将无穷大的曲面根据几何体分割为总多的小的facet。功能说明可以参考<a href="https://svalinn.github.io/DAGMC/usersguide/trelis_basics.html">trelis imprint and merge说明</a>。</p>
<p>我们需要做的是，在trelis界面执行下面的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; imprint body all</span><br><span class="line">trelis&gt; merge all</span><br></pre></td></tr></table></figure>

<h4 id="导出几何文件"><a href="#导出几何文件" class="headerlink" title="导出几何文件"></a>导出几何文件</h4><p>安装了DAGMC插件的trelis可以使用内置命令到处几何文件，使用方法可以通过下面命令查看帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; help dagmc</span><br></pre></td></tr></table></figure>
<p>也可以参考<a href="https://svalinn.github.io/DAGMC/usersguide/codes/dag-mcnp.html">官方文档</a>。</p>
<p>对于本例题，我们可以在trelis中执行下面命令将几何信息存放到”geometry1.h5m”中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trelis&gt; export dagmc geometry1.h5m</span><br></pre></td></tr></table></figure>
<p>至此，我们完成了几何文件的制作。</p>
<p><strong>注意：在没有设置trelis默认导出文件路径的情况下，此时生成的”geometry1.h5m”文件并不一定在当前文件夹，可能存放于$HOME/Documents中，也可能在其他常用默认文件夹中</strong></p>
<h3 id="制作材料"><a href="#制作材料" class="headerlink" title="制作材料"></a>制作材料</h3><p>我们需要首先制作本例题需要使用的材料库，包括Water和Steel两种材料。可以参考<a href="https://zxkjack123.github.io/neutronics/make-pyne-material-lib/">PyNE材料库制作</a>。</p>
<p>下面是制作本例子中的”Water”和”Steel”用到的python脚本文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">#</span><br><span class="line">from pyne.material import Material,MaterialLibrary</span><br><span class="line">print &quot;Welcome!&quot;</span><br><span class="line">mat_lib&#x3D;MaterialLibrary()</span><br><span class="line">#</span><br><span class="line">mat2 &#x3D; Material(&#123;&#39;Fe&#39;:0.655,&#39;Cr&#39;:0.170,&#39;Ni&#39;:0.120,&#39;Mo&#39;: 0.025,&#39;Mn&#39;: 0.02, &#39;Si&#39;:.01&#125;,density&#x3D;7.92)</span><br><span class="line">mat2&#x3D;mat2.expand_elements()</span><br><span class="line">#</span><br><span class="line"># define a simple water since O-18 not in mcnp xs libs</span><br><span class="line">watervec&#x3D;&#123;10010:2,80160:1&#125; # simple water</span><br><span class="line">water &#x3D; Material()</span><br><span class="line">water.density &#x3D; 1.0</span><br><span class="line">water.from_atom_frac(watervec)</span><br><span class="line">#</span><br><span class="line">mat_lib[&quot;Steel&quot;]&#x3D;mat2</span><br><span class="line">mat_lib[&quot;Water&quot;]&#x3D;water</span><br><span class="line">#</span><br><span class="line">mat_lib.write_hdf5(&quot;test_material_lib.h5&quot;)</span><br><span class="line">#</span><br><span class="line">print &quot;All done!&quot;</span><br></pre></td></tr></table></figure>

<p>备注：制作材料的时候会调用PyNE，需要保证此时系统<strong>LD_LIBRARY_PATH</strong>中的MOAB是4.9.1版本的。</p>
<h3 id="整合几何与材料"><a href="#整合几何与材料" class="headerlink" title="整合几何与材料"></a>整合几何与材料</h3><p>按照UWUW流程制作材料，使用UWUW_preprocessor：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uwuw_preproc &lt;dagmc h5m filename&gt; -v -l &lt;path to nuclear data library&gt;</span><br></pre></td></tr></table></figure>

<p>假设我们制作了材料库并存放在”material_lib1.h5”中，我们接下来就可以执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uwuw_preproc geometry1.h5m -v -l material_lib1.h5</span><br></pre></td></tr></table></figure>

<h3 id="DAGMC-input文件准备"><a href="#DAGMC-input文件准备" class="headerlink" title="DAGMC input文件准备"></a>DAGMC input文件准备</h3><p>DAGMC的input文件中需要给定普通MCNP中除了栅元卡和曲面卡以及材料卡的其他部分，包括但不限于：</p>
<ol>
<li>中子源定义，必要项</li>
<li>计算终止条件，必要项</li>
<li>Tally卡，可选项，但一般都会有</li>
<li>其他功能性辅助卡，可选项，根据实际情况添加</li>
</ol>
<p>对于此例子的一个简单input文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C test1 input</span><br><span class="line">C neutron source: point source, 14 MeV</span><br><span class="line">sdef pos&#x3D;0 0 0  erg&#x3D;14  </span><br><span class="line">C </span><br><span class="line">nps 1e5</span><br><span class="line">C Tally card</span><br><span class="line">fmesh4:n geom&#x3D;xyz origin&#x3D; -5 -5 -5</span><br><span class="line">         imesh&#x3D;15 iints&#x3D;2</span><br><span class="line">         jmesh&#x3D;5 jints&#x3D;1</span><br><span class="line">         kmesh&#x3D;15 kints&#x3D;2</span><br><span class="line">         emesh 0.1 20</span><br></pre></td></tr></table></figure>
<h2 id="中子输运计算"><a href="#中子输运计算" class="headerlink" title="中子输运计算"></a>中子输运计算</h2><p>使用DAGMC进行输运计算时，需要通过<strong>i=**来指定输入文件，通过</strong>g=**来指定加载了材料的几何文件，详细运行指令可以参考<a href="https://svalinn.github.io/DAGMC/usersguide/uw2.html">官方文档</a>。</p>
<p>对于本例题，可以使用下面的方法运行本例子。<br>单线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要先保障系统能够找到正确的mcnp5.mpi，找不到的话需要给出完整路径</span><br><span class="line">mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>

<p>多线程运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mpirun -np n mcnp5.mpi i&#x3D;input g&#x3D;geom.h5m</span><br></pre></td></tr></table></figure>
<p>备注：input文件和几何文件的名称长度都不能超过8个字符，可以使用<strong>ln -sf original_long_name.h5m geom.h5m</strong>把原文件链接到一个较短名字的文件后再运行。</p>
<p>计算完成之后，我们便得到了一个<strong>meshtal</strong>文件。</p>
<h2 id="活化计算"><a href="#活化计算" class="headerlink" title="活化计算"></a>活化计算</h2><p>中子输运完成后，我们开始正式调用PyNE的<a href="http://pyne.io/usersguide/r2s.html?highlight=r2s">R2S计算</a>模块的功能进行停机剂量率计算了。</p>
<p>进行停机剂量率计算，我们需要的主要信息包括：</p>
<ol>
<li>每个网格单元的材料成分。必须项。由同时包含了几何和材料的geom.h5m文件提供。（此文件就是进行DAGMC计算的那个）</li>
<li>每个网格单元的中子通量能谱。必须项。由meshtal文件提供。</li>
<li>活化计算能力。必须项。由Analytic and Laplacian Adaptive Radioactivity Analysis软件:<a href="https://github.com/svalinn/ALARA">ALARA</a>提供。</li>
<li>辐照及冷却方案。必须项。需要在R2S过程中指定。</li>
</ol>
<p>在我们的工作文件夹下新建一个子文件夹用来存放R2S计算相关的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir r2s_run</span><br><span class="line"><span class="built_in">cd</span> r2s_run</span><br></pre></td></tr></table></figure>
<h3 id="初始化配置-setup"><a href="#初始化配置-setup" class="headerlink" title="初始化配置:setup"></a>初始化配置:setup</h3><p>初始化配置r2s。执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r2s.py setup</span><br></pre></td></tr></table></figure>

<p>执行之后我们应该能够看到下面的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一些warning</span><br><span class="line">File &quot;config.ini&quot; has been written</span><br><span class="line">File &quot;alara_params.txt&quot; has been written</span><br><span class="line">Fill out the fields in these filse then run &quot;&gt;&gt; r2s.py step1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><strong>setup</strong>这一步会生成两个文件：<strong>config.ini</strong>和<strong>alara_params.txt</strong>，我们需要修改这两个文件中的一些设置，包括辐照方案的设置和一些计算细节的设置。</p>
<h4 id="修改config-ini设置"><a href="#修改config-ini设置" class="headerlink" title="修改config.ini设置"></a>修改<strong>config.ini</strong>设置</h4><p>一般情况下，我们需要注意的几个设置是：</p>
<ol>
<li>structured: 是否是结构化网格。结构化网格就是指MCNP中用的xyz或cyl网格。我们应该选<strong>True</strong></li>
<li>sub_voxel: 是否采用sub_voxel模式，sub_voxel模式是我正在添加的代码，还没有完成，暂时不能选用，因此是False</li>
<li>reverse: 反转中子通量顺序。DAGMC输出的中子通量是按照从低能到高能排序，而用ALARA进行活化计算时需要按照从高能到低能读取，因此需要把中子通量逆序排列。这里填True。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[general]</span><br><span class="line"><span class="comment"># Specify whether this problem uses structured or unstructured mesh</span></span><br><span class="line">structured: <span class="literal">True</span></span><br><span class="line"><span class="comment"># Specify whether this problem uses sub-voxel r2s</span></span><br><span class="line">sub_voxel: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[step1]</span><br><span class="line"><span class="comment"># Path to MCNP MESHTAL file containing neutron fluxes or a DAG-MCNP5</span></span><br><span class="line"><span class="comment"># unstructured mesh tally .h5m file.</span></span><br><span class="line">meshtal: meshtal</span><br><span class="line"><span class="comment"># Tally number within the meshtal file containing the fluxes for activation.</span></span><br><span class="line">tally_num: <span class="number">4</span></span><br><span class="line"><span class="comment"># The name of the tag used to store flux data on the mesh. For unstructured</span></span><br><span class="line"><span class="comment"># mesh this tag must already exist within the file specified in &lt;meshtal&gt;.</span></span><br><span class="line">flux_tag: n_flux</span><br><span class="line"><span class="comment"># Path to the DAGMC material-laden geometry file (.h5m).</span></span><br><span class="line">geom: geom.h5m</span><br><span class="line"><span class="comment"># If True the fluxes in the fluxin file will be printed in the reverse</span></span><br><span class="line"><span class="comment"># order of how they appear within the flux vector tag. Since MCNP and</span></span><br><span class="line"><span class="comment"># the Meshtal class order fluxes from low energy to high energy, this</span></span><br><span class="line"><span class="comment"># option should be true if the transmutation data being used is</span></span><br><span class="line"><span class="comment"># ordered from high-energy to low-energy.</span></span><br><span class="line">reverse: <span class="literal">True</span></span><br><span class="line"><span class="comment"># Number of rays to fire down each mesh row in each direction to calculate</span></span><br><span class="line"><span class="comment"># cell volume fractions.</span></span><br><span class="line">num_rays: <span class="number">10</span></span><br><span class="line"><span class="comment"># If true, rays will be fired down mesh rows in evenly spaced intervals.</span></span><br><span class="line"><span class="comment"># In this case &lt;num_rays&gt; must be a perfect square. If false, rays are fired</span></span><br><span class="line"><span class="comment"># down mesh rows in random intervals.</span></span><br><span class="line">grid: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">[step2]</span><br><span class="line"><span class="comment"># List of decays times, seperated by commas. These strings much match exactly</span></span><br><span class="line"><span class="comment"># with their counterparts in the phtn_src file produced in step1. No spaces</span></span><br><span class="line"><span class="comment"># should appear in this line except the space between the time and the time unit</span></span><br><span class="line"><span class="comment"># for each entry.</span></span><br><span class="line">decay_times:<span class="number">1</span> h</span><br><span class="line"><span class="comment"># The prefix of the .h5m files containing the source density distributations for</span></span><br><span class="line"><span class="comment"># each decay time.</span></span><br><span class="line">output: source</span><br><span class="line"><span class="comment"># The name of the output files containing the total photon source intensities for</span></span><br><span class="line"><span class="comment"># each decay time</span></span><br><span class="line">tot_phtn_src_intensities : total_photon_source_intensites.txt</span><br></pre></td></tr></table></figure>

<h4 id="修改alara-params-txt"><a href="#修改alara-params-txt" class="headerlink" title="修改alara_params.txt"></a>修改alara_params.txt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">material_lib alara_matlib</span><br><span class="line">element_lib data&#x2F;nuclib</span><br><span class="line">data_library alaralib data&#x2F;truncated_fendl2bin</span><br><span class="line"></span><br><span class="line">cooling</span><br><span class="line">    1 h</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">output zone</span><br><span class="line">       integrate_energy</span><br><span class="line">       # Energy group upper bounds. The lower bound is always zero.</span><br><span class="line">       photon_source  data&#x2F;truncated_fendl2bin  phtn_src 24 1.00E4 2.00E4 5.00E4 1.00E5</span><br><span class="line">       2.00E5 3.00E5 4.00E5 6.00E5 8.00E5 1.00E6 1.22E6 1.44E6 1.66E6</span><br><span class="line">       2.00E6 2.50E6 3.00E6 4.00E6 5.00E6 6.50E6 8.00E6 1.00E7 1.20E7</span><br><span class="line">       1.40E7 2.00E7</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#     flux name    fluxin file   norm   shift   unused</span><br><span class="line">flux  my_flux     alara_fluxin  1e10     0      default</span><br><span class="line"></span><br><span class="line"># Specify the irradiation schedule below.</span><br><span class="line"># Syntax is found in the ALARA user manual</span><br><span class="line"># This example is for a single 1 y pulse</span><br><span class="line">schedule    my_schedule</span><br><span class="line">    1 y my_flux my_pulse_history 0  s</span><br><span class="line">end</span><br><span class="line">pulsehistory  my_pulse_history</span><br><span class="line">    1    0.0    s</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#other parameters</span><br><span class="line">truncation 1e-12</span><br><span class="line">impurity 5e-6 1e-3</span><br><span class="line">dump_file dump.file</span><br></pre></td></tr></table></figure>

<h3 id="r2s-py-step1"><a href="#r2s-py-step1" class="headerlink" title="r2s.py step1"></a>r2s.py step1</h3><p><strong>r2s.py step1</strong>是用来根据<strong>r2s.py setup</strong>生成的配置文件生成ALARA输入文件，中子通量文件和ALARA材料库文件的。</p>
<p>当我们修改好上面两个文件后，就可以使用r2s.py生成ALARA计算需要的文件了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ r2s.py step1</span><br></pre></td></tr></table></figure>


<h3 id="材料数据库准备"><a href="#材料数据库准备" class="headerlink" title="材料数据库准备"></a>材料数据库准备</h3><p><strong>ALARA输入文件</strong>中有三行是<strong>材料数据库</strong>相关的信息。</p>
<ol>
<li>material_lib alara_matlib 这个<strong>alara_matlib</strong>是alara需要读取的材料成功定义的文件名。这个文件是会由程序从test1_geometry.h5m (geom.h5m)中读取的，不需要做修改。</li>
<li>element_lib data/nuclib 这个文件是定义元素的丰度用的。默认是自然丰度，也可以自己定义修改丰度。自己定义一个元素丰度数据表显然是非常麻烦的，在ALARA的安装文件中$ALARA/data下有一个<strong>elelib.std</strong>，可以把这个文件拷贝到工作文件夹下并重命名为<strong>nucib</strong>即可（也可以设置element_lib elelib.std)。但是这个<strong>elelib.std</strong>只能用于材料定义是按照元素定义的，如果有针对核素的定义，则这个就不能用了。需要将元素扩展成核素，需要后续介的方法单独处理。</li>
<li>data_library alaralib truncated_fendl2bin （ALARA应该配备fendl3bin)但是并没有，ALARA安装文件中的sample/datam文件夹下只有truncated_fendl2bin数据库。我们可以把这个数据库相关的文件拷贝到工作文件夹。</li>
</ol>
<p>当材料定义是针对核素定义了的化，普通的<strong>elelib.std</strong>就没办法使用了，会出现错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">310: Could not find element &lt;string&gt; in element library.</span><br><span class="line"></span><br><span class="line">The element string was not found in the element library. This could be due to an error in the material library, incorrect user input, or an omission in the element library.</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">这时我们需要使用工具**elelib_to_nuclib.py**来将元素扩展成核素数据。这个工具是一个python脚本，调用pyne数据模块扩展元素数据。工具的位置在ALARA源文件的tools文件夹下，使用方法：</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">$ cd r2s_run&#x2F;data</span><br><span class="line">$ python &lt;path_to_elelib_to_nuclib.py&gt; elelib_std -o nuclib</span><br></pre></td></tr></table></figure>



<h3 id="alara计算"><a href="#alara计算" class="headerlink" title="alara计算"></a>alara计算</h3><p>当<strong>step1</strong>完成后，程序会给出运行alara的提示，按照提示运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ alara alara_inp &gt; output.txt</span><br></pre></td></tr></table></figure>
<p>等待alara运行完成，会生成几个文件：</p>
<ol>
<li>output.txt: ALARA输出文件，里面有活化后材料的核素组成以及光子发射率数据</li>
<li>phtn_src: ALARA输出文件，里面有详细的各个各个材料各个核素缠身的各个能群的光子数据</li>
</ol>
<h3 id="r2s-step2"><a href="#r2s-step2" class="headerlink" title="r2s step2"></a>r2s step2</h3><p>ALARA计算完成后，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ r2s.py step2</span><br></pre></td></tr></table></figure>
<p>执行完成后，我们可以看到工作文件夹中多了几个文件：</p>
<ol>
<li>e_bounds:光子能群结构。从低能到高能，单位为eV。最低能群能量下限为0.</li>
<li>phtn_src.h5: HDF5格式的光子源数据，无法直接打开读取，只能程序读。</li>
<li>source_<strong>i</strong>.h5m: 第<strong>i</strong>个冷却时间点的网格光子源数据。</li>
<li>total_photon_source_intensites.txt: 里面是各个冷却时间节点的总光子发射率。<br>你</li>
</ol>
<h2 id="光子输运"><a href="#光子输运" class="headerlink" title="光子输运"></a>光子输运</h2><p>获得光子源后，我们就可以进行光子输运计算了。计算前必须确认DAGMC是已经包含了源子程序的版本，如果没有，需要先参考<a href="%E7%BC%96%E8%AF%91%E5%B8%A6%E7%94%A8%E4%BA%8ER2S%E7%9A%84%E6%BA%90%E5%AD%90%E7%A8%8B%E5%BA%8F%E7%9A%84DAGMC">编译带用于R2S的源子程序的DAGMC</a>安装DAGMC。</p>
<h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p>进行光子输运计算，我们需要提供几何文件，材料，光子源，以及需要统计的信息。因此需要准备的文件有：</p>
<ol>
<li>geom.h5m: 就是中子输运时用的那个文件，即本例子中的test1_geometry.h5m，它包含了几何和材料信息</li>
<li>source.h5m:光子源信息文件，源子程序需要从这里读取信息。由于MCNP无法从输入文件中传递字符串，所以这个文件名称不能改变，必须是source.h5m。</li>
<li>e_bounds: 光子能群结构文件。</li>
<li>input: 提供tally信息，另外需要在这个文件中定义<strong>idum</strong>，用于控制源子程序过程。</li>
</ol>
<p>准备好这些文件后，我们还需要对这些文件进行一些小修改。</p>
<ol>
<li>input文件修改：首先，需要加上mode p， 然后修改tally部分。</li>
<li>e_bounds: 这个文件中的能群单位是eV而不是MeV，需要手动将里面的数据单位除以1e6。（在github上提交该修改建议）</li>
</ol>
<p>我们还需要修改栅元的重要性，因为中子输运时的文件里面的重要性是默认为中子的重要性，没有光子的重要性。但是这个重要性信息是写在h5m文件里面的，没法直接修改。</p>
<p>我们需要先运行一次这个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mcnp5.mpi i=input g=geom.h5m</span><br></pre></td></tr></table></figure>
<p>现在这个运行肯定会出现错误，说粒子产生子重要性为0的区域。但是同时这个过程会生成一个可编辑的<strong>lcad</strong>文件，我们可以修改这个<strong>lcad</strong>文件，在重要性部分添加上<strong>imp:p=1</strong>/<strong>imp:p=0</strong>，将这个文件重命名为<strong>lcad_m</strong>，删掉过程文件<strong>fcad, outp, runtpe</strong>后再次运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mcnp5.mpi i=input g=geom.h5m l=lcad_m</span><br></pre></td></tr></table></figure>
<p>之后就得到结果，至此停机剂量的计算完成。</p>
<p><strong>备注</strong>：在计算得到结果之后，还可以把几何图形及计算结果的网格数据进行可视化绘图。绘图方法可以参考<a href="https://zxkjack123.github.io/neutronics/dagmc-geom-data-visualization/">DAGMC数据绘图</a>。</p>
]]></content>
      <categories>
        <category>neutronics</category>
      </categories>
      <tags>
        <tag>PyNE</tag>
        <tag>DAGMC</tag>
        <tag>Trelis</tag>
        <tag>R2S</tag>
        <tag>shutdown dose rate</tag>
        <tag>停机计量</tag>
      </tags>
  </entry>
  <entry>
    <title>使用清华镜像源提升python相关软件安装速度</title>
    <url>/2020/08/11/tsinghua-source/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在中国下载安装python相关的软件包，由于网络原因，速度非常慢，经常会因为超时或是无法连接而失败。本文记录了使用清华源提升安装速度的方法。<br>我在使用anaconda创建一个包含python3.8及其他一些包的环境时，一直出现软件下载过程失败的问题，比如下面的报错记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Downloading and Extracting Packages</span><br><span class="line">python-3.8.5         | 49.3 MB   | 4                                     |   1% </span><br><span class="line"></span><br><span class="line">CondaHTTPError: HTTP 000 CONNECTION FAILED <span class="keyword">for</span> url &lt;https://repo.anaconda.com/pkgs/main/linux-64/python-3.8.5-hcff3b4d_0.conda&gt;</span><br><span class="line">Elapsed: -</span><br><span class="line"></span><br><span class="line">An HTTP error occurred when trying to retrieve this URL.</span><br><span class="line">HTTP errors are often intermittent, and a simple retry will get you on your way.</span><br></pre></td></tr></table></figure>

<p>使用pip安装软件包时，也很慢，常出现如下面例子的网络问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --force-reinstall numpy</span><br><span class="line">WARNING: Retrying (Retry(total=4, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;NewConnectionError(&#x27;</span>&lt;pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f4d65026670&gt;: Failed to establish a new connection: [Errno 101] Network is unreachable<span class="string">&#x27;)&#x27;</span>: /simple/numpy/</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>虽然错误提示中说，这个问题只是暂时的网络不好，重新试试就可以解决。但实际上经常试好多次都一直有这个问题。我在网络上按照这个错误提示搜索解决方法，找到的我认为最好的答案是，使用清华的镜像源代替默认的源，从中国的镜像源下载的速度的确要快很多。</p>
<h4 id="anaconda使用清华源"><a href="#anaconda使用清华源" class="headerlink" title="anaconda使用清华源"></a>anaconda使用清华源</h4><p>清华镜像源提供的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda镜像使用帮助</a>提供了anaconda下载和anaconda仓库镜像的使用知道。使用清华anaconda镜像仓库的方法，是通过修改anaconda的.condarc文件实现，参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;r</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;pro</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  msys2: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  bioconda: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  menpo: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  pytorch: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  simpleitk: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br></pre></td></tr></table></figure>
<p>修改该文件后，可以运行<code>conda clean -i</code>清除索引缓存，保证用的是镜像站提供的索引。</p>
<h4 id="pip使用清华源"><a href="#pip使用清华源" class="headerlink" title="pip使用清华源"></a>pip使用清华源</h4><p>安装python包时，还经常使用pip，网速同样很慢。<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">pypi 镜像使用帮助</a>给出了解决方案。<br>临时安装一个包时，可以使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple some-package</span><br></pre></td></tr></table></figure>
<p>将清华镜像源设为默认：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu, tsinghua, python, mirror</tag>
      </tags>
  </entry>
</search>
